
fft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002838  08005ea0  08005ea0  00015ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d8  080086d8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080086d8  080086d8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086d8  080086d8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086d8  080086d8  000186d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086dc  080086dc  000186dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080086e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000080  08008760  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08008760  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001456f  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b76  00000000  00000000  00034618  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000938  00000000  00000000  00037190  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00014b0d  00000000  00000000  00037ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000af71  00000000  00000000  0004c5d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0007232e  00000000  00000000  00057546  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000c9874  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000007e8  00000000  00000000  000c98f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  0000258c  00000000  00000000  000ca0d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08005e88 	.word	0x08005e88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08005e88 	.word	0x08005e88

0800014c <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 800014c:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800014e:	2b01      	cmp	r3, #1
	IT       LS
 8000150:	bf98      	it	ls
	BXLS     lr
 8000152:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000154:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000158:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800015a:	089b      	lsrs	r3, r3, #2

0800015c <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800015c:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000160:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000164:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000166:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800016a:	4480      	add	r8, r0
	ADD      r9,r0,r9
 800016c:	4481      	add	r9, r0
	ADD      r2,r0,r2
 800016e:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000170:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000172:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 8000176:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800017a:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 800017c:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000180:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000184:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 8000188:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 800018c:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 800018e:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000192:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 8000196:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 8000198:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 800019c:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 80001a0:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 80001a4:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 80001a8:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 80001aa:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80001ac:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 80001ae:	d1d5      	bne.n	800015c <arm_bitreversal_32_0>
	POP      {r4-r9}
 80001b0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80001b4:	4770      	bx	lr

080001b6 <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 80001b6:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80001b8:	2b01      	cmp	r3, #1
	IT       LS
 80001ba:	bf98      	it	ls
	BXLS     lr
 80001bc:	4770      	bxls	lr
	PUSH     {r4-r9}
 80001be:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80001c2:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80001c4:	089b      	lsrs	r3, r3, #2

080001c6 <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80001c6:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80001ca:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80001ce:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80001d0:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 80001d4:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 80001d8:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 80001dc:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 80001e0:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80001e4:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80001e8:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80001ec:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80001ee:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80001f2:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80001f6:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80001fa:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80001fe:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8000200:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000202:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000204:	d1df      	bne.n	80001c6 <arm_bitreversal_16_0>
	POP      {r4-r9}
 8000206:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800020a:	4770      	bx	lr

0800020c <__aeabi_drsub>:
 800020c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000210:	e002      	b.n	8000218 <__adddf3>
 8000212:	bf00      	nop

08000214 <__aeabi_dsub>:
 8000214:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000218 <__adddf3>:
 8000218:	b530      	push	{r4, r5, lr}
 800021a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000222:	ea94 0f05 	teq	r4, r5
 8000226:	bf08      	it	eq
 8000228:	ea90 0f02 	teqeq	r0, r2
 800022c:	bf1f      	itttt	ne
 800022e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000232:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000236:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023e:	f000 80e2 	beq.w	8000406 <__adddf3+0x1ee>
 8000242:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000246:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024a:	bfb8      	it	lt
 800024c:	426d      	neglt	r5, r5
 800024e:	dd0c      	ble.n	800026a <__adddf3+0x52>
 8000250:	442c      	add	r4, r5
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	ea82 0000 	eor.w	r0, r2, r0
 800025e:	ea83 0101 	eor.w	r1, r3, r1
 8000262:	ea80 0202 	eor.w	r2, r0, r2
 8000266:	ea81 0303 	eor.w	r3, r1, r3
 800026a:	2d36      	cmp	r5, #54	; 0x36
 800026c:	bf88      	it	hi
 800026e:	bd30      	pophi	{r4, r5, pc}
 8000270:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000274:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000278:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800027c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000280:	d002      	beq.n	8000288 <__adddf3+0x70>
 8000282:	4240      	negs	r0, r0
 8000284:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000288:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800028c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000290:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x84>
 8000296:	4252      	negs	r2, r2
 8000298:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800029c:	ea94 0f05 	teq	r4, r5
 80002a0:	f000 80a7 	beq.w	80003f2 <__adddf3+0x1da>
 80002a4:	f1a4 0401 	sub.w	r4, r4, #1
 80002a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ac:	db0d      	blt.n	80002ca <__adddf3+0xb2>
 80002ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b2:	fa22 f205 	lsr.w	r2, r2, r5
 80002b6:	1880      	adds	r0, r0, r2
 80002b8:	f141 0100 	adc.w	r1, r1, #0
 80002bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c0:	1880      	adds	r0, r0, r2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	4159      	adcs	r1, r3
 80002c8:	e00e      	b.n	80002e8 <__adddf3+0xd0>
 80002ca:	f1a5 0520 	sub.w	r5, r5, #32
 80002ce:	f10e 0e20 	add.w	lr, lr, #32
 80002d2:	2a01      	cmp	r2, #1
 80002d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d8:	bf28      	it	cs
 80002da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	18c0      	adds	r0, r0, r3
 80002e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002ec:	d507      	bpl.n	80002fe <__adddf3+0xe6>
 80002ee:	f04f 0e00 	mov.w	lr, #0
 80002f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000302:	d31b      	bcc.n	800033c <__adddf3+0x124>
 8000304:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000308:	d30c      	bcc.n	8000324 <__adddf3+0x10c>
 800030a:	0849      	lsrs	r1, r1, #1
 800030c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000310:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000314:	f104 0401 	add.w	r4, r4, #1
 8000318:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800031c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000320:	f080 809a 	bcs.w	8000458 <__adddf3+0x240>
 8000324:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000328:	bf08      	it	eq
 800032a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032e:	f150 0000 	adcs.w	r0, r0, #0
 8000332:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000336:	ea41 0105 	orr.w	r1, r1, r5
 800033a:	bd30      	pop	{r4, r5, pc}
 800033c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000340:	4140      	adcs	r0, r0
 8000342:	eb41 0101 	adc.w	r1, r1, r1
 8000346:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034a:	f1a4 0401 	sub.w	r4, r4, #1
 800034e:	d1e9      	bne.n	8000324 <__adddf3+0x10c>
 8000350:	f091 0f00 	teq	r1, #0
 8000354:	bf04      	itt	eq
 8000356:	4601      	moveq	r1, r0
 8000358:	2000      	moveq	r0, #0
 800035a:	fab1 f381 	clz	r3, r1
 800035e:	bf08      	it	eq
 8000360:	3320      	addeq	r3, #32
 8000362:	f1a3 030b 	sub.w	r3, r3, #11
 8000366:	f1b3 0220 	subs.w	r2, r3, #32
 800036a:	da0c      	bge.n	8000386 <__adddf3+0x16e>
 800036c:	320c      	adds	r2, #12
 800036e:	dd08      	ble.n	8000382 <__adddf3+0x16a>
 8000370:	f102 0c14 	add.w	ip, r2, #20
 8000374:	f1c2 020c 	rsb	r2, r2, #12
 8000378:	fa01 f00c 	lsl.w	r0, r1, ip
 800037c:	fa21 f102 	lsr.w	r1, r1, r2
 8000380:	e00c      	b.n	800039c <__adddf3+0x184>
 8000382:	f102 0214 	add.w	r2, r2, #20
 8000386:	bfd8      	it	le
 8000388:	f1c2 0c20 	rsble	ip, r2, #32
 800038c:	fa01 f102 	lsl.w	r1, r1, r2
 8000390:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000394:	bfdc      	itt	le
 8000396:	ea41 010c 	orrle.w	r1, r1, ip
 800039a:	4090      	lslle	r0, r2
 800039c:	1ae4      	subs	r4, r4, r3
 800039e:	bfa2      	ittt	ge
 80003a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a4:	4329      	orrge	r1, r5
 80003a6:	bd30      	popge	{r4, r5, pc}
 80003a8:	ea6f 0404 	mvn.w	r4, r4
 80003ac:	3c1f      	subs	r4, #31
 80003ae:	da1c      	bge.n	80003ea <__adddf3+0x1d2>
 80003b0:	340c      	adds	r4, #12
 80003b2:	dc0e      	bgt.n	80003d2 <__adddf3+0x1ba>
 80003b4:	f104 0414 	add.w	r4, r4, #20
 80003b8:	f1c4 0220 	rsb	r2, r4, #32
 80003bc:	fa20 f004 	lsr.w	r0, r0, r4
 80003c0:	fa01 f302 	lsl.w	r3, r1, r2
 80003c4:	ea40 0003 	orr.w	r0, r0, r3
 80003c8:	fa21 f304 	lsr.w	r3, r1, r4
 80003cc:	ea45 0103 	orr.w	r1, r5, r3
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f1c4 040c 	rsb	r4, r4, #12
 80003d6:	f1c4 0220 	rsb	r2, r4, #32
 80003da:	fa20 f002 	lsr.w	r0, r0, r2
 80003de:	fa01 f304 	lsl.w	r3, r1, r4
 80003e2:	ea40 0003 	orr.w	r0, r0, r3
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	fa21 f004 	lsr.w	r0, r1, r4
 80003ee:	4629      	mov	r1, r5
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	f094 0f00 	teq	r4, #0
 80003f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fa:	bf06      	itte	eq
 80003fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000400:	3401      	addeq	r4, #1
 8000402:	3d01      	subne	r5, #1
 8000404:	e74e      	b.n	80002a4 <__adddf3+0x8c>
 8000406:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040a:	bf18      	it	ne
 800040c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000410:	d029      	beq.n	8000466 <__adddf3+0x24e>
 8000412:	ea94 0f05 	teq	r4, r5
 8000416:	bf08      	it	eq
 8000418:	ea90 0f02 	teqeq	r0, r2
 800041c:	d005      	beq.n	800042a <__adddf3+0x212>
 800041e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000422:	bf04      	itt	eq
 8000424:	4619      	moveq	r1, r3
 8000426:	4610      	moveq	r0, r2
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea91 0f03 	teq	r1, r3
 800042e:	bf1e      	ittt	ne
 8000430:	2100      	movne	r1, #0
 8000432:	2000      	movne	r0, #0
 8000434:	bd30      	popne	{r4, r5, pc}
 8000436:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043a:	d105      	bne.n	8000448 <__adddf3+0x230>
 800043c:	0040      	lsls	r0, r0, #1
 800043e:	4149      	adcs	r1, r1
 8000440:	bf28      	it	cs
 8000442:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000446:	bd30      	pop	{r4, r5, pc}
 8000448:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800044c:	bf3c      	itt	cc
 800044e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000452:	bd30      	popcc	{r4, r5, pc}
 8000454:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000458:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800045c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000460:	f04f 0000 	mov.w	r0, #0
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046a:	bf1a      	itte	ne
 800046c:	4619      	movne	r1, r3
 800046e:	4610      	movne	r0, r2
 8000470:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000474:	bf1c      	itt	ne
 8000476:	460b      	movne	r3, r1
 8000478:	4602      	movne	r2, r0
 800047a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047e:	bf06      	itte	eq
 8000480:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000484:	ea91 0f03 	teqeq	r1, r3
 8000488:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	bf00      	nop

08000490 <__aeabi_ui2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f04f 0500 	mov.w	r5, #0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e750      	b.n	8000350 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_i2d>:
 80004b0:	f090 0f00 	teq	r0, #0
 80004b4:	bf04      	itt	eq
 80004b6:	2100      	moveq	r1, #0
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c8:	bf48      	it	mi
 80004ca:	4240      	negmi	r0, r0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e73e      	b.n	8000350 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_f2d>:
 80004d4:	0042      	lsls	r2, r0, #1
 80004d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004da:	ea4f 0131 	mov.w	r1, r1, rrx
 80004de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e2:	bf1f      	itttt	ne
 80004e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f0:	4770      	bxne	lr
 80004f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f6:	bf08      	it	eq
 80004f8:	4770      	bxeq	lr
 80004fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fe:	bf04      	itt	eq
 8000500:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000504:	4770      	bxeq	lr
 8000506:	b530      	push	{r4, r5, lr}
 8000508:	f44f 7460 	mov.w	r4, #896	; 0x380
 800050c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000510:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000514:	e71c      	b.n	8000350 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_ul2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	e00a      	b.n	800053e <__aeabi_l2d+0x16>

08000528 <__aeabi_l2d>:
 8000528:	ea50 0201 	orrs.w	r2, r0, r1
 800052c:	bf08      	it	eq
 800052e:	4770      	bxeq	lr
 8000530:	b530      	push	{r4, r5, lr}
 8000532:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000536:	d502      	bpl.n	800053e <__aeabi_l2d+0x16>
 8000538:	4240      	negs	r0, r0
 800053a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000542:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000546:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054a:	f43f aed8 	beq.w	80002fe <__adddf3+0xe6>
 800054e:	f04f 0203 	mov.w	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055e:	bf18      	it	ne
 8000560:	3203      	addne	r2, #3
 8000562:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000566:	f1c2 0320 	rsb	r3, r2, #32
 800056a:	fa00 fc03 	lsl.w	ip, r0, r3
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 fe03 	lsl.w	lr, r1, r3
 8000576:	ea40 000e 	orr.w	r0, r0, lr
 800057a:	fa21 f102 	lsr.w	r1, r1, r2
 800057e:	4414      	add	r4, r2
 8000580:	e6bd      	b.n	80002fe <__adddf3+0xe6>
 8000582:	bf00      	nop

08000584 <__aeabi_dmul>:
 8000584:	b570      	push	{r4, r5, r6, lr}
 8000586:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000592:	bf1d      	ittte	ne
 8000594:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000598:	ea94 0f0c 	teqne	r4, ip
 800059c:	ea95 0f0c 	teqne	r5, ip
 80005a0:	f000 f8de 	bleq	8000760 <__aeabi_dmul+0x1dc>
 80005a4:	442c      	add	r4, r5
 80005a6:	ea81 0603 	eor.w	r6, r1, r3
 80005aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b6:	bf18      	it	ne
 80005b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c4:	d038      	beq.n	8000638 <__aeabi_dmul+0xb4>
 80005c6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005da:	f04f 0600 	mov.w	r6, #0
 80005de:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e2:	f09c 0f00 	teq	ip, #0
 80005e6:	bf18      	it	ne
 80005e8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f8:	d204      	bcs.n	8000604 <__aeabi_dmul+0x80>
 80005fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fe:	416d      	adcs	r5, r5
 8000600:	eb46 0606 	adc.w	r6, r6, r6
 8000604:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000608:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800060c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000610:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000614:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000618:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800061c:	bf88      	it	hi
 800061e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000622:	d81e      	bhi.n	8000662 <__aeabi_dmul+0xde>
 8000624:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062e:	f150 0000 	adcs.w	r0, r0, #0
 8000632:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800063c:	ea46 0101 	orr.w	r1, r6, r1
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	ea81 0103 	eor.w	r1, r1, r3
 8000648:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800064c:	bfc2      	ittt	gt
 800064e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000652:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000656:	bd70      	popgt	{r4, r5, r6, pc}
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065c:	f04f 0e00 	mov.w	lr, #0
 8000660:	3c01      	subs	r4, #1
 8000662:	f300 80ab 	bgt.w	80007bc <__aeabi_dmul+0x238>
 8000666:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066a:	bfde      	ittt	le
 800066c:	2000      	movle	r0, #0
 800066e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000672:	bd70      	pople	{r4, r5, r6, pc}
 8000674:	f1c4 0400 	rsb	r4, r4, #0
 8000678:	3c20      	subs	r4, #32
 800067a:	da35      	bge.n	80006e8 <__aeabi_dmul+0x164>
 800067c:	340c      	adds	r4, #12
 800067e:	dc1b      	bgt.n	80006b8 <__aeabi_dmul+0x134>
 8000680:	f104 0414 	add.w	r4, r4, #20
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f305 	lsl.w	r3, r0, r5
 800068c:	fa20 f004 	lsr.w	r0, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800069c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	fa21 f604 	lsr.w	r6, r1, r4
 80006a8:	eb42 0106 	adc.w	r1, r2, r6
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f1c4 040c 	rsb	r4, r4, #12
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f304 	lsl.w	r3, r0, r4
 80006c4:	fa20 f005 	lsr.w	r0, r0, r5
 80006c8:	fa01 f204 	lsl.w	r2, r1, r4
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	f141 0100 	adc.w	r1, r1, #0
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f205 	lsl.w	r2, r0, r5
 80006f0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f4:	fa20 f304 	lsr.w	r3, r0, r4
 80006f8:	fa01 f205 	lsl.w	r2, r1, r5
 80006fc:	ea43 0302 	orr.w	r3, r3, r2
 8000700:	fa21 f004 	lsr.w	r0, r1, r4
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	fa21 f204 	lsr.w	r2, r1, r4
 800070c:	ea20 0002 	bic.w	r0, r0, r2
 8000710:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f094 0f00 	teq	r4, #0
 8000724:	d10f      	bne.n	8000746 <__aeabi_dmul+0x1c2>
 8000726:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072a:	0040      	lsls	r0, r0, #1
 800072c:	eb41 0101 	adc.w	r1, r1, r1
 8000730:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3c01      	subeq	r4, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1a6>
 800073a:	ea41 0106 	orr.w	r1, r1, r6
 800073e:	f095 0f00 	teq	r5, #0
 8000742:	bf18      	it	ne
 8000744:	4770      	bxne	lr
 8000746:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074a:	0052      	lsls	r2, r2, #1
 800074c:	eb43 0303 	adc.w	r3, r3, r3
 8000750:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000754:	bf08      	it	eq
 8000756:	3d01      	subeq	r5, #1
 8000758:	d0f7      	beq.n	800074a <__aeabi_dmul+0x1c6>
 800075a:	ea43 0306 	orr.w	r3, r3, r6
 800075e:	4770      	bx	lr
 8000760:	ea94 0f0c 	teq	r4, ip
 8000764:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000768:	bf18      	it	ne
 800076a:	ea95 0f0c 	teqne	r5, ip
 800076e:	d00c      	beq.n	800078a <__aeabi_dmul+0x206>
 8000770:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000774:	bf18      	it	ne
 8000776:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077a:	d1d1      	bne.n	8000720 <__aeabi_dmul+0x19c>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078e:	bf06      	itte	eq
 8000790:	4610      	moveq	r0, r2
 8000792:	4619      	moveq	r1, r3
 8000794:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000798:	d019      	beq.n	80007ce <__aeabi_dmul+0x24a>
 800079a:	ea94 0f0c 	teq	r4, ip
 800079e:	d102      	bne.n	80007a6 <__aeabi_dmul+0x222>
 80007a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a4:	d113      	bne.n	80007ce <__aeabi_dmul+0x24a>
 80007a6:	ea95 0f0c 	teq	r5, ip
 80007aa:	d105      	bne.n	80007b8 <__aeabi_dmul+0x234>
 80007ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b0:	bf1c      	itt	ne
 80007b2:	4610      	movne	r0, r2
 80007b4:	4619      	movne	r1, r3
 80007b6:	d10a      	bne.n	80007ce <__aeabi_dmul+0x24a>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d6:	bd70      	pop	{r4, r5, r6, pc}

080007d8 <__aeabi_ddiv>:
 80007d8:	b570      	push	{r4, r5, r6, lr}
 80007da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e6:	bf1d      	ittte	ne
 80007e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ec:	ea94 0f0c 	teqne	r4, ip
 80007f0:	ea95 0f0c 	teqne	r5, ip
 80007f4:	f000 f8a7 	bleq	8000946 <__aeabi_ddiv+0x16e>
 80007f8:	eba4 0405 	sub.w	r4, r4, r5
 80007fc:	ea81 0e03 	eor.w	lr, r1, r3
 8000800:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000804:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000808:	f000 8088 	beq.w	800091c <__aeabi_ddiv+0x144>
 800080c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000810:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000814:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000818:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800081c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000820:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000824:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000828:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800082c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000830:	429d      	cmp	r5, r3
 8000832:	bf08      	it	eq
 8000834:	4296      	cmpeq	r6, r2
 8000836:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083e:	d202      	bcs.n	8000846 <__aeabi_ddiv+0x6e>
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	1ab6      	subs	r6, r6, r2
 8000848:	eb65 0503 	sbc.w	r5, r5, r3
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000856:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 000c 	orrcs.w	r0, r0, ip
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b8:	d018      	beq.n	80008ec <__aeabi_ddiv+0x114>
 80008ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d6:	d1c0      	bne.n	800085a <__aeabi_ddiv+0x82>
 80008d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008dc:	d10b      	bne.n	80008f6 <__aeabi_ddiv+0x11e>
 80008de:	ea41 0100 	orr.w	r1, r1, r0
 80008e2:	f04f 0000 	mov.w	r0, #0
 80008e6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ea:	e7b6      	b.n	800085a <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	bf04      	itt	eq
 80008f2:	4301      	orreq	r1, r0
 80008f4:	2000      	moveq	r0, #0
 80008f6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fa:	bf88      	it	hi
 80008fc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000900:	f63f aeaf 	bhi.w	8000662 <__aeabi_dmul+0xde>
 8000904:	ebb5 0c03 	subs.w	ip, r5, r3
 8000908:	bf04      	itt	eq
 800090a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000912:	f150 0000 	adcs.w	r0, r0, #0
 8000916:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091a:	bd70      	pop	{r4, r5, r6, pc}
 800091c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000920:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000924:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000928:	bfc2      	ittt	gt
 800092a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000932:	bd70      	popgt	{r4, r5, r6, pc}
 8000934:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000938:	f04f 0e00 	mov.w	lr, #0
 800093c:	3c01      	subs	r4, #1
 800093e:	e690      	b.n	8000662 <__aeabi_dmul+0xde>
 8000940:	ea45 0e06 	orr.w	lr, r5, r6
 8000944:	e68d      	b.n	8000662 <__aeabi_dmul+0xde>
 8000946:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094a:	ea94 0f0c 	teq	r4, ip
 800094e:	bf08      	it	eq
 8000950:	ea95 0f0c 	teqeq	r5, ip
 8000954:	f43f af3b 	beq.w	80007ce <__aeabi_dmul+0x24a>
 8000958:	ea94 0f0c 	teq	r4, ip
 800095c:	d10a      	bne.n	8000974 <__aeabi_ddiv+0x19c>
 800095e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000962:	f47f af34 	bne.w	80007ce <__aeabi_dmul+0x24a>
 8000966:	ea95 0f0c 	teq	r5, ip
 800096a:	f47f af25 	bne.w	80007b8 <__aeabi_dmul+0x234>
 800096e:	4610      	mov	r0, r2
 8000970:	4619      	mov	r1, r3
 8000972:	e72c      	b.n	80007ce <__aeabi_dmul+0x24a>
 8000974:	ea95 0f0c 	teq	r5, ip
 8000978:	d106      	bne.n	8000988 <__aeabi_ddiv+0x1b0>
 800097a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097e:	f43f aefd 	beq.w	800077c <__aeabi_dmul+0x1f8>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e722      	b.n	80007ce <__aeabi_dmul+0x24a>
 8000988:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800098c:	bf18      	it	ne
 800098e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000992:	f47f aec5 	bne.w	8000720 <__aeabi_dmul+0x19c>
 8000996:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099a:	f47f af0d 	bne.w	80007b8 <__aeabi_dmul+0x234>
 800099e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a2:	f47f aeeb 	bne.w	800077c <__aeabi_dmul+0x1f8>
 80009a6:	e712      	b.n	80007ce <__aeabi_dmul+0x24a>

080009a8 <__aeabi_d2f>:
 80009a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009ac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b0:	bf24      	itt	cs
 80009b2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ba:	d90d      	bls.n	80009d8 <__aeabi_d2f+0x30>
 80009bc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009cc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d0:	bf08      	it	eq
 80009d2:	f020 0001 	biceq.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009dc:	d121      	bne.n	8000a22 <__aeabi_d2f+0x7a>
 80009de:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e2:	bfbc      	itt	lt
 80009e4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e8:	4770      	bxlt	lr
 80009ea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f2:	f1c2 0218 	rsb	r2, r2, #24
 80009f6:	f1c2 0c20 	rsb	ip, r2, #32
 80009fa:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000a02:	bf18      	it	ne
 8000a04:	f040 0001 	orrne.w	r0, r0, #1
 8000a08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a14:	ea40 000c 	orr.w	r0, r0, ip
 8000a18:	fa23 f302 	lsr.w	r3, r3, r2
 8000a1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a20:	e7cc      	b.n	80009bc <__aeabi_d2f+0x14>
 8000a22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a26:	d107      	bne.n	8000a38 <__aeabi_d2f+0x90>
 8000a28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a2c:	bf1e      	ittt	ne
 8000a2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a36:	4770      	bxne	lr
 8000a38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_frsub>:
 8000a48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a4c:	e002      	b.n	8000a54 <__addsf3>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_fsub>:
 8000a50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a54 <__addsf3>:
 8000a54:	0042      	lsls	r2, r0, #1
 8000a56:	bf1f      	itttt	ne
 8000a58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a5c:	ea92 0f03 	teqne	r2, r3
 8000a60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a68:	d06a      	beq.n	8000b40 <__addsf3+0xec>
 8000a6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a72:	bfc1      	itttt	gt
 8000a74:	18d2      	addgt	r2, r2, r3
 8000a76:	4041      	eorgt	r1, r0
 8000a78:	4048      	eorgt	r0, r1
 8000a7a:	4041      	eorgt	r1, r0
 8000a7c:	bfb8      	it	lt
 8000a7e:	425b      	neglt	r3, r3
 8000a80:	2b19      	cmp	r3, #25
 8000a82:	bf88      	it	hi
 8000a84:	4770      	bxhi	lr
 8000a86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aa2:	bf18      	it	ne
 8000aa4:	4249      	negne	r1, r1
 8000aa6:	ea92 0f03 	teq	r2, r3
 8000aaa:	d03f      	beq.n	8000b2c <__addsf3+0xd8>
 8000aac:	f1a2 0201 	sub.w	r2, r2, #1
 8000ab0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ab4:	eb10 000c 	adds.w	r0, r0, ip
 8000ab8:	f1c3 0320 	rsb	r3, r3, #32
 8000abc:	fa01 f103 	lsl.w	r1, r1, r3
 8000ac0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ac4:	d502      	bpl.n	8000acc <__addsf3+0x78>
 8000ac6:	4249      	negs	r1, r1
 8000ac8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000acc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ad0:	d313      	bcc.n	8000afa <__addsf3+0xa6>
 8000ad2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ad6:	d306      	bcc.n	8000ae6 <__addsf3+0x92>
 8000ad8:	0840      	lsrs	r0, r0, #1
 8000ada:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ade:	f102 0201 	add.w	r2, r2, #1
 8000ae2:	2afe      	cmp	r2, #254	; 0xfe
 8000ae4:	d251      	bcs.n	8000b8a <__addsf3+0x136>
 8000ae6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aee:	bf08      	it	eq
 8000af0:	f020 0001 	biceq.w	r0, r0, #1
 8000af4:	ea40 0003 	orr.w	r0, r0, r3
 8000af8:	4770      	bx	lr
 8000afa:	0049      	lsls	r1, r1, #1
 8000afc:	eb40 0000 	adc.w	r0, r0, r0
 8000b00:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b04:	f1a2 0201 	sub.w	r2, r2, #1
 8000b08:	d1ed      	bne.n	8000ae6 <__addsf3+0x92>
 8000b0a:	fab0 fc80 	clz	ip, r0
 8000b0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b12:	ebb2 020c 	subs.w	r2, r2, ip
 8000b16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b1a:	bfaa      	itet	ge
 8000b1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b20:	4252      	neglt	r2, r2
 8000b22:	4318      	orrge	r0, r3
 8000b24:	bfbc      	itt	lt
 8000b26:	40d0      	lsrlt	r0, r2
 8000b28:	4318      	orrlt	r0, r3
 8000b2a:	4770      	bx	lr
 8000b2c:	f092 0f00 	teq	r2, #0
 8000b30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b34:	bf06      	itte	eq
 8000b36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b3a:	3201      	addeq	r2, #1
 8000b3c:	3b01      	subne	r3, #1
 8000b3e:	e7b5      	b.n	8000aac <__addsf3+0x58>
 8000b40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b48:	bf18      	it	ne
 8000b4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4e:	d021      	beq.n	8000b94 <__addsf3+0x140>
 8000b50:	ea92 0f03 	teq	r2, r3
 8000b54:	d004      	beq.n	8000b60 <__addsf3+0x10c>
 8000b56:	f092 0f00 	teq	r2, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	4608      	moveq	r0, r1
 8000b5e:	4770      	bx	lr
 8000b60:	ea90 0f01 	teq	r0, r1
 8000b64:	bf1c      	itt	ne
 8000b66:	2000      	movne	r0, #0
 8000b68:	4770      	bxne	lr
 8000b6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b6e:	d104      	bne.n	8000b7a <__addsf3+0x126>
 8000b70:	0040      	lsls	r0, r0, #1
 8000b72:	bf28      	it	cs
 8000b74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b78:	4770      	bx	lr
 8000b7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b7e:	bf3c      	itt	cc
 8000b80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bxcc	lr
 8000b86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b92:	4770      	bx	lr
 8000b94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b98:	bf16      	itet	ne
 8000b9a:	4608      	movne	r0, r1
 8000b9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ba0:	4601      	movne	r1, r0
 8000ba2:	0242      	lsls	r2, r0, #9
 8000ba4:	bf06      	itte	eq
 8000ba6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000baa:	ea90 0f01 	teqeq	r0, r1
 8000bae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_ui2f>:
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	e004      	b.n	8000bc4 <__aeabi_i2f+0x8>
 8000bba:	bf00      	nop

08000bbc <__aeabi_i2f>:
 8000bbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bc0:	bf48      	it	mi
 8000bc2:	4240      	negmi	r0, r0
 8000bc4:	ea5f 0c00 	movs.w	ip, r0
 8000bc8:	bf08      	it	eq
 8000bca:	4770      	bxeq	lr
 8000bcc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bd0:	4601      	mov	r1, r0
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	e01c      	b.n	8000c12 <__aeabi_l2f+0x2a>

08000bd8 <__aeabi_ul2f>:
 8000bd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bdc:	bf08      	it	eq
 8000bde:	4770      	bxeq	lr
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	e00a      	b.n	8000bfc <__aeabi_l2f+0x14>
 8000be6:	bf00      	nop

08000be8 <__aeabi_l2f>:
 8000be8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bec:	bf08      	it	eq
 8000bee:	4770      	bxeq	lr
 8000bf0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bf4:	d502      	bpl.n	8000bfc <__aeabi_l2f+0x14>
 8000bf6:	4240      	negs	r0, r0
 8000bf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bfc:	ea5f 0c01 	movs.w	ip, r1
 8000c00:	bf02      	ittt	eq
 8000c02:	4684      	moveq	ip, r0
 8000c04:	4601      	moveq	r1, r0
 8000c06:	2000      	moveq	r0, #0
 8000c08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c0c:	bf08      	it	eq
 8000c0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c16:	fabc f28c 	clz	r2, ip
 8000c1a:	3a08      	subs	r2, #8
 8000c1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c20:	db10      	blt.n	8000c44 <__aeabi_l2f+0x5c>
 8000c22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c26:	4463      	add	r3, ip
 8000c28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c2c:	f1c2 0220 	rsb	r2, r2, #32
 8000c30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c34:	fa20 f202 	lsr.w	r2, r0, r2
 8000c38:	eb43 0002 	adc.w	r0, r3, r2
 8000c3c:	bf08      	it	eq
 8000c3e:	f020 0001 	biceq.w	r0, r0, #1
 8000c42:	4770      	bx	lr
 8000c44:	f102 0220 	add.w	r2, r2, #32
 8000c48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c4c:	f1c2 0220 	rsb	r2, r2, #32
 8000c50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c54:	fa21 f202 	lsr.w	r2, r1, r2
 8000c58:	eb43 0002 	adc.w	r0, r3, r2
 8000c5c:	bf08      	it	eq
 8000c5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c62:	4770      	bx	lr

08000c64 <__aeabi_fmul>:
 8000c64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c72:	ea92 0f0c 	teqne	r2, ip
 8000c76:	ea93 0f0c 	teqne	r3, ip
 8000c7a:	d06f      	beq.n	8000d5c <__aeabi_fmul+0xf8>
 8000c7c:	441a      	add	r2, r3
 8000c7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c82:	0240      	lsls	r0, r0, #9
 8000c84:	bf18      	it	ne
 8000c86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c8a:	d01e      	beq.n	8000cca <__aeabi_fmul+0x66>
 8000c8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c98:	fba0 3101 	umull	r3, r1, r0, r1
 8000c9c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ca0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ca4:	bf3e      	ittt	cc
 8000ca6:	0049      	lslcc	r1, r1, #1
 8000ca8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cac:	005b      	lslcc	r3, r3, #1
 8000cae:	ea40 0001 	orr.w	r0, r0, r1
 8000cb2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cb6:	2afd      	cmp	r2, #253	; 0xfd
 8000cb8:	d81d      	bhi.n	8000cf6 <__aeabi_fmul+0x92>
 8000cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cc2:	bf08      	it	eq
 8000cc4:	f020 0001 	biceq.w	r0, r0, #1
 8000cc8:	4770      	bx	lr
 8000cca:	f090 0f00 	teq	r0, #0
 8000cce:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cd2:	bf08      	it	eq
 8000cd4:	0249      	lsleq	r1, r1, #9
 8000cd6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cde:	3a7f      	subs	r2, #127	; 0x7f
 8000ce0:	bfc2      	ittt	gt
 8000ce2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ce6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cea:	4770      	bxgt	lr
 8000cec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	3a01      	subs	r2, #1
 8000cf6:	dc5d      	bgt.n	8000db4 <__aeabi_fmul+0x150>
 8000cf8:	f112 0f19 	cmn.w	r2, #25
 8000cfc:	bfdc      	itt	le
 8000cfe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d02:	4770      	bxle	lr
 8000d04:	f1c2 0200 	rsb	r2, r2, #0
 8000d08:	0041      	lsls	r1, r0, #1
 8000d0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d0e:	f1c2 0220 	rsb	r2, r2, #32
 8000d12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d1a:	f140 0000 	adc.w	r0, r0, #0
 8000d1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d22:	bf08      	it	eq
 8000d24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d28:	4770      	bx	lr
 8000d2a:	f092 0f00 	teq	r2, #0
 8000d2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d32:	bf02      	ittt	eq
 8000d34:	0040      	lsleq	r0, r0, #1
 8000d36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d3a:	3a01      	subeq	r2, #1
 8000d3c:	d0f9      	beq.n	8000d32 <__aeabi_fmul+0xce>
 8000d3e:	ea40 000c 	orr.w	r0, r0, ip
 8000d42:	f093 0f00 	teq	r3, #0
 8000d46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d4a:	bf02      	ittt	eq
 8000d4c:	0049      	lsleq	r1, r1, #1
 8000d4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d52:	3b01      	subeq	r3, #1
 8000d54:	d0f9      	beq.n	8000d4a <__aeabi_fmul+0xe6>
 8000d56:	ea41 010c 	orr.w	r1, r1, ip
 8000d5a:	e78f      	b.n	8000c7c <__aeabi_fmul+0x18>
 8000d5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d60:	ea92 0f0c 	teq	r2, ip
 8000d64:	bf18      	it	ne
 8000d66:	ea93 0f0c 	teqne	r3, ip
 8000d6a:	d00a      	beq.n	8000d82 <__aeabi_fmul+0x11e>
 8000d6c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d70:	bf18      	it	ne
 8000d72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d76:	d1d8      	bne.n	8000d2a <__aeabi_fmul+0xc6>
 8000d78:	ea80 0001 	eor.w	r0, r0, r1
 8000d7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d80:	4770      	bx	lr
 8000d82:	f090 0f00 	teq	r0, #0
 8000d86:	bf17      	itett	ne
 8000d88:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d8c:	4608      	moveq	r0, r1
 8000d8e:	f091 0f00 	teqne	r1, #0
 8000d92:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d96:	d014      	beq.n	8000dc2 <__aeabi_fmul+0x15e>
 8000d98:	ea92 0f0c 	teq	r2, ip
 8000d9c:	d101      	bne.n	8000da2 <__aeabi_fmul+0x13e>
 8000d9e:	0242      	lsls	r2, r0, #9
 8000da0:	d10f      	bne.n	8000dc2 <__aeabi_fmul+0x15e>
 8000da2:	ea93 0f0c 	teq	r3, ip
 8000da6:	d103      	bne.n	8000db0 <__aeabi_fmul+0x14c>
 8000da8:	024b      	lsls	r3, r1, #9
 8000daa:	bf18      	it	ne
 8000dac:	4608      	movne	r0, r1
 8000dae:	d108      	bne.n	8000dc2 <__aeabi_fmul+0x15e>
 8000db0:	ea80 0001 	eor.w	r0, r0, r1
 8000db4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000db8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	4770      	bx	lr
 8000dc2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dc6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dca:	4770      	bx	lr

08000dcc <__aeabi_fdiv>:
 8000dcc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd4:	bf1e      	ittt	ne
 8000dd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dda:	ea92 0f0c 	teqne	r2, ip
 8000dde:	ea93 0f0c 	teqne	r3, ip
 8000de2:	d069      	beq.n	8000eb8 <__aeabi_fdiv+0xec>
 8000de4:	eba2 0203 	sub.w	r2, r2, r3
 8000de8:	ea80 0c01 	eor.w	ip, r0, r1
 8000dec:	0249      	lsls	r1, r1, #9
 8000dee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000df2:	d037      	beq.n	8000e64 <__aeabi_fdiv+0x98>
 8000df4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000df8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dfc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e04:	428b      	cmp	r3, r1
 8000e06:	bf38      	it	cc
 8000e08:	005b      	lslcc	r3, r3, #1
 8000e0a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e0e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e12:	428b      	cmp	r3, r1
 8000e14:	bf24      	itt	cs
 8000e16:	1a5b      	subcs	r3, r3, r1
 8000e18:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e1c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e20:	bf24      	itt	cs
 8000e22:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e26:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e2a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e2e:	bf24      	itt	cs
 8000e30:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e38:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e3c:	bf24      	itt	cs
 8000e3e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e42:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e46:	011b      	lsls	r3, r3, #4
 8000e48:	bf18      	it	ne
 8000e4a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e4e:	d1e0      	bne.n	8000e12 <__aeabi_fdiv+0x46>
 8000e50:	2afd      	cmp	r2, #253	; 0xfd
 8000e52:	f63f af50 	bhi.w	8000cf6 <__aeabi_fmul+0x92>
 8000e56:	428b      	cmp	r3, r1
 8000e58:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e5c:	bf08      	it	eq
 8000e5e:	f020 0001 	biceq.w	r0, r0, #1
 8000e62:	4770      	bx	lr
 8000e64:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e68:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e6c:	327f      	adds	r2, #127	; 0x7f
 8000e6e:	bfc2      	ittt	gt
 8000e70:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e74:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e78:	4770      	bxgt	lr
 8000e7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	3a01      	subs	r2, #1
 8000e84:	e737      	b.n	8000cf6 <__aeabi_fmul+0x92>
 8000e86:	f092 0f00 	teq	r2, #0
 8000e8a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8e:	bf02      	ittt	eq
 8000e90:	0040      	lsleq	r0, r0, #1
 8000e92:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e96:	3a01      	subeq	r2, #1
 8000e98:	d0f9      	beq.n	8000e8e <__aeabi_fdiv+0xc2>
 8000e9a:	ea40 000c 	orr.w	r0, r0, ip
 8000e9e:	f093 0f00 	teq	r3, #0
 8000ea2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea6:	bf02      	ittt	eq
 8000ea8:	0049      	lsleq	r1, r1, #1
 8000eaa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eae:	3b01      	subeq	r3, #1
 8000eb0:	d0f9      	beq.n	8000ea6 <__aeabi_fdiv+0xda>
 8000eb2:	ea41 010c 	orr.w	r1, r1, ip
 8000eb6:	e795      	b.n	8000de4 <__aeabi_fdiv+0x18>
 8000eb8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ebc:	ea92 0f0c 	teq	r2, ip
 8000ec0:	d108      	bne.n	8000ed4 <__aeabi_fdiv+0x108>
 8000ec2:	0242      	lsls	r2, r0, #9
 8000ec4:	f47f af7d 	bne.w	8000dc2 <__aeabi_fmul+0x15e>
 8000ec8:	ea93 0f0c 	teq	r3, ip
 8000ecc:	f47f af70 	bne.w	8000db0 <__aeabi_fmul+0x14c>
 8000ed0:	4608      	mov	r0, r1
 8000ed2:	e776      	b.n	8000dc2 <__aeabi_fmul+0x15e>
 8000ed4:	ea93 0f0c 	teq	r3, ip
 8000ed8:	d104      	bne.n	8000ee4 <__aeabi_fdiv+0x118>
 8000eda:	024b      	lsls	r3, r1, #9
 8000edc:	f43f af4c 	beq.w	8000d78 <__aeabi_fmul+0x114>
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	e76e      	b.n	8000dc2 <__aeabi_fmul+0x15e>
 8000ee4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ee8:	bf18      	it	ne
 8000eea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eee:	d1ca      	bne.n	8000e86 <__aeabi_fdiv+0xba>
 8000ef0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ef4:	f47f af5c 	bne.w	8000db0 <__aeabi_fmul+0x14c>
 8000ef8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000efc:	f47f af3c 	bne.w	8000d78 <__aeabi_fmul+0x114>
 8000f00:	e75f      	b.n	8000dc2 <__aeabi_fmul+0x15e>
 8000f02:	bf00      	nop

08000f04 <__gesf2>:
 8000f04:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f08:	e006      	b.n	8000f18 <__cmpsf2+0x4>
 8000f0a:	bf00      	nop

08000f0c <__lesf2>:
 8000f0c:	f04f 0c01 	mov.w	ip, #1
 8000f10:	e002      	b.n	8000f18 <__cmpsf2+0x4>
 8000f12:	bf00      	nop

08000f14 <__cmpsf2>:
 8000f14:	f04f 0c01 	mov.w	ip, #1
 8000f18:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f28:	bf18      	it	ne
 8000f2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f2e:	d011      	beq.n	8000f54 <__cmpsf2+0x40>
 8000f30:	b001      	add	sp, #4
 8000f32:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f36:	bf18      	it	ne
 8000f38:	ea90 0f01 	teqne	r0, r1
 8000f3c:	bf58      	it	pl
 8000f3e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f42:	bf88      	it	hi
 8000f44:	17c8      	asrhi	r0, r1, #31
 8000f46:	bf38      	it	cc
 8000f48:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f4c:	bf18      	it	ne
 8000f4e:	f040 0001 	orrne.w	r0, r0, #1
 8000f52:	4770      	bx	lr
 8000f54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f58:	d102      	bne.n	8000f60 <__cmpsf2+0x4c>
 8000f5a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f5e:	d105      	bne.n	8000f6c <__cmpsf2+0x58>
 8000f60:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f64:	d1e4      	bne.n	8000f30 <__cmpsf2+0x1c>
 8000f66:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f6a:	d0e1      	beq.n	8000f30 <__cmpsf2+0x1c>
 8000f6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <__aeabi_cfrcmple>:
 8000f74:	4684      	mov	ip, r0
 8000f76:	4608      	mov	r0, r1
 8000f78:	4661      	mov	r1, ip
 8000f7a:	e7ff      	b.n	8000f7c <__aeabi_cfcmpeq>

08000f7c <__aeabi_cfcmpeq>:
 8000f7c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f7e:	f7ff ffc9 	bl	8000f14 <__cmpsf2>
 8000f82:	2800      	cmp	r0, #0
 8000f84:	bf48      	it	mi
 8000f86:	f110 0f00 	cmnmi.w	r0, #0
 8000f8a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f8c <__aeabi_fcmpeq>:
 8000f8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f90:	f7ff fff4 	bl	8000f7c <__aeabi_cfcmpeq>
 8000f94:	bf0c      	ite	eq
 8000f96:	2001      	moveq	r0, #1
 8000f98:	2000      	movne	r0, #0
 8000f9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_fcmplt>:
 8000fa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa4:	f7ff ffea 	bl	8000f7c <__aeabi_cfcmpeq>
 8000fa8:	bf34      	ite	cc
 8000faa:	2001      	movcc	r0, #1
 8000fac:	2000      	movcs	r0, #0
 8000fae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_fcmple>:
 8000fb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb8:	f7ff ffe0 	bl	8000f7c <__aeabi_cfcmpeq>
 8000fbc:	bf94      	ite	ls
 8000fbe:	2001      	movls	r0, #1
 8000fc0:	2000      	movhi	r0, #0
 8000fc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_fcmpge>:
 8000fc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fcc:	f7ff ffd2 	bl	8000f74 <__aeabi_cfrcmple>
 8000fd0:	bf94      	ite	ls
 8000fd2:	2001      	movls	r0, #1
 8000fd4:	2000      	movhi	r0, #0
 8000fd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fda:	bf00      	nop

08000fdc <__aeabi_fcmpgt>:
 8000fdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe0:	f7ff ffc8 	bl	8000f74 <__aeabi_cfrcmple>
 8000fe4:	bf34      	ite	cc
 8000fe6:	2001      	movcc	r0, #1
 8000fe8:	2000      	movcs	r0, #0
 8000fea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fee:	bf00      	nop

08000ff0 <__aeabi_fcmpun>:
 8000ff0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__aeabi_fcmpun+0x14>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d108      	bne.n	8001016 <__aeabi_fcmpun+0x26>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d102      	bne.n	8001010 <__aeabi_fcmpun+0x20>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d102      	bne.n	8001016 <__aeabi_fcmpun+0x26>
 8001010:	f04f 0000 	mov.w	r0, #0
 8001014:	4770      	bx	lr
 8001016:	f04f 0001 	mov.w	r0, #1
 800101a:	4770      	bx	lr

0800101c <__aeabi_f2uiz>:
 800101c:	0042      	lsls	r2, r0, #1
 800101e:	d20e      	bcs.n	800103e <__aeabi_f2uiz+0x22>
 8001020:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001024:	d30b      	bcc.n	800103e <__aeabi_f2uiz+0x22>
 8001026:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800102e:	d409      	bmi.n	8001044 <__aeabi_f2uiz+0x28>
 8001030:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001038:	fa23 f002 	lsr.w	r0, r3, r2
 800103c:	4770      	bx	lr
 800103e:	f04f 0000 	mov.w	r0, #0
 8001042:	4770      	bx	lr
 8001044:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001048:	d101      	bne.n	800104e <__aeabi_f2uiz+0x32>
 800104a:	0242      	lsls	r2, r0, #9
 800104c:	d102      	bne.n	8001054 <__aeabi_f2uiz+0x38>
 800104e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001052:	4770      	bx	lr
 8001054:	f04f 0000 	mov.w	r0, #0
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
    if(in >= 0.0f)
 8001066:	f04f 0100 	mov.w	r1, #0
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffac 	bl	8000fc8 <__aeabi_fcmpge>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d007      	beq.n	8001086 <arm_sqrt_f32+0x2a>
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined ( __ICCARM__ ) && (__VER__ >= 6040000)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f004 fe28 	bl	8005ccc <sqrtf>
 800107c:	4602      	mov	r2, r0
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	601a      	str	r2, [r3, #0]
#endif

      return (ARM_MATH_SUCCESS);
 8001082:	2300      	movs	r3, #0
 8001084:	e005      	b.n	8001092 <arm_sqrt_f32+0x36>
    }
    else
    {
      *pOut = 0.0f;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800108e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 800109a:	b590      	push	{r4, r7, lr}
 800109c:	b089      	sub	sp, #36	; 0x24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	60f8      	str	r0, [r7, #12]
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	61fb      	str	r3, [r7, #28]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 80010ac:	e086      	b.n	80011bc <arm_cmplx_mag_f32+0x122>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	1d1a      	adds	r2, r3, #4
 80010b2:	60fa      	str	r2, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	1d1a      	adds	r2, r3, #4
 80010bc:	60fa      	str	r2, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80010c2:	69b9      	ldr	r1, [r7, #24]
 80010c4:	69b8      	ldr	r0, [r7, #24]
 80010c6:	f7ff fdcd 	bl	8000c64 <__aeabi_fmul>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461c      	mov	r4, r3
 80010ce:	6979      	ldr	r1, [r7, #20]
 80010d0:	6978      	ldr	r0, [r7, #20]
 80010d2:	f7ff fdc7 	bl	8000c64 <__aeabi_fmul>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4619      	mov	r1, r3
 80010da:	4620      	mov	r0, r4
 80010dc:	f7ff fcba 	bl	8000a54 <__addsf3>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4618      	mov	r0, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	1d1a      	adds	r2, r3, #4
 80010e8:	60ba      	str	r2, [r7, #8]
 80010ea:	4619      	mov	r1, r3
 80010ec:	f7ff ffb6 	bl	800105c <arm_sqrt_f32>

    realIn = *pSrc++;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	1d1a      	adds	r2, r3, #4
 80010f4:	60fa      	str	r2, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	1d1a      	adds	r2, r3, #4
 80010fe:	60fa      	str	r2, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001104:	69b9      	ldr	r1, [r7, #24]
 8001106:	69b8      	ldr	r0, [r7, #24]
 8001108:	f7ff fdac 	bl	8000c64 <__aeabi_fmul>
 800110c:	4603      	mov	r3, r0
 800110e:	461c      	mov	r4, r3
 8001110:	6979      	ldr	r1, [r7, #20]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff fda6 	bl	8000c64 <__aeabi_fmul>
 8001118:	4603      	mov	r3, r0
 800111a:	4619      	mov	r1, r3
 800111c:	4620      	mov	r0, r4
 800111e:	f7ff fc99 	bl	8000a54 <__addsf3>
 8001122:	4603      	mov	r3, r0
 8001124:	4618      	mov	r0, r3
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1d1a      	adds	r2, r3, #4
 800112a:	60ba      	str	r2, [r7, #8]
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff ff95 	bl	800105c <arm_sqrt_f32>

    realIn = *pSrc++;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	1d1a      	adds	r2, r3, #4
 8001136:	60fa      	str	r2, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	1d1a      	adds	r2, r3, #4
 8001140:	60fa      	str	r2, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001146:	69b9      	ldr	r1, [r7, #24]
 8001148:	69b8      	ldr	r0, [r7, #24]
 800114a:	f7ff fd8b 	bl	8000c64 <__aeabi_fmul>
 800114e:	4603      	mov	r3, r0
 8001150:	461c      	mov	r4, r3
 8001152:	6979      	ldr	r1, [r7, #20]
 8001154:	6978      	ldr	r0, [r7, #20]
 8001156:	f7ff fd85 	bl	8000c64 <__aeabi_fmul>
 800115a:	4603      	mov	r3, r0
 800115c:	4619      	mov	r1, r3
 800115e:	4620      	mov	r0, r4
 8001160:	f7ff fc78 	bl	8000a54 <__addsf3>
 8001164:	4603      	mov	r3, r0
 8001166:	4618      	mov	r0, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1d1a      	adds	r2, r3, #4
 800116c:	60ba      	str	r2, [r7, #8]
 800116e:	4619      	mov	r1, r3
 8001170:	f7ff ff74 	bl	800105c <arm_sqrt_f32>

    realIn = *pSrc++;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	1d1a      	adds	r2, r3, #4
 8001178:	60fa      	str	r2, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	1d1a      	adds	r2, r3, #4
 8001182:	60fa      	str	r2, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001188:	69b9      	ldr	r1, [r7, #24]
 800118a:	69b8      	ldr	r0, [r7, #24]
 800118c:	f7ff fd6a 	bl	8000c64 <__aeabi_fmul>
 8001190:	4603      	mov	r3, r0
 8001192:	461c      	mov	r4, r3
 8001194:	6979      	ldr	r1, [r7, #20]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff fd64 	bl	8000c64 <__aeabi_fmul>
 800119c:	4603      	mov	r3, r0
 800119e:	4619      	mov	r1, r3
 80011a0:	4620      	mov	r0, r4
 80011a2:	f7ff fc57 	bl	8000a54 <__addsf3>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4618      	mov	r0, r3
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	1d1a      	adds	r2, r3, #4
 80011ae:	60ba      	str	r2, [r7, #8]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff ff53 	bl	800105c <arm_sqrt_f32>


    /* Decrement the loop counter */
    blkCnt--;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f47f af75 	bne.w	80010ae <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	61fb      	str	r3, [r7, #28]

  while(blkCnt > 0u)
 80011cc:	e023      	b.n	8001216 <arm_cmplx_mag_f32+0x17c>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	1d1a      	adds	r2, r3, #4
 80011d2:	60fa      	str	r2, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	1d1a      	adds	r2, r3, #4
 80011dc:	60fa      	str	r2, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80011e2:	69b9      	ldr	r1, [r7, #24]
 80011e4:	69b8      	ldr	r0, [r7, #24]
 80011e6:	f7ff fd3d 	bl	8000c64 <__aeabi_fmul>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461c      	mov	r4, r3
 80011ee:	6979      	ldr	r1, [r7, #20]
 80011f0:	6978      	ldr	r0, [r7, #20]
 80011f2:	f7ff fd37 	bl	8000c64 <__aeabi_fmul>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4619      	mov	r1, r3
 80011fa:	4620      	mov	r0, r4
 80011fc:	f7ff fc2a 	bl	8000a54 <__addsf3>
 8001200:	4603      	mov	r3, r0
 8001202:	4618      	mov	r0, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	1d1a      	adds	r2, r3, #4
 8001208:	60ba      	str	r2, [r7, #8]
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff ff26 	bl	800105c <arm_sqrt_f32>

    /* Decrement the loop counter */
    blkCnt--;
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	3b01      	subs	r3, #1
 8001214:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1d8      	bne.n	80011ce <arm_cmplx_mag_f32+0x134>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 800121c:	bf00      	nop
 800121e:	3724      	adds	r7, #36	; 0x24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd90      	pop	{r4, r7, pc}

08001224 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	1d1a      	adds	r2, r3, #4
 800123e:	60fa      	str	r2, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	3b01      	subs	r3, #1
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 800124c:	e049      	b.n	80012e2 <arm_max_f32+0xbe>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	1d1a      	adds	r2, r3, #4
 8001252:	60fa      	str	r2, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	1d1a      	adds	r2, r3, #4
 800125c:	60fa      	str	r2, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8001262:	6979      	ldr	r1, [r7, #20]
 8001264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001266:	f7ff fe9b 	bl	8000fa0 <__aeabi_fcmplt>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <arm_max_f32+0x56>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	3301      	adds	r3, #1
 8001278:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	1d1a      	adds	r2, r3, #4
 800127e:	60fa      	str	r2, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 8001284:	6939      	ldr	r1, [r7, #16]
 8001286:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001288:	f7ff fe8a 	bl	8000fa0 <__aeabi_fcmplt>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d004      	beq.n	800129c <arm_max_f32+0x78>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	3302      	adds	r3, #2
 800129a:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1d1a      	adds	r2, r3, #4
 80012a0:	60fa      	str	r2, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 80012a6:	6979      	ldr	r1, [r7, #20]
 80012a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012aa:	f7ff fe79 	bl	8000fa0 <__aeabi_fcmplt>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d004      	beq.n	80012be <arm_max_f32+0x9a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	3303      	adds	r3, #3
 80012bc:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 80012be:	6939      	ldr	r1, [r7, #16]
 80012c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012c2:	f7ff fe6d 	bl	8000fa0 <__aeabi_fcmplt>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <arm_max_f32+0xb2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	3304      	adds	r3, #4
 80012d4:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	3304      	adds	r3, #4
 80012da:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	3b01      	subs	r3, #1
 80012e0:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1b2      	bne.n	800124e <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80012f2:	e014      	b.n	800131e <arm_max_f32+0xfa>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	1d1a      	adds	r2, r3, #4
 80012f8:	60fa      	str	r2, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 80012fe:	6979      	ldr	r1, [r7, #20]
 8001300:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001302:	f7ff fe4d 	bl	8000fa0 <__aeabi_fcmplt>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <arm_max_f32+0xf4>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 8001318:	6a3b      	ldr	r3, [r7, #32]
 800131a:	3b01      	subs	r3, #1
 800131c:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 800131e:	6a3b      	ldr	r3, [r7, #32]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e7      	bne.n	80012f4 <arm_max_f32+0xd0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001328:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	601a      	str	r2, [r3, #0]
}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b0a1      	sub	sp, #132	; 0x84
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8001348:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	4413      	add	r3, r2
 8001350:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 800135c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800135e:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8001360:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001362:	085b      	lsrs	r3, r3, #1
 8001364:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8001366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	4413      	add	r3, r2
 800136e:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8001370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001376:	4413      	add	r3, r2
 8001378:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 800137a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001380:	e18e      	b.n	80016a0 <arm_cfft_radix8by2_f32+0x368>
    {
        t1[0] = p1[0];
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 800139a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 80013a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 80013a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 80013ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 80013b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 80013b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 80013be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 80013c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 80013ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 80013d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 80013d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 80013dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 80013e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013e6:	683c      	ldr	r4, [r7, #0]
 80013e8:	1d23      	adds	r3, r4, #4
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	4610      	mov	r0, r2
 80013ee:	f7ff fb31 	bl	8000a54 <__addsf3>
 80013f2:	4603      	mov	r3, r0
 80013f4:	6023      	str	r3, [r4, #0]
        *p1++ = t1[1] + t2[1];
 80013f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013fa:	683c      	ldr	r4, [r7, #0]
 80013fc:	1d23      	adds	r3, r4, #4
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	4610      	mov	r0, r2
 8001402:	f7ff fb27 	bl	8000a54 <__addsf3>
 8001406:	4603      	mov	r3, r0
 8001408:	6023      	str	r3, [r4, #0]
        *p1++ = t1[2] + t2[2];
 800140a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800140c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800140e:	683c      	ldr	r4, [r7, #0]
 8001410:	1d23      	adds	r3, r4, #4
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	4610      	mov	r0, r2
 8001416:	f7ff fb1d 	bl	8000a54 <__addsf3>
 800141a:	4603      	mov	r3, r0
 800141c:	6023      	str	r3, [r4, #0]
        *p1++ = t1[3] + t2[3];    // col 1
 800141e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001420:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001422:	683c      	ldr	r4, [r7, #0]
 8001424:	1d23      	adds	r3, r4, #4
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	4610      	mov	r0, r2
 800142a:	f7ff fb13 	bl	8000a54 <__addsf3>
 800142e:	4603      	mov	r3, r0
 8001430:	6023      	str	r3, [r4, #0]

        t2[0] = t1[0] - t2[0];
 8001432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fb09 	bl	8000a50 <__aeabi_fsub>
 800143e:	4603      	mov	r3, r0
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8001442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fb01 	bl	8000a50 <__aeabi_fsub>
 800144e:	4603      	mov	r3, r0
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8001452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff faf9 	bl	8000a50 <__aeabi_fsub>
 800145e:	4603      	mov	r3, r0
 8001460:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 8001462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff faf1 	bl	8000a50 <__aeabi_fsub>
 800146e:	4603      	mov	r3, r0
 8001470:	637b      	str	r3, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8001478:	1d23      	adds	r3, r4, #4
 800147a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800147c:	4610      	mov	r0, r2
 800147e:	f7ff fae9 	bl	8000a54 <__addsf3>
 8001482:	4603      	mov	r3, r0
 8001484:	6023      	str	r3, [r4, #0]
        *pMid1++ = t3[1] + t4[1];
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	68f9      	ldr	r1, [r7, #12]
 800148a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 800148c:	1d23      	adds	r3, r4, #4
 800148e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001490:	4610      	mov	r0, r2
 8001492:	f7ff fadf 	bl	8000a54 <__addsf3>
 8001496:	4603      	mov	r3, r0
 8001498:	6023      	str	r3, [r4, #0]
        *pMid1++ = t3[2] + t4[2];
 800149a:	6a3a      	ldr	r2, [r7, #32]
 800149c:	6939      	ldr	r1, [r7, #16]
 800149e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80014a0:	1d23      	adds	r3, r4, #4
 80014a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014a4:	4610      	mov	r0, r2
 80014a6:	f7ff fad5 	bl	8000a54 <__addsf3>
 80014aa:	4603      	mov	r3, r0
 80014ac:	6023      	str	r3, [r4, #0]
        *pMid1++ = t3[3] + t4[3]; // col 1
 80014ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b0:	6979      	ldr	r1, [r7, #20]
 80014b2:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80014b4:	1d23      	adds	r3, r4, #4
 80014b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014b8:	4610      	mov	r0, r2
 80014ba:	f7ff facb 	bl	8000a54 <__addsf3>
 80014be:	4603      	mov	r3, r0
 80014c0:	6023      	str	r3, [r4, #0]

        t4[0] = t4[0] - t3[0];
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fac1 	bl	8000a50 <__aeabi_fsub>
 80014ce:	4603      	mov	r3, r0
 80014d0:	60bb      	str	r3, [r7, #8]
        t4[1] = t4[1] - t3[1];
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fab9 	bl	8000a50 <__aeabi_fsub>
 80014de:	4603      	mov	r3, r0
 80014e0:	60fb      	str	r3, [r7, #12]
        t4[2] = t4[2] - t3[2];
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	6a3a      	ldr	r2, [r7, #32]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fab1 	bl	8000a50 <__aeabi_fsub>
 80014ee:	4603      	mov	r3, r0
 80014f0:	613b      	str	r3, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff faa9 	bl	8000a50 <__aeabi_fsub>
 80014fe:	4603      	mov	r3, r0
 8001500:	617b      	str	r3, [r7, #20]

        twR = *tw++;
 8001502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001504:	1d1a      	adds	r2, r3, #4
 8001506:	673a      	str	r2, [r7, #112]	; 0x70
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 800150c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800150e:	1d1a      	adds	r2, r3, #4
 8001510:	673a      	str	r2, [r7, #112]	; 0x70
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 8001516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001518:	4619      	mov	r1, r3
 800151a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800151c:	f7ff fba2 	bl	8000c64 <__aeabi_fmul>
 8001520:	4603      	mov	r3, r0
 8001522:	657b      	str	r3, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 8001524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001526:	4619      	mov	r1, r3
 8001528:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800152a:	f7ff fb9b 	bl	8000c64 <__aeabi_fmul>
 800152e:	4603      	mov	r3, r0
 8001530:	653b      	str	r3, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 8001532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001534:	4619      	mov	r1, r3
 8001536:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001538:	f7ff fb94 	bl	8000c64 <__aeabi_fmul>
 800153c:	4603      	mov	r3, r0
 800153e:	64fb      	str	r3, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 8001540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001542:	4619      	mov	r1, r3
 8001544:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001546:	f7ff fb8d 	bl	8000c64 <__aeabi_fmul>
 800154a:	4603      	mov	r3, r0
 800154c:	64bb      	str	r3, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 800154e:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8001550:	1d23      	adds	r3, r4, #4
 8001552:	677b      	str	r3, [r7, #116]	; 0x74
 8001554:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001556:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001558:	f7ff fa7c 	bl	8000a54 <__addsf3>
 800155c:	4603      	mov	r3, r0
 800155e:	6023      	str	r3, [r4, #0]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8001560:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8001562:	1d23      	adds	r3, r4, #4
 8001564:	677b      	str	r3, [r7, #116]	; 0x74
 8001566:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001568:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800156a:	f7ff fa71 	bl	8000a50 <__aeabi_fsub>
 800156e:	4603      	mov	r3, r0
 8001570:	6023      	str	r3, [r4, #0]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	4619      	mov	r1, r3
 8001576:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001578:	f7ff fb74 	bl	8000c64 <__aeabi_fmul>
 800157c:	4603      	mov	r3, r0
 800157e:	657b      	str	r3, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4619      	mov	r1, r3
 8001584:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001586:	f7ff fb6d 	bl	8000c64 <__aeabi_fmul>
 800158a:	4603      	mov	r3, r0
 800158c:	653b      	str	r3, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4619      	mov	r1, r3
 8001592:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001594:	f7ff fb66 	bl	8000c64 <__aeabi_fmul>
 8001598:	4603      	mov	r3, r0
 800159a:	64fb      	str	r3, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4619      	mov	r1, r3
 80015a0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80015a2:	f7ff fb5f 	bl	8000c64 <__aeabi_fmul>
 80015a6:	4603      	mov	r3, r0
 80015a8:	64bb      	str	r3, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80015aa:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 80015ac:	1d23      	adds	r3, r4, #4
 80015ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80015b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80015b2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80015b4:	f7ff fa4c 	bl	8000a50 <__aeabi_fsub>
 80015b8:	4603      	mov	r3, r0
 80015ba:	6023      	str	r3, [r4, #0]
        *pMid2++ = m2 + m3;
 80015bc:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 80015be:	1d23      	adds	r3, r4, #4
 80015c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80015c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80015c4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80015c6:	f7ff fa45 	bl	8000a54 <__addsf3>
 80015ca:	4603      	mov	r3, r0
 80015cc:	6023      	str	r3, [r4, #0]

        twR = *tw++;
 80015ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015d0:	1d1a      	adds	r2, r3, #4
 80015d2:	673a      	str	r2, [r7, #112]	; 0x70
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 80015d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015da:	1d1a      	adds	r2, r3, #4
 80015dc:	673a      	str	r2, [r7, #112]	; 0x70
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 80015e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e4:	4619      	mov	r1, r3
 80015e6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80015e8:	f7ff fb3c 	bl	8000c64 <__aeabi_fmul>
 80015ec:	4603      	mov	r3, r0
 80015ee:	657b      	str	r3, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 80015f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f2:	4619      	mov	r1, r3
 80015f4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80015f6:	f7ff fb35 	bl	8000c64 <__aeabi_fmul>
 80015fa:	4603      	mov	r3, r0
 80015fc:	653b      	str	r3, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 80015fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001600:	4619      	mov	r1, r3
 8001602:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001604:	f7ff fb2e 	bl	8000c64 <__aeabi_fmul>
 8001608:	4603      	mov	r3, r0
 800160a:	64fb      	str	r3, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 800160c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160e:	4619      	mov	r1, r3
 8001610:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001612:	f7ff fb27 	bl	8000c64 <__aeabi_fmul>
 8001616:	4603      	mov	r3, r0
 8001618:	64bb      	str	r3, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 800161a:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 800161c:	1d23      	adds	r3, r4, #4
 800161e:	677b      	str	r3, [r7, #116]	; 0x74
 8001620:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001622:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001624:	f7ff fa16 	bl	8000a54 <__addsf3>
 8001628:	4603      	mov	r3, r0
 800162a:	6023      	str	r3, [r4, #0]
        *p2++ = m2 - m3;
 800162c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 800162e:	1d23      	adds	r3, r4, #4
 8001630:	677b      	str	r3, [r7, #116]	; 0x74
 8001632:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001634:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001636:	f7ff fa0b 	bl	8000a50 <__aeabi_fsub>
 800163a:	4603      	mov	r3, r0
 800163c:	6023      	str	r3, [r4, #0]
        
        m0 = t4[2] * twI;
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4619      	mov	r1, r3
 8001642:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001644:	f7ff fb0e 	bl	8000c64 <__aeabi_fmul>
 8001648:	4603      	mov	r3, r0
 800164a:	657b      	str	r3, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	4619      	mov	r1, r3
 8001650:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001652:	f7ff fb07 	bl	8000c64 <__aeabi_fmul>
 8001656:	4603      	mov	r3, r0
 8001658:	653b      	str	r3, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	4619      	mov	r1, r3
 800165e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001660:	f7ff fb00 	bl	8000c64 <__aeabi_fmul>
 8001664:	4603      	mov	r3, r0
 8001666:	64fb      	str	r3, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4619      	mov	r1, r3
 800166c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800166e:	f7ff faf9 	bl	8000c64 <__aeabi_fmul>
 8001672:	4603      	mov	r3, r0
 8001674:	64bb      	str	r3, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 8001676:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8001678:	1d23      	adds	r3, r4, #4
 800167a:	67bb      	str	r3, [r7, #120]	; 0x78
 800167c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800167e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001680:	f7ff f9e6 	bl	8000a50 <__aeabi_fsub>
 8001684:	4603      	mov	r3, r0
 8001686:	6023      	str	r3, [r4, #0]
        *pMid2++ = m2 + m3;
 8001688:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 800168a:	1d23      	adds	r3, r4, #4
 800168c:	67bb      	str	r3, [r7, #120]	; 0x78
 800168e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001690:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001692:	f7ff f9df 	bl	8000a54 <__addsf3>
 8001696:	4603      	mov	r3, r0
 8001698:	6023      	str	r3, [r4, #0]
    for ( l = L >> 2; l > 0; l-- ) 
 800169a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800169c:	3b01      	subs	r3, #1
 800169e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80016a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f47f ae6d 	bne.w	8001382 <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 80016a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016aa:	b299      	uxth	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	2302      	movs	r3, #2
 80016b2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80016b4:	f000 fec8 	bl	8002448 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 80016b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016ba:	b299      	uxth	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	2302      	movs	r3, #2
 80016c2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80016c4:	f000 fec0 	bl	8002448 <arm_radix8_butterfly_f32>
}
 80016c8:	bf00      	nop
 80016ca:	3784      	adds	r7, #132	; 0x84
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd90      	pop	{r4, r7, pc}

080016d0 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b0ad      	sub	sp, #180	; 0xb4
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	085b      	lsrs	r3, r3, #1
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 80016e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 80016f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80016fe:	4413      	add	r3, r2
 8001700:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8001704:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800170e:	4413      	add	r3, r2
 8001710:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8001718:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800171c:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 800171e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001722:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8001724:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001728:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 800172a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800172e:	3b04      	subs	r3, #4
 8001730:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8001734:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001738:	3b04      	subs	r3, #4
 800173a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 800173e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001742:	3b04      	subs	r3, #4
 8001744:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8001748:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001752:	4413      	add	r3, r2
 8001754:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001760:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001768:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800176c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8001770:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001774:	085b      	lsrs	r3, r3, #1
 8001776:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 800177a:	2302      	movs	r3, #2
 800177c:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 800177e:	2304      	movs	r3, #4
 8001780:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8001782:	2306      	movs	r3, #6
 8001784:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	4610      	mov	r0, r2
 8001794:	f7ff f95e 	bl	8000a54 <__addsf3>
 8001798:	4603      	mov	r3, r0
 800179a:	663b      	str	r3, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4619      	mov	r1, r3
 80017a8:	4610      	mov	r0, r2
 80017aa:	f7ff f951 	bl	8000a50 <__aeabi_fsub>
 80017ae:	4603      	mov	r3, r0
 80017b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	3304      	adds	r3, #4
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017bc:	3304      	adds	r3, #4
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4610      	mov	r0, r2
 80017c4:	f7ff f946 	bl	8000a54 <__addsf3>
 80017c8:	4603      	mov	r3, r0
 80017ca:	65bb      	str	r3, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	3304      	adds	r3, #4
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017d6:	3304      	adds	r3, #4
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4619      	mov	r1, r3
 80017dc:	4610      	mov	r0, r2
 80017de:	f7ff f937 	bl	8000a50 <__aeabi_fsub>
 80017e2:	4603      	mov	r3, r0
 80017e4:	657b      	str	r3, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80017e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017ea:	3304      	adds	r3, #4
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff f92f 	bl	8000a54 <__addsf3>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017fe:	3304      	adds	r3, #4
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4619      	mov	r1, r3
 8001804:	4610      	mov	r0, r2
 8001806:	f7ff f923 	bl	8000a50 <__aeabi_fsub>
 800180a:	4603      	mov	r3, r0
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800180e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001818:	f7ff f91a 	bl	8000a50 <__aeabi_fsub>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4619      	mov	r1, r3
 8001828:	4610      	mov	r0, r2
 800182a:	f7ff f913 	bl	8000a54 <__addsf3>
 800182e:	4603      	mov	r3, r0
 8001830:	633b      	str	r3, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001832:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800183c:	f7ff f908 	bl	8000a50 <__aeabi_fsub>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4619      	mov	r1, r3
 800184c:	4610      	mov	r0, r2
 800184e:	f7ff f8ff 	bl	8000a50 <__aeabi_fsub>
 8001852:	4603      	mov	r3, r0
 8001854:	61fb      	str	r3, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001856:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800185a:	3304      	adds	r3, #4
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4619      	mov	r1, r3
 8001860:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001862:	f7ff f8f5 	bl	8000a50 <__aeabi_fsub>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800186e:	3304      	adds	r3, #4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4619      	mov	r1, r3
 8001874:	4610      	mov	r0, r2
 8001876:	f7ff f8eb 	bl	8000a50 <__aeabi_fsub>
 800187a:	4603      	mov	r3, r0
 800187c:	623b      	str	r3, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800187e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001882:	3304      	adds	r3, #4
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4619      	mov	r1, r3
 8001888:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800188a:	f7ff f8e1 	bl	8000a50 <__aeabi_fsub>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001896:	3304      	adds	r3, #4
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4619      	mov	r1, r3
 800189c:	4610      	mov	r0, r2
 800189e:	f7ff f8d9 	bl	8000a54 <__addsf3>
 80018a2:	4603      	mov	r3, r0
 80018a4:	60fb      	str	r3, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80018a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff f8d0 	bl	8000a54 <__addsf3>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4619      	mov	r1, r3
 80018c0:	4610      	mov	r0, r2
 80018c2:	f7ff f8c5 	bl	8000a50 <__aeabi_fsub>
 80018c6:	4603      	mov	r3, r0
 80018c8:	613b      	str	r3, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80018ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f8be 	bl	8000a54 <__addsf3>
 80018d8:	4603      	mov	r3, r0
 80018da:	4618      	mov	r0, r3
 80018dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	683c      	ldr	r4, [r7, #0]
 80018e4:	1d23      	adds	r3, r4, #4
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	4611      	mov	r1, r2
 80018ea:	f7ff f8b3 	bl	8000a54 <__addsf3>
 80018ee:	4603      	mov	r3, r0
 80018f0:	6023      	str	r3, [r4, #0]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80018f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018f6:	3304      	adds	r3, #4
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff f8a9 	bl	8000a54 <__addsf3>
 8001902:	4603      	mov	r3, r0
 8001904:	4618      	mov	r0, r3
 8001906:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800190a:	3304      	adds	r3, #4
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	683c      	ldr	r4, [r7, #0]
 8001910:	1d23      	adds	r3, r4, #4
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	4611      	mov	r1, r2
 8001916:	f7ff f89d 	bl	8000a54 <__addsf3>
 800191a:	4603      	mov	r3, r0
 800191c:	6023      	str	r3, [r4, #0]

    // Twiddle factors are ones
    *p2++ = t2[0];
 800191e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001922:	1d1a      	adds	r2, r3, #4
 8001924:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800192a:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800192c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001930:	1d1a      	adds	r2, r3, #4
 8001932:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001938:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 800193a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800193e:	1d1a      	adds	r2, r3, #4
 8001940:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8001948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800194c:	1d1a      	adds	r2, r3, #4
 800194e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001952:	6a3a      	ldr	r2, [r7, #32]
 8001954:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8001956:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800195a:	1d1a      	adds	r2, r3, #4
 800195c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8001964:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001968:	1d1a      	adds	r2, r3, #4
 800196a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8001972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800197a:	4413      	add	r3, r2
 800197c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8001980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001988:	4413      	add	r3, r2
 800198a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800198e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001996:	4413      	add	r3, r2
 8001998:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 800199c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019a0:	3b02      	subs	r3, #2
 80019a2:	085b      	lsrs	r3, r3, #1
 80019a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80019a8:	e307      	b.n	8001fba <arm_cfft_radix8by4_f32+0x8ea>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	f7ff f84c 	bl	8000a54 <__addsf3>
 80019bc:	4603      	mov	r3, r0
 80019be:	663b      	str	r3, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4619      	mov	r1, r3
 80019cc:	4610      	mov	r0, r2
 80019ce:	f7ff f83f 	bl	8000a50 <__aeabi_fsub>
 80019d2:	4603      	mov	r3, r0
 80019d4:	65fb      	str	r3, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	3304      	adds	r3, #4
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019e0:	3304      	adds	r3, #4
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	4610      	mov	r0, r2
 80019e8:	f7ff f834 	bl	8000a54 <__addsf3>
 80019ec:	4603      	mov	r3, r0
 80019ee:	65bb      	str	r3, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	3304      	adds	r3, #4
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019fa:	3304      	adds	r3, #4
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4619      	mov	r1, r3
 8001a00:	4610      	mov	r0, r2
 8001a02:	f7ff f825 	bl	8000a50 <__aeabi_fsub>
 8001a06:	4603      	mov	r3, r0
 8001a08:	657b      	str	r3, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001a0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a0e:	3304      	adds	r3, #4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff f81d 	bl	8000a54 <__addsf3>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a22:	3304      	adds	r3, #4
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4619      	mov	r1, r3
 8001a28:	4610      	mov	r0, r2
 8001a2a:	f7ff f811 	bl	8000a50 <__aeabi_fsub>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001a32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001a3c:	f7ff f808 	bl	8000a50 <__aeabi_fsub>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	f7ff f801 	bl	8000a54 <__addsf3>
 8001a52:	4603      	mov	r3, r0
 8001a54:	633b      	str	r3, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001a56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001a60:	f7fe fff6 	bl	8000a50 <__aeabi_fsub>
 8001a64:	4603      	mov	r3, r0
 8001a66:	461a      	mov	r2, r3
 8001a68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4610      	mov	r0, r2
 8001a72:	f7fe ffed 	bl	8000a50 <__aeabi_fsub>
 8001a76:	4603      	mov	r3, r0
 8001a78:	61fb      	str	r3, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001a7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a7e:	3304      	adds	r3, #4
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4619      	mov	r1, r3
 8001a84:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001a86:	f7fe ffe3 	bl	8000a50 <__aeabi_fsub>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a92:	3304      	adds	r3, #4
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4619      	mov	r1, r3
 8001a98:	4610      	mov	r0, r2
 8001a9a:	f7fe ffd9 	bl	8000a50 <__aeabi_fsub>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	623b      	str	r3, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001aa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001aae:	f7fe ffcf 	bl	8000a50 <__aeabi_fsub>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aba:	3304      	adds	r3, #4
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	f7fe ffc7 	bl	8000a54 <__addsf3>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	60fb      	str	r3, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001aca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe ffbe 	bl	8000a54 <__addsf3>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	f7fe ffb3 	bl	8000a50 <__aeabi_fsub>
 8001aea:	4603      	mov	r3, r0
 8001aec:	613b      	str	r3, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001aee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe ffac 	bl	8000a54 <__addsf3>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	683c      	ldr	r4, [r7, #0]
 8001b08:	1d23      	adds	r3, r4, #4
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	f7fe ffa1 	bl	8000a54 <__addsf3>
 8001b12:	4603      	mov	r3, r0
 8001b14:	6023      	str	r3, [r4, #0]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001b16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe ff97 	bl	8000a54 <__addsf3>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b2e:	3304      	adds	r3, #4
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	683c      	ldr	r4, [r7, #0]
 8001b34:	1d23      	adds	r3, r4, #4
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	4611      	mov	r1, r2
 8001b3a:	f7fe ff8b 	bl	8000a54 <__addsf3>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6023      	str	r3, [r4, #0]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8001b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b46:	3b04      	subs	r3, #4
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b4e:	3b04      	subs	r3, #4
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4619      	mov	r1, r3
 8001b54:	4610      	mov	r0, r2
 8001b56:	f7fe ff7d 	bl	8000a54 <__addsf3>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	65bb      	str	r3, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8001b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b62:	3b04      	subs	r3, #4
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b6a:	3b04      	subs	r3, #4
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4610      	mov	r0, r2
 8001b72:	f7fe ff6d 	bl	8000a50 <__aeabi_fsub>
 8001b76:	4603      	mov	r3, r0
 8001b78:	657b      	str	r3, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8001b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4619      	mov	r1, r3
 8001b88:	4610      	mov	r0, r2
 8001b8a:	f7fe ff63 	bl	8000a54 <__addsf3>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	663b      	str	r3, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8001b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	f7fe ff55 	bl	8000a50 <__aeabi_fsub>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8001baa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4610      	mov	r0, r2
 8001bba:	f7fe ff49 	bl	8000a50 <__aeabi_fsub>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe ff46 	bl	8000a54 <__addsf3>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8001bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f7fe ff38 	bl	8000a50 <__aeabi_fsub>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001be8:	3b04      	subs	r3, #4
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	4610      	mov	r0, r2
 8001bf0:	f7fe ff2e 	bl	8000a50 <__aeabi_fsub>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bfc:	3b04      	subs	r3, #4
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	4610      	mov	r0, r2
 8001c04:	f7fe ff26 	bl	8000a54 <__addsf3>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	63bb      	str	r3, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8001c0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c10:	3b04      	subs	r3, #4
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4619      	mov	r1, r3
 8001c16:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001c18:	f7fe ff1a 	bl	8000a50 <__aeabi_fsub>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c24:	3b04      	subs	r3, #4
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f7fe ff10 	bl	8000a50 <__aeabi_fsub>
 8001c30:	4603      	mov	r3, r0
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8001c34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001c3e:	f7fe ff07 	bl	8000a50 <__aeabi_fsub>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f7fe fefe 	bl	8000a50 <__aeabi_fsub>
 8001c54:	4603      	mov	r3, r0
 8001c56:	62bb      	str	r3, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8001c58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f7fe fef2 	bl	8000a50 <__aeabi_fsub>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe feed 	bl	8000a50 <__aeabi_fsub>
 8001c76:	4603      	mov	r3, r0
 8001c78:	617b      	str	r3, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8001c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c86:	3b04      	subs	r3, #4
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	f7fe fedf 	bl	8000a50 <__aeabi_fsub>
 8001c92:	4603      	mov	r3, r0
 8001c94:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe feda 	bl	8000a50 <__aeabi_fsub>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	61bb      	str	r3, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8001ca0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fed3 	bl	8000a54 <__addsf3>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8001cbc:	1f23      	subs	r3, r4, #4
 8001cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	f7fe fec6 	bl	8000a54 <__addsf3>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	6023      	str	r3, [r4, #0]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8001ccc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cd0:	3b04      	subs	r3, #4
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe febc 	bl	8000a54 <__addsf3>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ce4:	3b04      	subs	r3, #4
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8001cec:	1f23      	subs	r3, r4, #4
 8001cee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	f7fe feae 	bl	8000a54 <__addsf3>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	6023      	str	r3, [r4, #0]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8001cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d00:	1d1a      	adds	r2, r3, #4
 8001d02:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8001d0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d0e:	1d1a      	adds	r2, r3, #4
 8001d10:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 8001d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001d1e:	f7fe ffa1 	bl	8000c64 <__aeabi_fmul>
 8001d22:	4603      	mov	r3, r0
 8001d24:	64bb      	str	r3, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8001d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d28:	4619      	mov	r1, r3
 8001d2a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d2c:	f7fe ff9a 	bl	8000c64 <__aeabi_fmul>
 8001d30:	4603      	mov	r3, r0
 8001d32:	647b      	str	r3, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8001d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d36:	4619      	mov	r1, r3
 8001d38:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001d3a:	f7fe ff93 	bl	8000c64 <__aeabi_fmul>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	643b      	str	r3, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	4619      	mov	r1, r3
 8001d46:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d48:	f7fe ff8c 	bl	8000c64 <__aeabi_fmul>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 8001d50:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8001d54:	1d23      	adds	r3, r4, #4
 8001d56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d5c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001d5e:	f7fe fe79 	bl	8000a54 <__addsf3>
 8001d62:	4603      	mov	r3, r0
 8001d64:	6023      	str	r3, [r4, #0]
        *p2++ = m2 - m3;
 8001d66:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8001d6a:	1d23      	adds	r3, r4, #4
 8001d6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d72:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001d74:	f7fe fe6c 	bl	8000a50 <__aeabi_fsub>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	6023      	str	r3, [r4, #0]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8001d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d7e:	4619      	mov	r1, r3
 8001d80:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d82:	f7fe ff6f 	bl	8000c64 <__aeabi_fmul>
 8001d86:	4603      	mov	r3, r0
 8001d88:	64bb      	str	r3, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8001d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001d90:	f7fe ff68 	bl	8000c64 <__aeabi_fmul>
 8001d94:	4603      	mov	r3, r0
 8001d96:	647b      	str	r3, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8001d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d9e:	f7fe ff61 	bl	8000c64 <__aeabi_fmul>
 8001da2:	4603      	mov	r3, r0
 8001da4:	643b      	str	r3, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8001da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da8:	4619      	mov	r1, r3
 8001daa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001dac:	f7fe ff5a 	bl	8000c64 <__aeabi_fmul>
 8001db0:	4603      	mov	r3, r0
 8001db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 8001db4:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8001db8:	1f23      	subs	r3, r4, #4
 8001dba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001dbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001dc0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001dc2:	f7fe fe45 	bl	8000a50 <__aeabi_fsub>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6023      	str	r3, [r4, #0]
        *pEnd2-- = m2 + m3;
 8001dca:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8001dce:	1f23      	subs	r3, r4, #4
 8001dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001dd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001dd6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001dd8:	f7fe fe3c 	bl	8000a54 <__addsf3>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	6023      	str	r3, [r4, #0]

        // COL 3
        twR = tw3[0];
 8001de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 8001de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8001df0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001df8:	4413      	add	r3, r2
 8001dfa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	4619      	mov	r1, r3
 8001e02:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001e04:	f7fe ff2e 	bl	8000c64 <__aeabi_fmul>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	64bb      	str	r3, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001e12:	f7fe ff27 	bl	8000c64 <__aeabi_fmul>
 8001e16:	4603      	mov	r3, r0
 8001e18:	647b      	str	r3, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001e20:	f7fe ff20 	bl	8000c64 <__aeabi_fmul>
 8001e24:	4603      	mov	r3, r0
 8001e26:	643b      	str	r3, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001e2e:	f7fe ff19 	bl	8000c64 <__aeabi_fmul>
 8001e32:	4603      	mov	r3, r0
 8001e34:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 8001e36:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 8001e3a:	1d23      	adds	r3, r4, #4
 8001e3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001e42:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001e44:	f7fe fe06 	bl	8000a54 <__addsf3>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	6023      	str	r3, [r4, #0]
        *p3++ = m2 - m3;
 8001e4c:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 8001e50:	1d23      	adds	r3, r4, #4
 8001e52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e58:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001e5a:	f7fe fdf9 	bl	8000a50 <__aeabi_fsub>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	6023      	str	r3, [r4, #0]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8001e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e64:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e68:	4619      	mov	r1, r3
 8001e6a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001e6c:	f7fe fefa 	bl	8000c64 <__aeabi_fmul>
 8001e70:	4603      	mov	r3, r0
 8001e72:	64bb      	str	r3, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	4619      	mov	r1, r3
 8001e78:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001e7a:	f7fe fef3 	bl	8000c64 <__aeabi_fmul>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	647b      	str	r3, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	4619      	mov	r1, r3
 8001e86:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001e88:	f7fe feec 	bl	8000c64 <__aeabi_fmul>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	643b      	str	r3, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8001e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e92:	4619      	mov	r1, r3
 8001e94:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001e96:	f7fe fee5 	bl	8000c64 <__aeabi_fmul>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 8001e9e:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8001ea2:	1f23      	subs	r3, r4, #4
 8001ea4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001ea8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001eaa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001eac:	f7fe fdd0 	bl	8000a50 <__aeabi_fsub>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	6023      	str	r3, [r4, #0]
        *pEnd3-- = m3 - m2;
 8001eb4:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8001eb8:	1f23      	subs	r3, r4, #4
 8001eba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001ebe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ec0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ec2:	f7fe fdc5 	bl	8000a50 <__aeabi_fsub>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6023      	str	r3, [r4, #0]
        
        // COL 4
        twR = tw4[0];
 8001eca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8001ed2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8001eda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4619      	mov	r1, r3
 8001eec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001eee:	f7fe feb9 	bl	8000c64 <__aeabi_fmul>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	64bb      	str	r3, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001efc:	f7fe feb2 	bl	8000c64 <__aeabi_fmul>
 8001f00:	4603      	mov	r3, r0
 8001f02:	647b      	str	r3, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4619      	mov	r1, r3
 8001f08:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001f0a:	f7fe feab 	bl	8000c64 <__aeabi_fmul>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	643b      	str	r3, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4619      	mov	r1, r3
 8001f16:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001f18:	f7fe fea4 	bl	8000c64 <__aeabi_fmul>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 8001f20:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8001f24:	1d23      	adds	r3, r4, #4
 8001f26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001f2c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f2e:	f7fe fd91 	bl	8000a54 <__addsf3>
 8001f32:	4603      	mov	r3, r0
 8001f34:	6023      	str	r3, [r4, #0]
        *p4++ = m2 - m3;
 8001f36:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8001f3a:	1d23      	adds	r3, r4, #4
 8001f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f42:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001f44:	f7fe fd84 	bl	8000a50 <__aeabi_fsub>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	6023      	str	r3, [r4, #0]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001f52:	f7fe fe87 	bl	8000c64 <__aeabi_fmul>
 8001f56:	4603      	mov	r3, r0
 8001f58:	64bb      	str	r3, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001f60:	f7fe fe80 	bl	8000c64 <__aeabi_fmul>
 8001f64:	4603      	mov	r3, r0
 8001f66:	647b      	str	r3, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001f6e:	f7fe fe79 	bl	8000c64 <__aeabi_fmul>
 8001f72:	4603      	mov	r3, r0
 8001f74:	643b      	str	r3, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001f7c:	f7fe fe72 	bl	8000c64 <__aeabi_fmul>
 8001f80:	4603      	mov	r3, r0
 8001f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 8001f84:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8001f88:	1f23      	subs	r3, r4, #4
 8001f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001f90:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f92:	f7fe fd5d 	bl	8000a50 <__aeabi_fsub>
 8001f96:	4603      	mov	r3, r0
 8001f98:	6023      	str	r3, [r4, #0]
        *pEnd4-- = m2 + m3;
 8001f9a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8001f9e:	1f23      	subs	r3, r4, #4
 8001fa0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001fa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001fa6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001fa8:	f7fe fd54 	bl	8000a54 <__addsf3>
 8001fac:	4603      	mov	r3, r0
 8001fae:	6023      	str	r3, [r4, #0]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8001fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001fba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f47f acf3 	bne.w	80019aa <arm_cfft_radix8by4_f32+0x2da>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	f7fe fd3f 	bl	8000a54 <__addsf3>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	663b      	str	r3, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	f7fe fd32 	bl	8000a50 <__aeabi_fsub>
 8001fec:	4603      	mov	r3, r0
 8001fee:	65fb      	str	r3, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4619      	mov	r1, r3
 8002000:	4610      	mov	r0, r2
 8002002:	f7fe fd27 	bl	8000a54 <__addsf3>
 8002006:	4603      	mov	r3, r0
 8002008:	65bb      	str	r3, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	3304      	adds	r3, #4
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002014:	3304      	adds	r3, #4
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4619      	mov	r1, r3
 800201a:	4610      	mov	r0, r2
 800201c:	f7fe fd18 	bl	8000a50 <__aeabi_fsub>
 8002020:	4603      	mov	r3, r0
 8002022:	657b      	str	r3, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002024:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002028:	3304      	adds	r3, #4
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fd10 	bl	8000a54 <__addsf3>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800203c:	3304      	adds	r3, #4
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	4610      	mov	r0, r2
 8002044:	f7fe fd04 	bl	8000a50 <__aeabi_fsub>
 8002048:	4603      	mov	r3, r0
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800204c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4619      	mov	r1, r3
 8002054:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002056:	f7fe fcfb 	bl	8000a50 <__aeabi_fsub>
 800205a:	4603      	mov	r3, r0
 800205c:	461a      	mov	r2, r3
 800205e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4619      	mov	r1, r3
 8002066:	4610      	mov	r0, r2
 8002068:	f7fe fcf4 	bl	8000a54 <__addsf3>
 800206c:	4603      	mov	r3, r0
 800206e:	633b      	str	r3, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002070:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4619      	mov	r1, r3
 8002078:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800207a:	f7fe fce9 	bl	8000a50 <__aeabi_fsub>
 800207e:	4603      	mov	r3, r0
 8002080:	461a      	mov	r2, r3
 8002082:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	4610      	mov	r0, r2
 800208c:	f7fe fce0 	bl	8000a50 <__aeabi_fsub>
 8002090:	4603      	mov	r3, r0
 8002092:	61fb      	str	r3, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002094:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002098:	3304      	adds	r3, #4
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4619      	mov	r1, r3
 800209e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80020a0:	f7fe fcd6 	bl	8000a50 <__aeabi_fsub>
 80020a4:	4603      	mov	r3, r0
 80020a6:	461a      	mov	r2, r3
 80020a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020ac:	3304      	adds	r3, #4
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	4610      	mov	r0, r2
 80020b4:	f7fe fccc 	bl	8000a50 <__aeabi_fsub>
 80020b8:	4603      	mov	r3, r0
 80020ba:	623b      	str	r3, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80020bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020c0:	3304      	adds	r3, #4
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4619      	mov	r1, r3
 80020c6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80020c8:	f7fe fcc2 	bl	8000a50 <__aeabi_fsub>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
 80020d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020d4:	3304      	adds	r3, #4
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	4610      	mov	r0, r2
 80020dc:	f7fe fcba 	bl	8000a54 <__addsf3>
 80020e0:	4603      	mov	r3, r0
 80020e2:	60fb      	str	r3, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80020e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fcb1 	bl	8000a54 <__addsf3>
 80020f2:	4603      	mov	r3, r0
 80020f4:	461a      	mov	r2, r3
 80020f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4619      	mov	r1, r3
 80020fe:	4610      	mov	r0, r2
 8002100:	f7fe fca6 	bl	8000a50 <__aeabi_fsub>
 8002104:	4603      	mov	r3, r0
 8002106:	613b      	str	r3, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002108:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe fc9f 	bl	8000a54 <__addsf3>
 8002116:	4603      	mov	r3, r0
 8002118:	4618      	mov	r0, r3
 800211a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	683c      	ldr	r4, [r7, #0]
 8002122:	1d23      	adds	r3, r4, #4
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	4611      	mov	r1, r2
 8002128:	f7fe fc94 	bl	8000a54 <__addsf3>
 800212c:	4603      	mov	r3, r0
 800212e:	6023      	str	r3, [r4, #0]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002130:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002134:	3304      	adds	r3, #4
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fc8a 	bl	8000a54 <__addsf3>
 8002140:	4603      	mov	r3, r0
 8002142:	4618      	mov	r0, r3
 8002144:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002148:	3304      	adds	r3, #4
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	683c      	ldr	r4, [r7, #0]
 800214e:	1d23      	adds	r3, r4, #4
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	4611      	mov	r1, r2
 8002154:	f7fe fc7e 	bl	8000a54 <__addsf3>
 8002158:	4603      	mov	r3, r0
 800215a:	6023      	str	r3, [r4, #0]

    // COL 2
    twR = tw2[0];
 800215c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8002164:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 800216c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216e:	4619      	mov	r1, r3
 8002170:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002172:	f7fe fd77 	bl	8000c64 <__aeabi_fmul>
 8002176:	4603      	mov	r3, r0
 8002178:	64bb      	str	r3, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 800217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217c:	4619      	mov	r1, r3
 800217e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002180:	f7fe fd70 	bl	8000c64 <__aeabi_fmul>
 8002184:	4603      	mov	r3, r0
 8002186:	647b      	str	r3, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8002188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218a:	4619      	mov	r1, r3
 800218c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800218e:	f7fe fd69 	bl	8000c64 <__aeabi_fmul>
 8002192:	4603      	mov	r3, r0
 8002194:	643b      	str	r3, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8002196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002198:	4619      	mov	r1, r3
 800219a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800219c:	f7fe fd62 	bl	8000c64 <__aeabi_fmul>
 80021a0:	4603      	mov	r3, r0
 80021a2:	63fb      	str	r3, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 80021a4:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80021a8:	1d23      	adds	r3, r4, #4
 80021aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80021b0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80021b2:	f7fe fc4f 	bl	8000a54 <__addsf3>
 80021b6:	4603      	mov	r3, r0
 80021b8:	6023      	str	r3, [r4, #0]
    *p2++ = m2 - m3;
 80021ba:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80021be:	1d23      	adds	r3, r4, #4
 80021c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80021c6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80021c8:	f7fe fc42 	bl	8000a50 <__aeabi_fsub>
 80021cc:	4603      	mov	r3, r0
 80021ce:	6023      	str	r3, [r4, #0]
    // COL 3
    twR = tw3[0];
 80021d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 80021d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	4619      	mov	r1, r3
 80021e4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80021e6:	f7fe fd3d 	bl	8000c64 <__aeabi_fmul>
 80021ea:	4603      	mov	r3, r0
 80021ec:	64bb      	str	r3, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	4619      	mov	r1, r3
 80021f2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80021f4:	f7fe fd36 	bl	8000c64 <__aeabi_fmul>
 80021f8:	4603      	mov	r3, r0
 80021fa:	647b      	str	r3, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	4619      	mov	r1, r3
 8002200:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002202:	f7fe fd2f 	bl	8000c64 <__aeabi_fmul>
 8002206:	4603      	mov	r3, r0
 8002208:	643b      	str	r3, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	4619      	mov	r1, r3
 800220e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002210:	f7fe fd28 	bl	8000c64 <__aeabi_fmul>
 8002214:	4603      	mov	r3, r0
 8002216:	63fb      	str	r3, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8002218:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 800221c:	1d23      	adds	r3, r4, #4
 800221e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002222:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002224:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002226:	f7fe fc15 	bl	8000a54 <__addsf3>
 800222a:	4603      	mov	r3, r0
 800222c:	6023      	str	r3, [r4, #0]
    *p3++ = m2 - m3;
 800222e:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 8002232:	1d23      	adds	r3, r4, #4
 8002234:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002238:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800223a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800223c:	f7fe fc08 	bl	8000a50 <__aeabi_fsub>
 8002240:	4603      	mov	r3, r0
 8002242:	6023      	str	r3, [r4, #0]
    // COL 4
    twR = tw4[0];
 8002244:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 800224c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4619      	mov	r1, r3
 8002258:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800225a:	f7fe fd03 	bl	8000c64 <__aeabi_fmul>
 800225e:	4603      	mov	r3, r0
 8002260:	64bb      	str	r3, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4619      	mov	r1, r3
 8002266:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002268:	f7fe fcfc 	bl	8000c64 <__aeabi_fmul>
 800226c:	4603      	mov	r3, r0
 800226e:	647b      	str	r3, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4619      	mov	r1, r3
 8002274:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002276:	f7fe fcf5 	bl	8000c64 <__aeabi_fmul>
 800227a:	4603      	mov	r3, r0
 800227c:	643b      	str	r3, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4619      	mov	r1, r3
 8002282:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002284:	f7fe fcee 	bl	8000c64 <__aeabi_fmul>
 8002288:	4603      	mov	r3, r0
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 800228c:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8002290:	1d23      	adds	r3, r4, #4
 8002292:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002296:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002298:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800229a:	f7fe fbdb 	bl	8000a54 <__addsf3>
 800229e:	4603      	mov	r3, r0
 80022a0:	6023      	str	r3, [r4, #0]
    *p4++ = m2 - m3;
 80022a2:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 80022a6:	1d23      	adds	r3, r4, #4
 80022a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80022ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80022b0:	f7fe fbce 	bl	8000a50 <__aeabi_fsub>
 80022b4:	4603      	mov	r3, r0
 80022b6:	6023      	str	r3, [r4, #0]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 80022b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022bc:	b299      	uxth	r1, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	2304      	movs	r3, #4
 80022c4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80022c6:	f000 f8bf 	bl	8002448 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 80022ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022ce:	b299      	uxth	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	2304      	movs	r3, #4
 80022d6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80022d8:	f000 f8b6 	bl	8002448 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 80022dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022e0:	b299      	uxth	r1, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	2304      	movs	r3, #4
 80022e8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80022ea:	f000 f8ad 	bl	8002448 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 80022ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022f2:	b299      	uxth	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	2304      	movs	r3, #4
 80022fa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80022fc:	f000 f8a4 	bl	8002448 <arm_radix8_butterfly_f32>
}
 8002300:	bf00      	nop
 8002302:	37b4      	adds	r7, #180	; 0xb4
 8002304:	46bd      	mov	sp, r7
 8002306:	bd90      	pop	{r4, r7, pc}

08002308 <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b089      	sub	sp, #36	; 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	4611      	mov	r1, r2
 8002314:	461a      	mov	r2, r3
 8002316:	460b      	mov	r3, r1
 8002318:	71fb      	strb	r3, [r7, #7]
 800231a:	4613      	mov	r3, r2
 800231c:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d115      	bne.n	8002356 <arm_cfft_f32+0x4e>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	3304      	adds	r3, #4
 800232e:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	e00b      	b.n	800234e <arm_cfft_f32+0x46>
        {
            *pSrc = -*pSrc;
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	601a      	str	r2, [r3, #0]
            pSrc += 2;
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	3308      	adds	r3, #8
 8002346:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	3301      	adds	r3, #1
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	429a      	cmp	r2, r3
 8002354:	d3ef      	bcc.n	8002336 <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800235c:	d024      	beq.n	80023a8 <arm_cfft_f32+0xa0>
 800235e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002362:	d80b      	bhi.n	800237c <arm_cfft_f32+0x74>
 8002364:	2b20      	cmp	r3, #32
 8002366:	d01f      	beq.n	80023a8 <arm_cfft_f32+0xa0>
 8002368:	2b20      	cmp	r3, #32
 800236a:	d802      	bhi.n	8002372 <arm_cfft_f32+0x6a>
 800236c:	2b10      	cmp	r3, #16
 800236e:	d016      	beq.n	800239e <arm_cfft_f32+0x96>
 8002370:	e028      	b.n	80023c4 <arm_cfft_f32+0xbc>
 8002372:	2b40      	cmp	r3, #64	; 0x40
 8002374:	d01d      	beq.n	80023b2 <arm_cfft_f32+0xaa>
 8002376:	2b80      	cmp	r3, #128	; 0x80
 8002378:	d011      	beq.n	800239e <arm_cfft_f32+0x96>
 800237a:	e023      	b.n	80023c4 <arm_cfft_f32+0xbc>
 800237c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002380:	d00d      	beq.n	800239e <arm_cfft_f32+0x96>
 8002382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002386:	d803      	bhi.n	8002390 <arm_cfft_f32+0x88>
 8002388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800238c:	d011      	beq.n	80023b2 <arm_cfft_f32+0xaa>
 800238e:	e019      	b.n	80023c4 <arm_cfft_f32+0xbc>
 8002390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002394:	d008      	beq.n	80023a8 <arm_cfft_f32+0xa0>
 8002396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239a:	d00a      	beq.n	80023b2 <arm_cfft_f32+0xaa>
 800239c:	e012      	b.n	80023c4 <arm_cfft_f32+0xbc>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800239e:	68b9      	ldr	r1, [r7, #8]
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f7fe ffc9 	bl	8001338 <arm_cfft_radix8by2_f32>
        break;
 80023a6:	e00d      	b.n	80023c4 <arm_cfft_f32+0xbc>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 80023a8:	68b9      	ldr	r1, [r7, #8]
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f7ff f990 	bl	80016d0 <arm_cfft_radix8by4_f32>
        break;
 80023b0:	e008      	b.n	80023c4 <arm_cfft_f32+0xbc>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	b299      	uxth	r1, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	2301      	movs	r3, #1
 80023bc:	68b8      	ldr	r0, [r7, #8]
 80023be:	f000 f843 	bl	8002448 <arm_radix8_butterfly_f32>
        break;
 80023c2:	bf00      	nop
    }  

    if( bitReverseFlag )
 80023c4:	79bb      	ldrb	r3, [r7, #6]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <arm_cfft_f32+0xd2>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8999      	ldrh	r1, [r3, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	461a      	mov	r2, r3
 80023d4:	68b8      	ldr	r0, [r7, #8]
 80023d6:	f7fd feb9 	bl	800014c <arm_bitreversal_32>

    if(ifftFlag == 1u)
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d12f      	bne.n	8002440 <arm_cfft_f32+0x138>
    {
        invL = 1.0f/(float32_t)L;
 80023e0:	6978      	ldr	r0, [r7, #20]
 80023e2:	f7fe fbe7 	bl	8000bb4 <__aeabi_ui2f>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4619      	mov	r1, r3
 80023ea:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80023ee:	f7fe fced 	bl	8000dcc <__aeabi_fdiv>
 80023f2:	4603      	mov	r3, r0
 80023f4:	613b      	str	r3, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	e01b      	b.n	8002438 <arm_cfft_f32+0x130>
        {
            *pSrc++ *=   invL ;
 8002400:	69bc      	ldr	r4, [r7, #24]
 8002402:	1d23      	adds	r3, r4, #4
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	6823      	ldr	r3, [r4, #0]
 8002408:	6939      	ldr	r1, [r7, #16]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fc2a 	bl	8000c64 <__aeabi_fmul>
 8002410:	4603      	mov	r3, r0
 8002412:	6023      	str	r3, [r4, #0]
            *pSrc  = -(*pSrc) * invL;
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800241c:	6939      	ldr	r1, [r7, #16]
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe fc20 	bl	8000c64 <__aeabi_fmul>
 8002424:	4603      	mov	r3, r0
 8002426:	461a      	mov	r2, r3
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	601a      	str	r2, [r3, #0]
            pSrc++;
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	3304      	adds	r3, #4
 8002430:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3301      	adds	r3, #1
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	429a      	cmp	r2, r3
 800243e:	d3df      	bcc.n	8002400 <arm_cfft_f32+0xf8>
        }
    }
}
 8002440:	bf00      	nop
 8002442:	3724      	adds	r7, #36	; 0x24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd90      	pop	{r4, r7, pc}

08002448 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b0bd      	sub	sp, #244	; 0xf4
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	461a      	mov	r2, r3
 8002454:	460b      	mov	r3, r1
 8002456:	817b      	strh	r3, [r7, #10]
 8002458:	4613      	mov	r3, r2
 800245a:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <arm_radix8_butterfly_f32+0x3c>)
 800245e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8002462:	897b      	ldrh	r3, [r7, #10]
 8002464:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 8002468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800246c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8002470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002474:	08db      	lsrs	r3, r3, #3
 8002476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002480:	e002      	b.n	8002488 <arm_radix8_butterfly_f32+0x40>
 8002482:	bf00      	nop
 8002484:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 8002488:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800248c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002490:	4413      	add	r3, r2
 8002492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8002496:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800249a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800249e:	4413      	add	r3, r2
 80024a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 80024a4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80024a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ac:	4413      	add	r3, r2
 80024ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 80024b2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80024b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ba:	4413      	add	r3, r2
 80024bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 80024c0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80024c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024c8:	4413      	add	r3, r2
 80024ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 80024ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80024d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024d6:	4413      	add	r3, r2
 80024d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 80024dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80024e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024e4:	4413      	add	r3, r2
 80024e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80024ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4413      	add	r3, r2
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4619      	mov	r1, r3
 8002504:	f7fe faa6 	bl	8000a54 <__addsf3>
 8002508:	4603      	mov	r3, r0
 800250a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800250e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4413      	add	r3, r2
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4619      	mov	r1, r3
 8002528:	f7fe fa92 	bl	8000a50 <__aeabi_fsub>
 800252c:	4603      	mov	r3, r0
 800252e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4413      	add	r3, r2
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4413      	add	r3, r2
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4619      	mov	r1, r3
 800254c:	f7fe fa82 	bl	8000a54 <__addsf3>
 8002550:	4603      	mov	r3, r0
 8002552:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4413      	add	r3, r2
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4619      	mov	r1, r3
 8002570:	f7fe fa6e 	bl	8000a50 <__aeabi_fsub>
 8002574:	4603      	mov	r3, r0
 8002576:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800257a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4619      	mov	r1, r3
 8002594:	f7fe fa5e 	bl	8000a54 <__addsf3>
 8002598:	4603      	mov	r3, r0
 800259a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800259e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4413      	add	r3, r2
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4413      	add	r3, r2
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4619      	mov	r1, r3
 80025b8:	f7fe fa4a 	bl	8000a50 <__aeabi_fsub>
 80025bc:	4603      	mov	r3, r0
 80025be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80025c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4413      	add	r3, r2
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4619      	mov	r1, r3
 80025dc:	f7fe fa3a 	bl	8000a54 <__addsf3>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80025e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4413      	add	r3, r2
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4413      	add	r3, r2
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4619      	mov	r1, r3
 8002600:	f7fe fa26 	bl	8000a50 <__aeabi_fsub>
 8002604:	4603      	mov	r3, r0
 8002606:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 800260a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800260e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8002612:	f7fe fa1d 	bl	8000a50 <__aeabi_fsub>
 8002616:	4603      	mov	r3, r0
 8002618:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800261c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8002620:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8002624:	f7fe fa16 	bl	8000a54 <__addsf3>
 8002628:	4603      	mov	r3, r0
 800262a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800262e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002632:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8002636:	f7fe fa0b 	bl	8000a50 <__aeabi_fsub>
 800263a:	4603      	mov	r3, r0
 800263c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8002640:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002644:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8002648:	f7fe fa04 	bl	8000a54 <__addsf3>
 800264c:	4603      	mov	r3, r0
 800264e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 8002652:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	18d4      	adds	r4, r2, r3
 800265c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8002660:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8002664:	f7fe f9f6 	bl	8000a54 <__addsf3>
 8002668:	4603      	mov	r3, r0
 800266a:	6023      	str	r3, [r4, #0]
         pSrc[2 * i5] = r1 - r2;
 800266c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	18d4      	adds	r4, r2, r3
 8002676:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800267a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800267e:	f7fe f9e7 	bl	8000a50 <__aeabi_fsub>
 8002682:	4603      	mov	r3, r0
 8002684:	6023      	str	r3, [r4, #0]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002686:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	3304      	adds	r3, #4
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4413      	add	r3, r2
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	3304      	adds	r3, #4
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4413      	add	r3, r2
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4619      	mov	r1, r3
 80026a4:	f7fe f9d6 	bl	8000a54 <__addsf3>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80026ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	3304      	adds	r3, #4
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4413      	add	r3, r2
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	3304      	adds	r3, #4
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4413      	add	r3, r2
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4619      	mov	r1, r3
 80026cc:	f7fe f9c0 	bl	8000a50 <__aeabi_fsub>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80026d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	3304      	adds	r3, #4
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4413      	add	r3, r2
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	3304      	adds	r3, #4
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4619      	mov	r1, r3
 80026f4:	f7fe f9ae 	bl	8000a54 <__addsf3>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80026fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	3304      	adds	r3, #4
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4413      	add	r3, r2
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	3304      	adds	r3, #4
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4413      	add	r3, r2
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4619      	mov	r1, r3
 800271c:	f7fe f998 	bl	8000a50 <__aeabi_fsub>
 8002720:	4603      	mov	r3, r0
 8002722:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002726:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	3304      	adds	r3, #4
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4413      	add	r3, r2
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	3304      	adds	r3, #4
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4413      	add	r3, r2
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4619      	mov	r1, r3
 8002744:	f7fe f986 	bl	8000a54 <__addsf3>
 8002748:	4603      	mov	r3, r0
 800274a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800274e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	3304      	adds	r3, #4
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4413      	add	r3, r2
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	3304      	adds	r3, #4
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4413      	add	r3, r2
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4619      	mov	r1, r3
 800276c:	f7fe f970 	bl	8000a50 <__aeabi_fsub>
 8002770:	4603      	mov	r3, r0
 8002772:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002776:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	3304      	adds	r3, #4
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4413      	add	r3, r2
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	3304      	adds	r3, #4
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4413      	add	r3, r2
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4619      	mov	r1, r3
 8002794:	f7fe f95e 	bl	8000a54 <__addsf3>
 8002798:	4603      	mov	r3, r0
 800279a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800279e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	3304      	adds	r3, #4
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4413      	add	r3, r2
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	3304      	adds	r3, #4
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4413      	add	r3, r2
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4619      	mov	r1, r3
 80027bc:	f7fe f948 	bl	8000a50 <__aeabi_fsub>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
         t2 = r1 - s3;
 80027c6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80027ca:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80027ce:	f7fe f93f 	bl	8000a50 <__aeabi_fsub>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
         r1 = r1 + s3;
 80027d8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80027dc:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80027e0:	f7fe f938 	bl	8000a54 <__addsf3>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 80027ea:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80027ee:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80027f2:	f7fe f92d 	bl	8000a50 <__aeabi_fsub>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 80027fc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002800:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8002804:	f7fe f926 	bl	8000a54 <__addsf3>
 8002808:	4603      	mov	r3, r0
 800280a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800280e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	3304      	adds	r3, #4
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	18d4      	adds	r4, r2, r3
 800281a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800281e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8002822:	f7fe f917 	bl	8000a54 <__addsf3>
 8002826:	4603      	mov	r3, r0
 8002828:	6023      	str	r3, [r4, #0]
         pSrc[2 * i5 + 1] = r1 - r2;
 800282a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	3304      	adds	r3, #4
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	18d4      	adds	r4, r2, r3
 8002836:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800283a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800283e:	f7fe f907 	bl	8000a50 <__aeabi_fsub>
 8002842:	4603      	mov	r3, r0
 8002844:	6023      	str	r3, [r4, #0]
         pSrc[2 * i3]     = t1 + s3;
 8002846:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	18d4      	adds	r4, r2, r3
 8002850:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002854:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002858:	f7fe f8fc 	bl	8000a54 <__addsf3>
 800285c:	4603      	mov	r3, r0
 800285e:	6023      	str	r3, [r4, #0]
         pSrc[2 * i7]     = t1 - s3;
 8002860:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	18d4      	adds	r4, r2, r3
 800286a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800286e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002872:	f7fe f8ed 	bl	8000a50 <__aeabi_fsub>
 8002876:	4603      	mov	r3, r0
 8002878:	6023      	str	r3, [r4, #0]
         pSrc[2 * i3 + 1] = t2 - r3;
 800287a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	3304      	adds	r3, #4
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	18d4      	adds	r4, r2, r3
 8002886:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800288a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800288e:	f7fe f8df 	bl	8000a50 <__aeabi_fsub>
 8002892:	4603      	mov	r3, r0
 8002894:	6023      	str	r3, [r4, #0]
         pSrc[2 * i7 + 1] = t2 + r3;
 8002896:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	3304      	adds	r3, #4
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	18d4      	adds	r4, r2, r3
 80028a2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80028a6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80028aa:	f7fe f8d3 	bl	8000a54 <__addsf3>
 80028ae:	4603      	mov	r3, r0
 80028b0:	6023      	str	r3, [r4, #0]
         r1 = (r6 - r8) * C81;
 80028b2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80028b6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80028ba:	f7fe f8c9 	bl	8000a50 <__aeabi_fsub>
 80028be:	4603      	mov	r3, r0
 80028c0:	4619      	mov	r1, r3
 80028c2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80028c6:	f7fe f9cd 	bl	8000c64 <__aeabi_fmul>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 80028d0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80028d4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80028d8:	f7fe f8bc 	bl	8000a54 <__addsf3>
 80028dc:	4603      	mov	r3, r0
 80028de:	4619      	mov	r1, r3
 80028e0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80028e4:	f7fe f9be 	bl	8000c64 <__aeabi_fmul>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 80028ee:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80028f2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80028f6:	f7fe f8ab 	bl	8000a50 <__aeabi_fsub>
 80028fa:	4603      	mov	r3, r0
 80028fc:	4619      	mov	r1, r3
 80028fe:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002902:	f7fe f9af 	bl	8000c64 <__aeabi_fmul>
 8002906:	4603      	mov	r3, r0
 8002908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800290c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8002910:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002914:	f7fe f89e 	bl	8000a54 <__addsf3>
 8002918:	4603      	mov	r3, r0
 800291a:	4619      	mov	r1, r3
 800291c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002920:	f7fe f9a0 	bl	8000c64 <__aeabi_fmul>
 8002924:	4603      	mov	r3, r0
 8002926:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800292a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800292e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8002932:	f7fe f88d 	bl	8000a50 <__aeabi_fsub>
 8002936:	4603      	mov	r3, r0
 8002938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800293c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8002940:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8002944:	f7fe f886 	bl	8000a54 <__addsf3>
 8002948:	4603      	mov	r3, r0
 800294a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800294e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8002952:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8002956:	f7fe f87b 	bl	8000a50 <__aeabi_fsub>
 800295a:	4603      	mov	r3, r0
 800295c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8002960:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8002964:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8002968:	f7fe f874 	bl	8000a54 <__addsf3>
 800296c:	4603      	mov	r3, r0
 800296e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8002972:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8002976:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800297a:	f7fe f869 	bl	8000a50 <__aeabi_fsub>
 800297e:	4603      	mov	r3, r0
 8002980:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8002984:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8002988:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800298c:	f7fe f862 	bl	8000a54 <__addsf3>
 8002990:	4603      	mov	r3, r0
 8002992:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8002996:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800299a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800299e:	f7fe f857 	bl	8000a50 <__aeabi_fsub>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
         s7 = s7 + s6;
 80029a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029ac:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80029b0:	f7fe f850 	bl	8000a54 <__addsf3>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 80029ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	18d4      	adds	r4, r2, r3
 80029c4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80029c8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80029cc:	f7fe f842 	bl	8000a54 <__addsf3>
 80029d0:	4603      	mov	r3, r0
 80029d2:	6023      	str	r3, [r4, #0]
         pSrc[2 * i8]     = r5 - s7;
 80029d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	18d4      	adds	r4, r2, r3
 80029de:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80029e2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80029e6:	f7fe f833 	bl	8000a50 <__aeabi_fsub>
 80029ea:	4603      	mov	r3, r0
 80029ec:	6023      	str	r3, [r4, #0]
         pSrc[2 * i6]     = t1 + s8;
 80029ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	18d4      	adds	r4, r2, r3
 80029f8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80029fc:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002a00:	f7fe f828 	bl	8000a54 <__addsf3>
 8002a04:	4603      	mov	r3, r0
 8002a06:	6023      	str	r3, [r4, #0]
         pSrc[2 * i4]     = t1 - s8;
 8002a08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	18d4      	adds	r4, r2, r3
 8002a12:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8002a16:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002a1a:	f7fe f819 	bl	8000a50 <__aeabi_fsub>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	6023      	str	r3, [r4, #0]
         pSrc[2 * i2 + 1] = s5 - r7;
 8002a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	3304      	adds	r3, #4
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	18d4      	adds	r4, r2, r3
 8002a2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a32:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002a36:	f7fe f80b 	bl	8000a50 <__aeabi_fsub>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	6023      	str	r3, [r4, #0]
         pSrc[2 * i8 + 1] = s5 + r7;
 8002a3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	3304      	adds	r3, #4
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	18d4      	adds	r4, r2, r3
 8002a4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a4e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002a52:	f7fd ffff 	bl	8000a54 <__addsf3>
 8002a56:	4603      	mov	r3, r0
 8002a58:	6023      	str	r3, [r4, #0]
         pSrc[2 * i6 + 1] = t2 - r8;
 8002a5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	3304      	adds	r3, #4
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	18d4      	adds	r4, r2, r3
 8002a66:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8002a6a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002a6e:	f7fd ffef 	bl	8000a50 <__aeabi_fsub>
 8002a72:	4603      	mov	r3, r0
 8002a74:	6023      	str	r3, [r4, #0]
         pSrc[2 * i4 + 1] = t2 + r8;
 8002a76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	18d4      	adds	r4, r2, r3
 8002a82:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8002a86:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002a8a:	f7fd ffe3 	bl	8000a54 <__addsf3>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6023      	str	r3, [r4, #0]
         
         i1 += n1;
 8002a92:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 8002aa0:	897b      	ldrh	r3, [r7, #10]
 8002aa2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	f4ff acee 	bcc.w	8002488 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 8002aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab0:	2b07      	cmp	r3, #7
 8002ab2:	f240 84ba 	bls.w	800342a <arm_radix8_butterfly_f32+0xfe2>
         break;
      
      ia1 = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8002abc:	2301      	movs	r3, #1
 8002abe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8002ac2:	893b      	ldrh	r3, [r7, #8]
 8002ac4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002ac8:	4413      	add	r3, r2
 8002aca:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8002acc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ace:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8002ad2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002ad6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ad8:	4413      	add	r3, r2
 8002ada:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8002adc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002ade:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ae0:	4413      	add	r3, r2
 8002ae2:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8002ae4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ae6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ae8:	4413      	add	r3, r2
 8002aea:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8002aec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002aee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002af0:	4413      	add	r3, r2
 8002af2:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8002af4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002af6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002af8:	4413      	add	r3, r2
 8002afa:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8002afc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002afe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b00:	4413      	add	r3, r2
 8002b02:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 8002b04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8002b12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	4413      	add	r3, r2
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8002b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8002b2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	4413      	add	r3, r2
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8002b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8002b42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8002b4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8002b5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	3304      	adds	r3, #4
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8002b6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	3304      	adds	r3, #4
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	4413      	add	r3, r2
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8002b78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8002b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	4413      	add	r3, r2
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8002b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	3304      	adds	r3, #4
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8002ba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	4413      	add	r3, r2
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 8002bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 8002bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8002bc6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bce:	4413      	add	r3, r2
 8002bd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8002bd4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bdc:	4413      	add	r3, r2
 8002bde:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8002be2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bea:	4413      	add	r3, r2
 8002bec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8002bf0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8002bfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c06:	4413      	add	r3, r2
 8002c08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8002c0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c14:	4413      	add	r3, r2
 8002c16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8002c1a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c22:	4413      	add	r3, r2
 8002c24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002c28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4413      	add	r3, r2
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4619      	mov	r1, r3
 8002c42:	f7fd ff07 	bl	8000a54 <__addsf3>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002c4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4413      	add	r3, r2
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4413      	add	r3, r2
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4619      	mov	r1, r3
 8002c66:	f7fd fef3 	bl	8000a50 <__aeabi_fsub>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002c70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4413      	add	r3, r2
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4413      	add	r3, r2
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f7fd fee3 	bl	8000a54 <__addsf3>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002c94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4413      	add	r3, r2
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	f7fd fecf 	bl	8000a50 <__aeabi_fsub>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002cb8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4413      	add	r3, r2
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f7fd febf 	bl	8000a54 <__addsf3>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002cdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f7fd feab 	bl	8000a50 <__aeabi_fsub>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002d00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4413      	add	r3, r2
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4413      	add	r3, r2
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f7fd fe9b 	bl	8000a54 <__addsf3>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002d24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4413      	add	r3, r2
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f7fd fe87 	bl	8000a50 <__aeabi_fsub>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8002d48:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8002d4c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8002d50:	f7fd fe7e 	bl	8000a50 <__aeabi_fsub>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8002d5a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8002d5e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8002d62:	f7fd fe77 	bl	8000a54 <__addsf3>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8002d6c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002d70:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8002d74:	f7fd fe6c 	bl	8000a50 <__aeabi_fsub>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8002d7e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002d82:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8002d86:	f7fd fe65 	bl	8000a54 <__addsf3>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8002d90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	18d4      	adds	r4, r2, r3
 8002d9a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8002d9e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8002da2:	f7fd fe57 	bl	8000a54 <__addsf3>
 8002da6:	4603      	mov	r3, r0
 8002da8:	6023      	str	r3, [r4, #0]
            r2 = r1 - r2;
 8002daa:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8002dae:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8002db2:	f7fd fe4d 	bl	8000a50 <__aeabi_fsub>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002dbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f7fd fe3b 	bl	8000a54 <__addsf3>
 8002dde:	4603      	mov	r3, r0
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002de2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	3304      	adds	r3, #4
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4413      	add	r3, r2
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	3304      	adds	r3, #4
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4619      	mov	r1, r3
 8002e00:	f7fd fe26 	bl	8000a50 <__aeabi_fsub>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	3304      	adds	r3, #4
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4413      	add	r3, r2
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	3304      	adds	r3, #4
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4413      	add	r3, r2
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4619      	mov	r1, r3
 8002e28:	f7fd fe14 	bl	8000a54 <__addsf3>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002e30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	3304      	adds	r3, #4
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	3304      	adds	r3, #4
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f7fd fdff 	bl	8000a50 <__aeabi_fsub>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002e58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	3304      	adds	r3, #4
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4413      	add	r3, r2
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4619      	mov	r1, r3
 8002e76:	f7fd fded 	bl	8000a54 <__addsf3>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002e80:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	3304      	adds	r3, #4
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	3304      	adds	r3, #4
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4413      	add	r3, r2
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f7fd fdd7 	bl	8000a50 <__aeabi_fsub>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002ea8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	3304      	adds	r3, #4
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f7fd fdc5 	bl	8000a54 <__addsf3>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	623b      	str	r3, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002ece:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4413      	add	r3, r2
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4619      	mov	r1, r3
 8002eec:	f7fd fdb0 	bl	8000a50 <__aeabi_fsub>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8002ef6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002efc:	f7fd fda8 	bl	8000a50 <__aeabi_fsub>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8002f06:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f0c:	f7fd fda2 	bl	8000a54 <__addsf3>
 8002f10:	4603      	mov	r3, r0
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8002f14:	6a39      	ldr	r1, [r7, #32]
 8002f16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f18:	f7fd fd9a 	bl	8000a50 <__aeabi_fsub>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8002f22:	6a39      	ldr	r1, [r7, #32]
 8002f24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f26:	f7fd fd95 	bl	8000a54 <__addsf3>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8002f2e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002f32:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002f36:	f7fd fd8d 	bl	8000a54 <__addsf3>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8002f40:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002f44:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002f48:	f7fd fd82 	bl	8000a50 <__aeabi_fsub>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8002f52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	3304      	adds	r3, #4
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	18d4      	adds	r4, r2, r3
 8002f5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f62:	f7fd fd77 	bl	8000a54 <__addsf3>
 8002f66:	4603      	mov	r3, r0
 8002f68:	6023      	str	r3, [r4, #0]
            s2 = s1 - s2;
 8002f6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f6e:	f7fd fd6f 	bl	8000a50 <__aeabi_fsub>
 8002f72:	4603      	mov	r3, r0
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8002f76:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8002f7a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002f7e:	f7fd fd67 	bl	8000a50 <__aeabi_fsub>
 8002f82:	4603      	mov	r3, r0
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8002f86:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8002f8a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002f8e:	f7fd fd61 	bl	8000a54 <__addsf3>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8002f98:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8002f9c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002f9e:	f7fd fe61 	bl	8000c64 <__aeabi_fmul>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	61fb      	str	r3, [r7, #28]
            p2 = si5 * s2;
 8002fa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fa8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002faa:	f7fd fe5b 	bl	8000c64 <__aeabi_fmul>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	61bb      	str	r3, [r7, #24]
            p3 = co5 * s2;
 8002fb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fb4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002fb6:	f7fd fe55 	bl	8000c64 <__aeabi_fmul>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	617b      	str	r3, [r7, #20]
            p4 = si5 * r2;
 8002fbe:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8002fc2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fc4:	f7fd fe4e 	bl	8000c64 <__aeabi_fmul>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	613b      	str	r3, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8002fcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	18d4      	adds	r4, r2, r3
 8002fd6:	69b9      	ldr	r1, [r7, #24]
 8002fd8:	69f8      	ldr	r0, [r7, #28]
 8002fda:	f7fd fd3b 	bl	8000a54 <__addsf3>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	6023      	str	r3, [r4, #0]
            pSrc[2 * i5 + 1] = p3 - p4;
 8002fe2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	3304      	adds	r3, #4
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	18d4      	adds	r4, r2, r3
 8002fee:	6939      	ldr	r1, [r7, #16]
 8002ff0:	6978      	ldr	r0, [r7, #20]
 8002ff2:	f7fd fd2d 	bl	8000a50 <__aeabi_fsub>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	6023      	str	r3, [r4, #0]
            p1 = co3 * r1;
 8002ffa:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8002ffe:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003000:	f7fd fe30 	bl	8000c64 <__aeabi_fmul>
 8003004:	4603      	mov	r3, r0
 8003006:	61fb      	str	r3, [r7, #28]
            p2 = si3 * s1;
 8003008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800300a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800300c:	f7fd fe2a 	bl	8000c64 <__aeabi_fmul>
 8003010:	4603      	mov	r3, r0
 8003012:	61bb      	str	r3, [r7, #24]
            p3 = co3 * s1;
 8003014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003016:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003018:	f7fd fe24 	bl	8000c64 <__aeabi_fmul>
 800301c:	4603      	mov	r3, r0
 800301e:	617b      	str	r3, [r7, #20]
            p4 = si3 * r1;
 8003020:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8003024:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003026:	f7fd fe1d 	bl	8000c64 <__aeabi_fmul>
 800302a:	4603      	mov	r3, r0
 800302c:	613b      	str	r3, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800302e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	18d4      	adds	r4, r2, r3
 8003038:	69b9      	ldr	r1, [r7, #24]
 800303a:	69f8      	ldr	r0, [r7, #28]
 800303c:	f7fd fd0a 	bl	8000a54 <__addsf3>
 8003040:	4603      	mov	r3, r0
 8003042:	6023      	str	r3, [r4, #0]
            pSrc[2 * i3 + 1] = p3 - p4;
 8003044:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	3304      	adds	r3, #4
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	18d4      	adds	r4, r2, r3
 8003050:	6939      	ldr	r1, [r7, #16]
 8003052:	6978      	ldr	r0, [r7, #20]
 8003054:	f7fd fcfc 	bl	8000a50 <__aeabi_fsub>
 8003058:	4603      	mov	r3, r0
 800305a:	6023      	str	r3, [r4, #0]
            p1 = co7 * t1;
 800305c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003060:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003062:	f7fd fdff 	bl	8000c64 <__aeabi_fmul>
 8003066:	4603      	mov	r3, r0
 8003068:	61fb      	str	r3, [r7, #28]
            p2 = si7 * t2;
 800306a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800306e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003070:	f7fd fdf8 	bl	8000c64 <__aeabi_fmul>
 8003074:	4603      	mov	r3, r0
 8003076:	61bb      	str	r3, [r7, #24]
            p3 = co7 * t2;
 8003078:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800307c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800307e:	f7fd fdf1 	bl	8000c64 <__aeabi_fmul>
 8003082:	4603      	mov	r3, r0
 8003084:	617b      	str	r3, [r7, #20]
            p4 = si7 * t1;
 8003086:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800308a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800308c:	f7fd fdea 	bl	8000c64 <__aeabi_fmul>
 8003090:	4603      	mov	r3, r0
 8003092:	613b      	str	r3, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8003094:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	18d4      	adds	r4, r2, r3
 800309e:	69b9      	ldr	r1, [r7, #24]
 80030a0:	69f8      	ldr	r0, [r7, #28]
 80030a2:	f7fd fcd7 	bl	8000a54 <__addsf3>
 80030a6:	4603      	mov	r3, r0
 80030a8:	6023      	str	r3, [r4, #0]
            pSrc[2 * i7 + 1] = p3 - p4;
 80030aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	3304      	adds	r3, #4
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	18d4      	adds	r4, r2, r3
 80030b6:	6939      	ldr	r1, [r7, #16]
 80030b8:	6978      	ldr	r0, [r7, #20]
 80030ba:	f7fd fcc9 	bl	8000a50 <__aeabi_fsub>
 80030be:	4603      	mov	r3, r0
 80030c0:	6023      	str	r3, [r4, #0]
            r1 = (r6 - r8) * C81;
 80030c2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80030c6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80030ca:	f7fd fcc1 	bl	8000a50 <__aeabi_fsub>
 80030ce:	4603      	mov	r3, r0
 80030d0:	4619      	mov	r1, r3
 80030d2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80030d6:	f7fd fdc5 	bl	8000c64 <__aeabi_fmul>
 80030da:	4603      	mov	r3, r0
 80030dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 80030e0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80030e4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80030e8:	f7fd fcb4 	bl	8000a54 <__addsf3>
 80030ec:	4603      	mov	r3, r0
 80030ee:	4619      	mov	r1, r3
 80030f0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80030f4:	f7fd fdb6 	bl	8000c64 <__aeabi_fmul>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 80030fe:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003102:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003106:	f7fd fca3 	bl	8000a50 <__aeabi_fsub>
 800310a:	4603      	mov	r3, r0
 800310c:	4619      	mov	r1, r3
 800310e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8003112:	f7fd fda7 	bl	8000c64 <__aeabi_fmul>
 8003116:	4603      	mov	r3, r0
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800311a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800311e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003122:	f7fd fc97 	bl	8000a54 <__addsf3>
 8003126:	4603      	mov	r3, r0
 8003128:	4619      	mov	r1, r3
 800312a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800312e:	f7fd fd99 	bl	8000c64 <__aeabi_fmul>
 8003132:	4603      	mov	r3, r0
 8003134:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8003138:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800313c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8003140:	f7fd fc86 	bl	8000a50 <__aeabi_fsub>
 8003144:	4603      	mov	r3, r0
 8003146:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800314a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800314e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8003152:	f7fd fc7f 	bl	8000a54 <__addsf3>
 8003156:	4603      	mov	r3, r0
 8003158:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800315c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003160:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003164:	f7fd fc74 	bl	8000a50 <__aeabi_fsub>
 8003168:	4603      	mov	r3, r0
 800316a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800316e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003172:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003176:	f7fd fc6d 	bl	8000a54 <__addsf3>
 800317a:	4603      	mov	r3, r0
 800317c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8003180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003182:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003186:	f7fd fc63 	bl	8000a50 <__aeabi_fsub>
 800318a:	4603      	mov	r3, r0
 800318c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8003190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003192:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003196:	f7fd fc5d 	bl	8000a54 <__addsf3>
 800319a:	4603      	mov	r3, r0
 800319c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            s8 = s7 - s6;
 80031a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031a4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80031a8:	f7fd fc52 	bl	8000a50 <__aeabi_fsub>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            s7 = s7 + s6;
 80031b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031b6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80031ba:	f7fd fc4b 	bl	8000a54 <__addsf3>
 80031be:	4603      	mov	r3, r0
 80031c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            r1 = r5 + s7;
 80031c4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80031c8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80031cc:	f7fd fc42 	bl	8000a54 <__addsf3>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 80031d6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80031da:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80031de:	f7fd fc37 	bl	8000a50 <__aeabi_fsub>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 80031e8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80031ec:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80031f0:	f7fd fc30 	bl	8000a54 <__addsf3>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            t1 = t1 - s8;
 80031fa:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80031fe:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8003202:	f7fd fc25 	bl	8000a50 <__aeabi_fsub>
 8003206:	4603      	mov	r3, r0
 8003208:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            s1 = s5 - r7;
 800320c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003210:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003214:	f7fd fc1c 	bl	8000a50 <__aeabi_fsub>
 8003218:	4603      	mov	r3, r0
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800321c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003220:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003224:	f7fd fc16 	bl	8000a54 <__addsf3>
 8003228:	4603      	mov	r3, r0
 800322a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            s6 = t2 - r8;
 800322e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8003232:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8003236:	f7fd fc0b 	bl	8000a50 <__aeabi_fsub>
 800323a:	4603      	mov	r3, r0
 800323c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8003240:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8003244:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8003248:	f7fd fc04 	bl	8000a54 <__addsf3>
 800324c:	4603      	mov	r3, r0
 800324e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8003252:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8003256:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003258:	f7fd fd04 	bl	8000c64 <__aeabi_fmul>
 800325c:	4603      	mov	r3, r0
 800325e:	61fb      	str	r3, [r7, #28]
            p2 = si2 * s1;
 8003260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003262:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003264:	f7fd fcfe 	bl	8000c64 <__aeabi_fmul>
 8003268:	4603      	mov	r3, r0
 800326a:	61bb      	str	r3, [r7, #24]
            p3 = co2 * s1;
 800326c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800326e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003270:	f7fd fcf8 	bl	8000c64 <__aeabi_fmul>
 8003274:	4603      	mov	r3, r0
 8003276:	617b      	str	r3, [r7, #20]
            p4 = si2 * r1;
 8003278:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800327c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800327e:	f7fd fcf1 	bl	8000c64 <__aeabi_fmul>
 8003282:	4603      	mov	r3, r0
 8003284:	613b      	str	r3, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8003286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	18d4      	adds	r4, r2, r3
 8003290:	69b9      	ldr	r1, [r7, #24]
 8003292:	69f8      	ldr	r0, [r7, #28]
 8003294:	f7fd fbde 	bl	8000a54 <__addsf3>
 8003298:	4603      	mov	r3, r0
 800329a:	6023      	str	r3, [r4, #0]
            pSrc[2 * i2 + 1] = p3 - p4;
 800329c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	3304      	adds	r3, #4
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	18d4      	adds	r4, r2, r3
 80032a8:	6939      	ldr	r1, [r7, #16]
 80032aa:	6978      	ldr	r0, [r7, #20]
 80032ac:	f7fd fbd0 	bl	8000a50 <__aeabi_fsub>
 80032b0:	4603      	mov	r3, r0
 80032b2:	6023      	str	r3, [r4, #0]
            p1 = co8 * r5;
 80032b4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80032b8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80032ba:	f7fd fcd3 	bl	8000c64 <__aeabi_fmul>
 80032be:	4603      	mov	r3, r0
 80032c0:	61fb      	str	r3, [r7, #28]
            p2 = si8 * s5;
 80032c2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80032c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032c8:	f7fd fccc 	bl	8000c64 <__aeabi_fmul>
 80032cc:	4603      	mov	r3, r0
 80032ce:	61bb      	str	r3, [r7, #24]
            p3 = co8 * s5;
 80032d0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80032d4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80032d6:	f7fd fcc5 	bl	8000c64 <__aeabi_fmul>
 80032da:	4603      	mov	r3, r0
 80032dc:	617b      	str	r3, [r7, #20]
            p4 = si8 * r5;
 80032de:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80032e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032e4:	f7fd fcbe 	bl	8000c64 <__aeabi_fmul>
 80032e8:	4603      	mov	r3, r0
 80032ea:	613b      	str	r3, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 80032ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	18d4      	adds	r4, r2, r3
 80032f6:	69b9      	ldr	r1, [r7, #24]
 80032f8:	69f8      	ldr	r0, [r7, #28]
 80032fa:	f7fd fbab 	bl	8000a54 <__addsf3>
 80032fe:	4603      	mov	r3, r0
 8003300:	6023      	str	r3, [r4, #0]
            pSrc[2 * i8 + 1] = p3 - p4;
 8003302:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	3304      	adds	r3, #4
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	18d4      	adds	r4, r2, r3
 800330e:	6939      	ldr	r1, [r7, #16]
 8003310:	6978      	ldr	r0, [r7, #20]
 8003312:	f7fd fb9d 	bl	8000a50 <__aeabi_fsub>
 8003316:	4603      	mov	r3, r0
 8003318:	6023      	str	r3, [r4, #0]
            p1 = co6 * r6;
 800331a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800331e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003320:	f7fd fca0 	bl	8000c64 <__aeabi_fmul>
 8003324:	4603      	mov	r3, r0
 8003326:	61fb      	str	r3, [r7, #28]
            p2 = si6 * s6;
 8003328:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800332c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800332e:	f7fd fc99 	bl	8000c64 <__aeabi_fmul>
 8003332:	4603      	mov	r3, r0
 8003334:	61bb      	str	r3, [r7, #24]
            p3 = co6 * s6;
 8003336:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800333a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800333c:	f7fd fc92 	bl	8000c64 <__aeabi_fmul>
 8003340:	4603      	mov	r3, r0
 8003342:	617b      	str	r3, [r7, #20]
            p4 = si6 * r6;
 8003344:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003348:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800334a:	f7fd fc8b 	bl	8000c64 <__aeabi_fmul>
 800334e:	4603      	mov	r3, r0
 8003350:	613b      	str	r3, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8003352:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	18d4      	adds	r4, r2, r3
 800335c:	69b9      	ldr	r1, [r7, #24]
 800335e:	69f8      	ldr	r0, [r7, #28]
 8003360:	f7fd fb78 	bl	8000a54 <__addsf3>
 8003364:	4603      	mov	r3, r0
 8003366:	6023      	str	r3, [r4, #0]
            pSrc[2 * i6 + 1] = p3 - p4;
 8003368:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	3304      	adds	r3, #4
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	18d4      	adds	r4, r2, r3
 8003374:	6939      	ldr	r1, [r7, #16]
 8003376:	6978      	ldr	r0, [r7, #20]
 8003378:	f7fd fb6a 	bl	8000a50 <__aeabi_fsub>
 800337c:	4603      	mov	r3, r0
 800337e:	6023      	str	r3, [r4, #0]
            p1 = co4 * t1;
 8003380:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003384:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003386:	f7fd fc6d 	bl	8000c64 <__aeabi_fmul>
 800338a:	4603      	mov	r3, r0
 800338c:	61fb      	str	r3, [r7, #28]
            p2 = si4 * t2;
 800338e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003392:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003394:	f7fd fc66 	bl	8000c64 <__aeabi_fmul>
 8003398:	4603      	mov	r3, r0
 800339a:	61bb      	str	r3, [r7, #24]
            p3 = co4 * t2;
 800339c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80033a0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80033a2:	f7fd fc5f 	bl	8000c64 <__aeabi_fmul>
 80033a6:	4603      	mov	r3, r0
 80033a8:	617b      	str	r3, [r7, #20]
            p4 = si4 * t1;
 80033aa:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80033ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80033b0:	f7fd fc58 	bl	8000c64 <__aeabi_fmul>
 80033b4:	4603      	mov	r3, r0
 80033b6:	613b      	str	r3, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 80033b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	18d4      	adds	r4, r2, r3
 80033c2:	69b9      	ldr	r1, [r7, #24]
 80033c4:	69f8      	ldr	r0, [r7, #28]
 80033c6:	f7fd fb45 	bl	8000a54 <__addsf3>
 80033ca:	4603      	mov	r3, r0
 80033cc:	6023      	str	r3, [r4, #0]
            pSrc[2 * i4 + 1] = p3 - p4;
 80033ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	3304      	adds	r3, #4
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	18d4      	adds	r4, r2, r3
 80033da:	6939      	ldr	r1, [r7, #16]
 80033dc:	6978      	ldr	r0, [r7, #20]
 80033de:	f7fd fb37 	bl	8000a50 <__aeabi_fsub>
 80033e2:	4603      	mov	r3, r0
 80033e4:	6023      	str	r3, [r4, #0]
            
            i1 += n1;
 80033e6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80033ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033ee:	4413      	add	r3, r2
 80033f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 80033f4:	897b      	ldrh	r3, [r7, #10]
 80033f6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80033fa:	429a      	cmp	r2, r3
 80033fc:	f4ff abe3 	bcc.w	8002bc6 <arm_radix8_butterfly_f32+0x77e>
         
         j++;
 8003400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003404:	3301      	adds	r3, #1
 8003406:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 800340a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800340e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003412:	429a      	cmp	r2, r3
 8003414:	f4ff ab55 	bcc.w	8002ac2 <arm_radix8_butterfly_f32+0x67a>
      
      twidCoefModifier <<= 3;
 8003418:	893b      	ldrh	r3, [r7, #8]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 800341e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003422:	2b07      	cmp	r3, #7
 8003424:	f63f a820 	bhi.w	8002468 <arm_radix8_butterfly_f32+0x20>
}
 8003428:	e000      	b.n	800342c <arm_radix8_butterfly_f32+0xfe4>
         break;
 800342a:	bf00      	nop
}
 800342c:	bf00      	nop
 800342e:	37f4      	adds	r7, #244	; 0xf4
 8003430:	46bd      	mov	sp, r7
 8003432:	bd90      	pop	{r4, r7, pc}

08003434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003438:	4b08      	ldr	r3, [pc, #32]	; (800345c <HAL_Init+0x28>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a07      	ldr	r2, [pc, #28]	; (800345c <HAL_Init+0x28>)
 800343e:	f043 0310 	orr.w	r3, r3, #16
 8003442:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003444:	2003      	movs	r0, #3
 8003446:	f000 fb4b 	bl	8003ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800344a:	2000      	movs	r0, #0
 800344c:	f000 f808 	bl	8003460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003450:	f002 fa6e 	bl	8005930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40022000 	.word	0x40022000

08003460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003468:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <HAL_InitTick+0x54>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <HAL_InitTick+0x58>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	4619      	mov	r1, r3
 8003472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003476:	fbb3 f3f1 	udiv	r3, r3, r1
 800347a:	fbb2 f3f3 	udiv	r3, r2, r3
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fb63 	bl	8003b4a <HAL_SYSTICK_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e00e      	b.n	80034ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b0f      	cmp	r3, #15
 8003492:	d80a      	bhi.n	80034aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003494:	2200      	movs	r2, #0
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800349c:	f000 fb2b 	bl	8003af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034a0:	4a06      	ldr	r2, [pc, #24]	; (80034bc <HAL_InitTick+0x5c>)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e000      	b.n	80034ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000014 	.word	0x20000014
 80034b8:	20000004 	.word	0x20000004
 80034bc:	20000000 	.word	0x20000000

080034c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034c4:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_IncTick+0x1c>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <HAL_IncTick+0x20>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4413      	add	r3, r2
 80034d0:	4a03      	ldr	r2, [pc, #12]	; (80034e0 <HAL_IncTick+0x20>)
 80034d2:	6013      	str	r3, [r2, #0]
}
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	20000004 	.word	0x20000004
 80034e0:	200001a4 	.word	0x200001a4

080034e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return uwTick;
 80034e8:	4b02      	ldr	r3, [pc, #8]	; (80034f4 <HAL_GetTick+0x10>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	200001a4 	.word	0x200001a4

080034f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003500:	f7ff fff0 	bl	80034e4 <HAL_GetTick>
 8003504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003510:	d005      	beq.n	800351e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003512:	4b09      	ldr	r3, [pc, #36]	; (8003538 <HAL_Delay+0x40>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4413      	add	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800351e:	bf00      	nop
 8003520:	f7ff ffe0 	bl	80034e4 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	429a      	cmp	r2, r3
 800352e:	d8f7      	bhi.n	8003520 <HAL_Delay+0x28>
  {
  }
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000004 	.word	0x20000004

0800353c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e0be      	b.n	80036dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	2b00      	cmp	r3, #0
 800356a:	d109      	bne.n	8003580 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f002 fa0a 	bl	8005994 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f9ab 	bl	80038dc <ADC_ConversionStop_Disable>
 8003586:	4603      	mov	r3, r0
 8003588:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b00      	cmp	r3, #0
 8003594:	f040 8099 	bne.w	80036ca <HAL_ADC_Init+0x18e>
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f040 8095 	bne.w	80036ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035a8:	f023 0302 	bic.w	r3, r3, #2
 80035ac:	f043 0202 	orr.w	r2, r3, #2
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80035bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80035c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d4:	d003      	beq.n	80035de <HAL_ADC_Init+0xa2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d102      	bne.n	80035e4 <HAL_ADC_Init+0xa8>
 80035de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035e2:	e000      	b.n	80035e6 <HAL_ADC_Init+0xaa>
 80035e4:	2300      	movs	r3, #0
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d119      	bne.n	8003628 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d109      	bne.n	8003610 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	3b01      	subs	r3, #1
 8003602:	035a      	lsls	r2, r3, #13
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	e00b      	b.n	8003628 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	f043 0220 	orr.w	r2, r3, #32
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	f043 0201 	orr.w	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	430a      	orrs	r2, r1
 800363a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <HAL_ADC_Init+0x1a8>)
 8003644:	4013      	ands	r3, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	430b      	orrs	r3, r1
 800364e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003658:	d003      	beq.n	8003662 <HAL_ADC_Init+0x126>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d104      	bne.n	800366c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	3b01      	subs	r3, #1
 8003668:	051b      	lsls	r3, r3, #20
 800366a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	430a      	orrs	r2, r1
 800367e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <HAL_ADC_Init+0x1ac>)
 8003688:	4013      	ands	r3, r2
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	429a      	cmp	r2, r3
 800368e:	d10b      	bne.n	80036a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	f023 0303 	bic.w	r3, r3, #3
 800369e:	f043 0201 	orr.w	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80036a6:	e018      	b.n	80036da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	f023 0312 	bic.w	r3, r3, #18
 80036b0:	f043 0210 	orr.w	r2, r3, #16
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	f043 0201 	orr.w	r2, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80036c8:	e007      	b.n	80036da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	f043 0210 	orr.w	r2, r3, #16
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80036da:	7dfb      	ldrb	r3, [r7, #23]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	ffe1f7fd 	.word	0xffe1f7fd
 80036e8:	ff1f0efe 	.word	0xff1f0efe

080036ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_ADC_ConfigChannel+0x20>
 8003708:	2302      	movs	r3, #2
 800370a:	e0dc      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x1da>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b06      	cmp	r3, #6
 800371a:	d81c      	bhi.n	8003756 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	3b05      	subs	r3, #5
 800372e:	221f      	movs	r2, #31
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	4019      	ands	r1, r3
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	3b05      	subs	r3, #5
 8003748:	fa00 f203 	lsl.w	r2, r0, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	635a      	str	r2, [r3, #52]	; 0x34
 8003754:	e03c      	b.n	80037d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b0c      	cmp	r3, #12
 800375c:	d81c      	bhi.n	8003798 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	3b23      	subs	r3, #35	; 0x23
 8003770:	221f      	movs	r2, #31
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	4019      	ands	r1, r3
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	3b23      	subs	r3, #35	; 0x23
 800378a:	fa00 f203 	lsl.w	r2, r0, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
 8003796:	e01b      	b.n	80037d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	3b41      	subs	r3, #65	; 0x41
 80037aa:	221f      	movs	r2, #31
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	4019      	ands	r1, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	3b41      	subs	r3, #65	; 0x41
 80037c4:	fa00 f203 	lsl.w	r2, r0, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b09      	cmp	r3, #9
 80037d6:	d91c      	bls.n	8003812 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68d9      	ldr	r1, [r3, #12]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4613      	mov	r3, r2
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	4413      	add	r3, r2
 80037e8:	3b1e      	subs	r3, #30
 80037ea:	2207      	movs	r2, #7
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	4019      	ands	r1, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	6898      	ldr	r0, [r3, #8]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	3b1e      	subs	r3, #30
 8003804:	fa00 f203 	lsl.w	r2, r0, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	60da      	str	r2, [r3, #12]
 8003810:	e019      	b.n	8003846 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6919      	ldr	r1, [r3, #16]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4413      	add	r3, r2
 8003822:	2207      	movs	r2, #7
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	4019      	ands	r1, r3
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	6898      	ldr	r0, [r3, #8]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4413      	add	r3, r2
 800383a:	fa00 f203 	lsl.w	r2, r0, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b10      	cmp	r3, #16
 800384c:	d003      	beq.n	8003856 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003852:	2b11      	cmp	r3, #17
 8003854:	d132      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1d      	ldr	r2, [pc, #116]	; (80038d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d125      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d126      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800387c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b10      	cmp	r3, #16
 8003884:	d11a      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003886:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	0c9a      	lsrs	r2, r3, #18
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800389c:	e002      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f9      	bne.n	800389e <HAL_ADC_ConfigChannel+0x1b2>
 80038aa:	e007      	b.n	80038bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	f043 0220 	orr.w	r2, r3, #32
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr
 80038d0:	40012400 	.word	0x40012400
 80038d4:	20000014 	.word	0x20000014
 80038d8:	431bde83 	.word	0x431bde83

080038dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d127      	bne.n	8003946 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003906:	f7ff fded 	bl	80034e4 <HAL_GetTick>
 800390a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800390c:	e014      	b.n	8003938 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800390e:	f7ff fde9 	bl	80034e4 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d90d      	bls.n	8003938 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	f043 0210 	orr.w	r2, r3, #16
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	f043 0201 	orr.w	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e007      	b.n	8003948 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b01      	cmp	r3, #1
 8003944:	d0e3      	beq.n	800390e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003960:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <NVIC_SetPriorityGrouping+0x44>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800396c:	4013      	ands	r3, r2
 800396e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800397c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003982:	4a04      	ldr	r2, [pc, #16]	; (8003994 <NVIC_SetPriorityGrouping+0x44>)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	60d3      	str	r3, [r2, #12]
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800399c:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <NVIC_GetPriorityGrouping+0x18>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	0a1b      	lsrs	r3, r3, #8
 80039a2:	f003 0307 	and.w	r3, r3, #7
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	e000ed00 	.word	0xe000ed00

080039b4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	f003 021f 	and.w	r2, r3, #31
 80039c4:	4906      	ldr	r1, [pc, #24]	; (80039e0 <NVIC_EnableIRQ+0x2c>)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2001      	movs	r0, #1
 80039ce:	fa00 f202 	lsl.w	r2, r0, r2
 80039d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr
 80039e0:	e000e100 	.word	0xe000e100

080039e4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	6039      	str	r1, [r7, #0]
 80039ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80039f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	da0b      	bge.n	8003a10 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	490c      	ldr	r1, [pc, #48]	; (8003a30 <NVIC_SetPriority+0x4c>)
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	3b04      	subs	r3, #4
 8003a06:	0112      	lsls	r2, r2, #4
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a0e:	e009      	b.n	8003a24 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	4907      	ldr	r1, [pc, #28]	; (8003a34 <NVIC_SetPriority+0x50>)
 8003a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1a:	0112      	lsls	r2, r2, #4
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	440b      	add	r3, r1
 8003a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	e000ed00 	.word	0xe000ed00
 8003a34:	e000e100 	.word	0xe000e100

08003a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b089      	sub	sp, #36	; 0x24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f1c3 0307 	rsb	r3, r3, #7
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	bf28      	it	cs
 8003a56:	2304      	movcs	r3, #4
 8003a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	2b06      	cmp	r3, #6
 8003a60:	d902      	bls.n	8003a68 <NVIC_EncodePriority+0x30>
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3b03      	subs	r3, #3
 8003a66:	e000      	b.n	8003a6a <NVIC_EncodePriority+0x32>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	43da      	mvns	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8a:	43d9      	mvns	r1, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a90:	4313      	orrs	r3, r2
         );
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3724      	adds	r7, #36	; 0x24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr

08003a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aac:	d301      	bcc.n	8003ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e00f      	b.n	8003ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ab2:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <SysTick_Config+0x40>)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aba:	210f      	movs	r1, #15
 8003abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ac0:	f7ff ff90 	bl	80039e4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <SysTick_Config+0x40>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aca:	4b04      	ldr	r3, [pc, #16]	; (8003adc <SysTick_Config+0x40>)
 8003acc:	2207      	movs	r2, #7
 8003ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	e000e010 	.word	0xe000e010

08003ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff ff31 	bl	8003950 <NVIC_SetPriorityGrouping>
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b086      	sub	sp, #24
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	4603      	mov	r3, r0
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	607a      	str	r2, [r7, #4]
 8003b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b08:	f7ff ff46 	bl	8003998 <NVIC_GetPriorityGrouping>
 8003b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	6978      	ldr	r0, [r7, #20]
 8003b14:	f7ff ff90 	bl	8003a38 <NVIC_EncodePriority>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b1e:	4611      	mov	r1, r2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff ff5f 	bl	80039e4 <NVIC_SetPriority>
}
 8003b26:	bf00      	nop
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	4603      	mov	r3, r0
 8003b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff ff39 	bl	80039b4 <NVIC_EnableIRQ>
}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff ffa2 	bl	8003a9c <SysTick_Config>
 8003b58:	4603      	mov	r3, r0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e043      	b.n	8003c02 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4b22      	ldr	r3, [pc, #136]	; (8003c0c <HAL_DMA_Init+0xa8>)
 8003b82:	4413      	add	r3, r2
 8003b84:	4a22      	ldr	r2, [pc, #136]	; (8003c10 <HAL_DMA_Init+0xac>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	091b      	lsrs	r3, r3, #4
 8003b8c:	009a      	lsls	r2, r3, #2
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a1f      	ldr	r2, [pc, #124]	; (8003c14 <HAL_DMA_Init+0xb0>)
 8003b96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003bae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003bb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr
 8003c0c:	bffdfff8 	.word	0xbffdfff8
 8003c10:	cccccccd 	.word	0xcccccccd
 8003c14:	40020000 	.word	0x40020000

08003c18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	2204      	movs	r2, #4
 8003c36:	409a      	lsls	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d04f      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0xc8>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d04a      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d107      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0204 	bic.w	r2, r2, #4
 8003c66:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a66      	ldr	r2, [pc, #408]	; (8003e08 <HAL_DMA_IRQHandler+0x1f0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d029      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xae>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a65      	ldr	r2, [pc, #404]	; (8003e0c <HAL_DMA_IRQHandler+0x1f4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d022      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xaa>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a63      	ldr	r2, [pc, #396]	; (8003e10 <HAL_DMA_IRQHandler+0x1f8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01a      	beq.n	8003cbc <HAL_DMA_IRQHandler+0xa4>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a62      	ldr	r2, [pc, #392]	; (8003e14 <HAL_DMA_IRQHandler+0x1fc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d012      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x9e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a60      	ldr	r2, [pc, #384]	; (8003e18 <HAL_DMA_IRQHandler+0x200>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00a      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x98>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a5f      	ldr	r2, [pc, #380]	; (8003e1c <HAL_DMA_IRQHandler+0x204>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d102      	bne.n	8003caa <HAL_DMA_IRQHandler+0x92>
 8003ca4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ca8:	e00e      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xb0>
 8003caa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003cae:	e00b      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xb0>
 8003cb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cb4:	e008      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xb0>
 8003cb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cba:	e005      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xb0>
 8003cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cc0:	e002      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xb0>
 8003cc2:	2340      	movs	r3, #64	; 0x40
 8003cc4:	e000      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xb0>
 8003cc6:	2304      	movs	r3, #4
 8003cc8:	4a55      	ldr	r2, [pc, #340]	; (8003e20 <HAL_DMA_IRQHandler+0x208>)
 8003cca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8094 	beq.w	8003dfe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003cde:	e08e      	b.n	8003dfe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d056      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x186>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d051      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10b      	bne.n	8003d20 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 020a 	bic.w	r2, r2, #10
 8003d16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a38      	ldr	r2, [pc, #224]	; (8003e08 <HAL_DMA_IRQHandler+0x1f0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d029      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x166>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a37      	ldr	r2, [pc, #220]	; (8003e0c <HAL_DMA_IRQHandler+0x1f4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d022      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x162>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a35      	ldr	r2, [pc, #212]	; (8003e10 <HAL_DMA_IRQHandler+0x1f8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d01a      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x15c>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a34      	ldr	r2, [pc, #208]	; (8003e14 <HAL_DMA_IRQHandler+0x1fc>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d012      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x156>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a32      	ldr	r2, [pc, #200]	; (8003e18 <HAL_DMA_IRQHandler+0x200>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00a      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x150>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a31      	ldr	r2, [pc, #196]	; (8003e1c <HAL_DMA_IRQHandler+0x204>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d102      	bne.n	8003d62 <HAL_DMA_IRQHandler+0x14a>
 8003d5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d60:	e00e      	b.n	8003d80 <HAL_DMA_IRQHandler+0x168>
 8003d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d66:	e00b      	b.n	8003d80 <HAL_DMA_IRQHandler+0x168>
 8003d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d6c:	e008      	b.n	8003d80 <HAL_DMA_IRQHandler+0x168>
 8003d6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d72:	e005      	b.n	8003d80 <HAL_DMA_IRQHandler+0x168>
 8003d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d78:	e002      	b.n	8003d80 <HAL_DMA_IRQHandler+0x168>
 8003d7a:	2320      	movs	r3, #32
 8003d7c:	e000      	b.n	8003d80 <HAL_DMA_IRQHandler+0x168>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	4a27      	ldr	r2, [pc, #156]	; (8003e20 <HAL_DMA_IRQHandler+0x208>)
 8003d82:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d034      	beq.n	8003dfe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d9c:	e02f      	b.n	8003dfe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	2208      	movs	r2, #8
 8003da4:	409a      	lsls	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d028      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x1e8>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d023      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 020e 	bic.w	r2, r2, #14
 8003dc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d004      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
    }
  }
  return;
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
}
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40020008 	.word	0x40020008
 8003e0c:	4002001c 	.word	0x4002001c
 8003e10:	40020030 	.word	0x40020030
 8003e14:	40020044 	.word	0x40020044
 8003e18:	40020058 	.word	0x40020058
 8003e1c:	4002006c 	.word	0x4002006c
 8003e20:	40020000 	.word	0x40020000

08003e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b08b      	sub	sp, #44	; 0x2c
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8003e42:	2300      	movs	r3, #0
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
 8003e46:	e127      	b.n	8004098 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8003e48:	2201      	movs	r2, #1
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	f040 8116 	bne.w	8004092 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b12      	cmp	r3, #18
 8003e6c:	d034      	beq.n	8003ed8 <HAL_GPIO_Init+0xb4>
 8003e6e:	2b12      	cmp	r3, #18
 8003e70:	d80d      	bhi.n	8003e8e <HAL_GPIO_Init+0x6a>
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d02b      	beq.n	8003ece <HAL_GPIO_Init+0xaa>
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d804      	bhi.n	8003e84 <HAL_GPIO_Init+0x60>
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d031      	beq.n	8003ee2 <HAL_GPIO_Init+0xbe>
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d01c      	beq.n	8003ebc <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e82:	e048      	b.n	8003f16 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d043      	beq.n	8003f10 <HAL_GPIO_Init+0xec>
 8003e88:	2b11      	cmp	r3, #17
 8003e8a:	d01b      	beq.n	8003ec4 <HAL_GPIO_Init+0xa0>
          break;
 8003e8c:	e043      	b.n	8003f16 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8003e8e:	4a87      	ldr	r2, [pc, #540]	; (80040ac <HAL_GPIO_Init+0x288>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d026      	beq.n	8003ee2 <HAL_GPIO_Init+0xbe>
 8003e94:	4a85      	ldr	r2, [pc, #532]	; (80040ac <HAL_GPIO_Init+0x288>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d806      	bhi.n	8003ea8 <HAL_GPIO_Init+0x84>
 8003e9a:	4a85      	ldr	r2, [pc, #532]	; (80040b0 <HAL_GPIO_Init+0x28c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d020      	beq.n	8003ee2 <HAL_GPIO_Init+0xbe>
 8003ea0:	4a84      	ldr	r2, [pc, #528]	; (80040b4 <HAL_GPIO_Init+0x290>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d01d      	beq.n	8003ee2 <HAL_GPIO_Init+0xbe>
          break;
 8003ea6:	e036      	b.n	8003f16 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8003ea8:	4a83      	ldr	r2, [pc, #524]	; (80040b8 <HAL_GPIO_Init+0x294>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d019      	beq.n	8003ee2 <HAL_GPIO_Init+0xbe>
 8003eae:	4a83      	ldr	r2, [pc, #524]	; (80040bc <HAL_GPIO_Init+0x298>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d016      	beq.n	8003ee2 <HAL_GPIO_Init+0xbe>
 8003eb4:	4a82      	ldr	r2, [pc, #520]	; (80040c0 <HAL_GPIO_Init+0x29c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d013      	beq.n	8003ee2 <HAL_GPIO_Init+0xbe>
          break;
 8003eba:	e02c      	b.n	8003f16 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	623b      	str	r3, [r7, #32]
          break;
 8003ec2:	e028      	b.n	8003f16 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	623b      	str	r3, [r7, #32]
          break;
 8003ecc:	e023      	b.n	8003f16 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	623b      	str	r3, [r7, #32]
          break;
 8003ed6:	e01e      	b.n	8003f16 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	330c      	adds	r3, #12
 8003ede:	623b      	str	r3, [r7, #32]
          break;
 8003ee0:	e019      	b.n	8003f16 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d102      	bne.n	8003ef0 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003eea:	2304      	movs	r3, #4
 8003eec:	623b      	str	r3, [r7, #32]
          break;
 8003eee:	e012      	b.n	8003f16 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d105      	bne.n	8003f04 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ef8:	2308      	movs	r3, #8
 8003efa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	611a      	str	r2, [r3, #16]
          break;
 8003f02:	e008      	b.n	8003f16 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f04:	2308      	movs	r3, #8
 8003f06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	615a      	str	r2, [r3, #20]
          break;
 8003f0e:	e002      	b.n	8003f16 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f10:	2300      	movs	r3, #0
 8003f12:	623b      	str	r3, [r7, #32]
          break;
 8003f14:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2bff      	cmp	r3, #255	; 0xff
 8003f1a:	d801      	bhi.n	8003f20 <HAL_GPIO_Init+0xfc>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	e001      	b.n	8003f24 <HAL_GPIO_Init+0x100>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2bff      	cmp	r3, #255	; 0xff
 8003f2a:	d802      	bhi.n	8003f32 <HAL_GPIO_Init+0x10e>
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	e002      	b.n	8003f38 <HAL_GPIO_Init+0x114>
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	3b08      	subs	r3, #8
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	210f      	movs	r1, #15
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	fa01 f303 	lsl.w	r3, r1, r3
 8003f46:	43db      	mvns	r3, r3
 8003f48:	401a      	ands	r2, r3
 8003f4a:	6a39      	ldr	r1, [r7, #32]
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f52:	431a      	orrs	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8096 	beq.w	8004092 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f66:	4b57      	ldr	r3, [pc, #348]	; (80040c4 <HAL_GPIO_Init+0x2a0>)
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	4a56      	ldr	r2, [pc, #344]	; (80040c4 <HAL_GPIO_Init+0x2a0>)
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	6193      	str	r3, [r2, #24]
 8003f72:	4b54      	ldr	r3, [pc, #336]	; (80040c4 <HAL_GPIO_Init+0x2a0>)
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8003f7e:	4a52      	ldr	r2, [pc, #328]	; (80040c8 <HAL_GPIO_Init+0x2a4>)
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	089b      	lsrs	r3, r3, #2
 8003f84:	3302      	adds	r3, #2
 8003f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f8a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	220f      	movs	r2, #15
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a49      	ldr	r2, [pc, #292]	; (80040cc <HAL_GPIO_Init+0x2a8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <HAL_GPIO_Init+0x1ae>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a48      	ldr	r2, [pc, #288]	; (80040d0 <HAL_GPIO_Init+0x2ac>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00d      	beq.n	8003fce <HAL_GPIO_Init+0x1aa>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a47      	ldr	r2, [pc, #284]	; (80040d4 <HAL_GPIO_Init+0x2b0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <HAL_GPIO_Init+0x1a6>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a46      	ldr	r2, [pc, #280]	; (80040d8 <HAL_GPIO_Init+0x2b4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d101      	bne.n	8003fc6 <HAL_GPIO_Init+0x1a2>
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e006      	b.n	8003fd4 <HAL_GPIO_Init+0x1b0>
 8003fc6:	2304      	movs	r3, #4
 8003fc8:	e004      	b.n	8003fd4 <HAL_GPIO_Init+0x1b0>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e002      	b.n	8003fd4 <HAL_GPIO_Init+0x1b0>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <HAL_GPIO_Init+0x1b0>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd6:	f002 0203 	and.w	r2, r2, #3
 8003fda:	0092      	lsls	r2, r2, #2
 8003fdc:	4093      	lsls	r3, r2
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8003fe4:	4938      	ldr	r1, [pc, #224]	; (80040c8 <HAL_GPIO_Init+0x2a4>)
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	089b      	lsrs	r3, r3, #2
 8003fea:	3302      	adds	r3, #2
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d006      	beq.n	800400c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ffe:	4b37      	ldr	r3, [pc, #220]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4936      	ldr	r1, [pc, #216]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]
 800400a:	e006      	b.n	800401a <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800400c:	4b33      	ldr	r3, [pc, #204]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	43db      	mvns	r3, r3
 8004014:	4931      	ldr	r1, [pc, #196]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 8004016:	4013      	ands	r3, r2
 8004018:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d006      	beq.n	8004034 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004026:	4b2d      	ldr	r3, [pc, #180]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	492c      	ldr	r1, [pc, #176]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	4313      	orrs	r3, r2
 8004030:	604b      	str	r3, [r1, #4]
 8004032:	e006      	b.n	8004042 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004034:	4b29      	ldr	r3, [pc, #164]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	43db      	mvns	r3, r3
 800403c:	4927      	ldr	r1, [pc, #156]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 800403e:	4013      	ands	r3, r2
 8004040:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d006      	beq.n	800405c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800404e:	4b23      	ldr	r3, [pc, #140]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	4922      	ldr	r1, [pc, #136]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
 800405a:	e006      	b.n	800406a <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800405c:	4b1f      	ldr	r3, [pc, #124]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	43db      	mvns	r3, r3
 8004064:	491d      	ldr	r1, [pc, #116]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 8004066:	4013      	ands	r3, r2
 8004068:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d006      	beq.n	8004084 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004076:	4b19      	ldr	r3, [pc, #100]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	4918      	ldr	r1, [pc, #96]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	4313      	orrs	r3, r2
 8004080:	60cb      	str	r3, [r1, #12]
 8004082:	e006      	b.n	8004092 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004084:	4b15      	ldr	r3, [pc, #84]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	43db      	mvns	r3, r3
 800408c:	4913      	ldr	r1, [pc, #76]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 800408e:	4013      	ands	r3, r2
 8004090:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	3301      	adds	r3, #1
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	2b0f      	cmp	r3, #15
 800409c:	f67f aed4 	bls.w	8003e48 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80040a0:	bf00      	nop
 80040a2:	372c      	adds	r7, #44	; 0x2c
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	10210000 	.word	0x10210000
 80040b0:	10110000 	.word	0x10110000
 80040b4:	10120000 	.word	0x10120000
 80040b8:	10310000 	.word	0x10310000
 80040bc:	10320000 	.word	0x10320000
 80040c0:	10220000 	.word	0x10220000
 80040c4:	40021000 	.word	0x40021000
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40010800 	.word	0x40010800
 80040d0:	40010c00 	.word	0x40010c00
 80040d4:	40011000 	.word	0x40011000
 80040d8:	40011400 	.word	0x40011400
 80040dc:	40010400 	.word	0x40010400

080040e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	807b      	strh	r3, [r7, #2]
 80040ec:	4613      	mov	r3, r2
 80040ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040f0:	787b      	ldrb	r3, [r7, #1]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040f6:	887a      	ldrh	r2, [r7, #2]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040fc:	e003      	b.n	8004106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040fe:	887b      	ldrh	r3, [r7, #2]
 8004100:	041a      	lsls	r2, r3, #16
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	611a      	str	r2, [r3, #16]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr

08004110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8087 	beq.w	8004238 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800412a:	4b92      	ldr	r3, [pc, #584]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	2b04      	cmp	r3, #4
 8004134:	d00c      	beq.n	8004150 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004136:	4b8f      	ldr	r3, [pc, #572]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	2b08      	cmp	r3, #8
 8004140:	d112      	bne.n	8004168 <HAL_RCC_OscConfig+0x58>
 8004142:	4b8c      	ldr	r3, [pc, #560]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414e:	d10b      	bne.n	8004168 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004150:	4b88      	ldr	r3, [pc, #544]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d06c      	beq.n	8004236 <HAL_RCC_OscConfig+0x126>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d168      	bne.n	8004236 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e22d      	b.n	80045c4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004170:	d106      	bne.n	8004180 <HAL_RCC_OscConfig+0x70>
 8004172:	4b80      	ldr	r3, [pc, #512]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a7f      	ldr	r2, [pc, #508]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 8004178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	e02e      	b.n	80041de <HAL_RCC_OscConfig+0xce>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10c      	bne.n	80041a2 <HAL_RCC_OscConfig+0x92>
 8004188:	4b7a      	ldr	r3, [pc, #488]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a79      	ldr	r2, [pc, #484]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 800418e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	4b77      	ldr	r3, [pc, #476]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a76      	ldr	r2, [pc, #472]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 800419a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	e01d      	b.n	80041de <HAL_RCC_OscConfig+0xce>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041aa:	d10c      	bne.n	80041c6 <HAL_RCC_OscConfig+0xb6>
 80041ac:	4b71      	ldr	r3, [pc, #452]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a70      	ldr	r2, [pc, #448]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 80041b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	4b6e      	ldr	r3, [pc, #440]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a6d      	ldr	r2, [pc, #436]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 80041be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	e00b      	b.n	80041de <HAL_RCC_OscConfig+0xce>
 80041c6:	4b6b      	ldr	r3, [pc, #428]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a6a      	ldr	r2, [pc, #424]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 80041cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	4b68      	ldr	r3, [pc, #416]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a67      	ldr	r2, [pc, #412]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 80041d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041dc:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d013      	beq.n	800420e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e6:	f7ff f97d 	bl	80034e4 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041ee:	f7ff f979 	bl	80034e4 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b64      	cmp	r3, #100	; 0x64
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e1e1      	b.n	80045c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004200:	4b5c      	ldr	r3, [pc, #368]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0xde>
 800420c:	e014      	b.n	8004238 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420e:	f7ff f969 	bl	80034e4 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004216:	f7ff f965 	bl	80034e4 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b64      	cmp	r3, #100	; 0x64
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e1cd      	b.n	80045c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004228:	4b52      	ldr	r3, [pc, #328]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1f0      	bne.n	8004216 <HAL_RCC_OscConfig+0x106>
 8004234:	e000      	b.n	8004238 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004236:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d063      	beq.n	800430c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004244:	4b4b      	ldr	r3, [pc, #300]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 030c 	and.w	r3, r3, #12
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00b      	beq.n	8004268 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004250:	4b48      	ldr	r3, [pc, #288]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	2b08      	cmp	r3, #8
 800425a:	d11c      	bne.n	8004296 <HAL_RCC_OscConfig+0x186>
 800425c:	4b45      	ldr	r3, [pc, #276]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d116      	bne.n	8004296 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004268:	4b42      	ldr	r3, [pc, #264]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_RCC_OscConfig+0x170>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d001      	beq.n	8004280 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e1a1      	b.n	80045c4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004280:	4b3c      	ldr	r3, [pc, #240]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4939      	ldr	r1, [pc, #228]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 8004290:	4313      	orrs	r3, r2
 8004292:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004294:	e03a      	b.n	800430c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d020      	beq.n	80042e0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800429e:	4b36      	ldr	r3, [pc, #216]	; (8004378 <HAL_RCC_OscConfig+0x268>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a4:	f7ff f91e 	bl	80034e4 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ac:	f7ff f91a 	bl	80034e4 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e182      	b.n	80045c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042be:	4b2d      	ldr	r3, [pc, #180]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ca:	4b2a      	ldr	r3, [pc, #168]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	4926      	ldr	r1, [pc, #152]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	600b      	str	r3, [r1, #0]
 80042de:	e015      	b.n	800430c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042e0:	4b25      	ldr	r3, [pc, #148]	; (8004378 <HAL_RCC_OscConfig+0x268>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e6:	f7ff f8fd 	bl	80034e4 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ee:	f7ff f8f9 	bl	80034e4 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e161      	b.n	80045c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004300:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1f0      	bne.n	80042ee <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d039      	beq.n	800438c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d019      	beq.n	8004354 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004320:	4b16      	ldr	r3, [pc, #88]	; (800437c <HAL_RCC_OscConfig+0x26c>)
 8004322:	2201      	movs	r2, #1
 8004324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004326:	f7ff f8dd 	bl	80034e4 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800432e:	f7ff f8d9 	bl	80034e4 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e141      	b.n	80045c4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004340:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <HAL_RCC_OscConfig+0x264>)
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 800434c:	2001      	movs	r0, #1
 800434e:	f000 fae3 	bl	8004918 <RCC_Delay>
 8004352:	e01b      	b.n	800438c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004354:	4b09      	ldr	r3, [pc, #36]	; (800437c <HAL_RCC_OscConfig+0x26c>)
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435a:	f7ff f8c3 	bl	80034e4 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004360:	e00e      	b.n	8004380 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004362:	f7ff f8bf 	bl	80034e4 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d907      	bls.n	8004380 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e127      	b.n	80045c4 <HAL_RCC_OscConfig+0x4b4>
 8004374:	40021000 	.word	0x40021000
 8004378:	42420000 	.word	0x42420000
 800437c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004380:	4b92      	ldr	r3, [pc, #584]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1ea      	bne.n	8004362 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80a6 	beq.w	80044e6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800439a:	2300      	movs	r3, #0
 800439c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800439e:	4b8b      	ldr	r3, [pc, #556]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10d      	bne.n	80043c6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043aa:	4b88      	ldr	r3, [pc, #544]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	4a87      	ldr	r2, [pc, #540]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 80043b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b4:	61d3      	str	r3, [r2, #28]
 80043b6:	4b85      	ldr	r3, [pc, #532]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043c2:	2301      	movs	r3, #1
 80043c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c6:	4b82      	ldr	r3, [pc, #520]	; (80045d0 <HAL_RCC_OscConfig+0x4c0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d118      	bne.n	8004404 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043d2:	4b7f      	ldr	r3, [pc, #508]	; (80045d0 <HAL_RCC_OscConfig+0x4c0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a7e      	ldr	r2, [pc, #504]	; (80045d0 <HAL_RCC_OscConfig+0x4c0>)
 80043d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043de:	f7ff f881 	bl	80034e4 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e6:	f7ff f87d 	bl	80034e4 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b64      	cmp	r3, #100	; 0x64
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e0e5      	b.n	80045c4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f8:	4b75      	ldr	r3, [pc, #468]	; (80045d0 <HAL_RCC_OscConfig+0x4c0>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f0      	beq.n	80043e6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d106      	bne.n	800441a <HAL_RCC_OscConfig+0x30a>
 800440c:	4b6f      	ldr	r3, [pc, #444]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	4a6e      	ldr	r2, [pc, #440]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	6213      	str	r3, [r2, #32]
 8004418:	e02d      	b.n	8004476 <HAL_RCC_OscConfig+0x366>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10c      	bne.n	800443c <HAL_RCC_OscConfig+0x32c>
 8004422:	4b6a      	ldr	r3, [pc, #424]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	4a69      	ldr	r2, [pc, #420]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	6213      	str	r3, [r2, #32]
 800442e:	4b67      	ldr	r3, [pc, #412]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	4a66      	ldr	r2, [pc, #408]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 8004434:	f023 0304 	bic.w	r3, r3, #4
 8004438:	6213      	str	r3, [r2, #32]
 800443a:	e01c      	b.n	8004476 <HAL_RCC_OscConfig+0x366>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	2b05      	cmp	r3, #5
 8004442:	d10c      	bne.n	800445e <HAL_RCC_OscConfig+0x34e>
 8004444:	4b61      	ldr	r3, [pc, #388]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	4a60      	ldr	r2, [pc, #384]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 800444a:	f043 0304 	orr.w	r3, r3, #4
 800444e:	6213      	str	r3, [r2, #32]
 8004450:	4b5e      	ldr	r3, [pc, #376]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	4a5d      	ldr	r2, [pc, #372]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6213      	str	r3, [r2, #32]
 800445c:	e00b      	b.n	8004476 <HAL_RCC_OscConfig+0x366>
 800445e:	4b5b      	ldr	r3, [pc, #364]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	4a5a      	ldr	r2, [pc, #360]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	6213      	str	r3, [r2, #32]
 800446a:	4b58      	ldr	r3, [pc, #352]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	4a57      	ldr	r2, [pc, #348]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 8004470:	f023 0304 	bic.w	r3, r3, #4
 8004474:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d015      	beq.n	80044aa <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447e:	f7ff f831 	bl	80034e4 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004484:	e00a      	b.n	800449c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004486:	f7ff f82d 	bl	80034e4 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	f241 3288 	movw	r2, #5000	; 0x1388
 8004494:	4293      	cmp	r3, r2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e093      	b.n	80045c4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449c:	4b4b      	ldr	r3, [pc, #300]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0ee      	beq.n	8004486 <HAL_RCC_OscConfig+0x376>
 80044a8:	e014      	b.n	80044d4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044aa:	f7ff f81b 	bl	80034e4 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b0:	e00a      	b.n	80044c8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b2:	f7ff f817 	bl	80034e4 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e07d      	b.n	80045c4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c8:	4b40      	ldr	r3, [pc, #256]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1ee      	bne.n	80044b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d105      	bne.n	80044e6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044da:	4b3c      	ldr	r3, [pc, #240]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	4a3b      	ldr	r2, [pc, #236]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 80044e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d069      	beq.n	80045c2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ee:	4b37      	ldr	r3, [pc, #220]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f003 030c 	and.w	r3, r3, #12
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d061      	beq.n	80045be <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d146      	bne.n	8004590 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004502:	4b34      	ldr	r3, [pc, #208]	; (80045d4 <HAL_RCC_OscConfig+0x4c4>)
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004508:	f7fe ffec 	bl	80034e4 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004510:	f7fe ffe8 	bl	80034e4 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e050      	b.n	80045c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004522:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f0      	bne.n	8004510 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004536:	d108      	bne.n	800454a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004538:	4b24      	ldr	r3, [pc, #144]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	4921      	ldr	r1, [pc, #132]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 8004546:	4313      	orrs	r3, r2
 8004548:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800454a:	4b20      	ldr	r3, [pc, #128]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a19      	ldr	r1, [r3, #32]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	430b      	orrs	r3, r1
 800455c:	491b      	ldr	r1, [pc, #108]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 800455e:	4313      	orrs	r3, r2
 8004560:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004562:	4b1c      	ldr	r3, [pc, #112]	; (80045d4 <HAL_RCC_OscConfig+0x4c4>)
 8004564:	2201      	movs	r2, #1
 8004566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004568:	f7fe ffbc 	bl	80034e4 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004570:	f7fe ffb8 	bl	80034e4 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e020      	b.n	80045c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x460>
 800458e:	e018      	b.n	80045c2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004590:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <HAL_RCC_OscConfig+0x4c4>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004596:	f7fe ffa5 	bl	80034e4 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459e:	f7fe ffa1 	bl	80034e4 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e009      	b.n	80045c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b0:	4b06      	ldr	r3, [pc, #24]	; (80045cc <HAL_RCC_OscConfig+0x4bc>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f0      	bne.n	800459e <HAL_RCC_OscConfig+0x48e>
 80045bc:	e001      	b.n	80045c2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40007000 	.word	0x40007000
 80045d4:	42420060 	.word	0x42420060

080045d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80045e6:	4b7e      	ldr	r3, [pc, #504]	; (80047e0 <HAL_RCC_ClockConfig+0x208>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d910      	bls.n	8004616 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f4:	4b7a      	ldr	r3, [pc, #488]	; (80047e0 <HAL_RCC_ClockConfig+0x208>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f023 0207 	bic.w	r2, r3, #7
 80045fc:	4978      	ldr	r1, [pc, #480]	; (80047e0 <HAL_RCC_ClockConfig+0x208>)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	4313      	orrs	r3, r2
 8004602:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004604:	4b76      	ldr	r3, [pc, #472]	; (80047e0 <HAL_RCC_ClockConfig+0x208>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d001      	beq.n	8004616 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e0e0      	b.n	80047d8 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d020      	beq.n	8004664 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	2b00      	cmp	r3, #0
 800462c:	d005      	beq.n	800463a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800462e:	4b6d      	ldr	r3, [pc, #436]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	4a6c      	ldr	r2, [pc, #432]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 8004634:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004638:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004646:	4b67      	ldr	r3, [pc, #412]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4a66      	ldr	r2, [pc, #408]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 800464c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004650:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004652:	4b64      	ldr	r3, [pc, #400]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	4961      	ldr	r1, [pc, #388]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 8004660:	4313      	orrs	r3, r2
 8004662:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d06a      	beq.n	8004746 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d107      	bne.n	8004688 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004678:	4b5a      	ldr	r3, [pc, #360]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d115      	bne.n	80046b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0a7      	b.n	80047d8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d107      	bne.n	80046a0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004690:	4b54      	ldr	r3, [pc, #336]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d109      	bne.n	80046b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e09b      	b.n	80047d8 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a0:	4b50      	ldr	r3, [pc, #320]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e093      	b.n	80047d8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046b0:	4b4c      	ldr	r3, [pc, #304]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f023 0203 	bic.w	r2, r3, #3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4949      	ldr	r1, [pc, #292]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046c2:	f7fe ff0f 	bl	80034e4 <HAL_GetTick>
 80046c6:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d112      	bne.n	80046f6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046d0:	e00a      	b.n	80046e8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d2:	f7fe ff07 	bl	80034e4 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e077      	b.n	80047d8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046e8:	4b3e      	ldr	r3, [pc, #248]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 030c 	and.w	r3, r3, #12
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d1ee      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xfa>
 80046f4:	e027      	b.n	8004746 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d11d      	bne.n	800473a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046fe:	e00a      	b.n	8004716 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004700:	f7fe fef0 	bl	80034e4 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f241 3288 	movw	r2, #5000	; 0x1388
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e060      	b.n	80047d8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004716:	4b33      	ldr	r3, [pc, #204]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f003 030c 	and.w	r3, r3, #12
 800471e:	2b08      	cmp	r3, #8
 8004720:	d1ee      	bne.n	8004700 <HAL_RCC_ClockConfig+0x128>
 8004722:	e010      	b.n	8004746 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004724:	f7fe fede 	bl	80034e4 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e04e      	b.n	80047d8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800473a:	4b2a      	ldr	r3, [pc, #168]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1ee      	bne.n	8004724 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004746:	4b26      	ldr	r3, [pc, #152]	; (80047e0 <HAL_RCC_ClockConfig+0x208>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d210      	bcs.n	8004776 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004754:	4b22      	ldr	r3, [pc, #136]	; (80047e0 <HAL_RCC_ClockConfig+0x208>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f023 0207 	bic.w	r2, r3, #7
 800475c:	4920      	ldr	r1, [pc, #128]	; (80047e0 <HAL_RCC_ClockConfig+0x208>)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	4313      	orrs	r3, r2
 8004762:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004764:	4b1e      	ldr	r3, [pc, #120]	; (80047e0 <HAL_RCC_ClockConfig+0x208>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d001      	beq.n	8004776 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e030      	b.n	80047d8 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	d008      	beq.n	8004794 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004782:	4b18      	ldr	r3, [pc, #96]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	4915      	ldr	r1, [pc, #84]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 8004790:	4313      	orrs	r3, r2
 8004792:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b00      	cmp	r3, #0
 800479e:	d009      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047a0:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	490d      	ldr	r1, [pc, #52]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047b4:	f000 f81c 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 80047b8:	4601      	mov	r1, r0
 80047ba:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	4a08      	ldr	r2, [pc, #32]	; (80047e8 <HAL_RCC_ClockConfig+0x210>)
 80047c6:	5cd3      	ldrb	r3, [r2, r3]
 80047c8:	fa21 f303 	lsr.w	r3, r1, r3
 80047cc:	4a07      	ldr	r2, [pc, #28]	; (80047ec <HAL_RCC_ClockConfig+0x214>)
 80047ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80047d0:	2000      	movs	r0, #0
 80047d2:	f7fe fe45 	bl	8003460 <HAL_InitTick>
  
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40022000 	.word	0x40022000
 80047e4:	40021000 	.word	0x40021000
 80047e8:	080086b8 	.word	0x080086b8
 80047ec:	20000014 	.word	0x20000014

080047f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f0:	b490      	push	{r4, r7}
 80047f2:	b08a      	sub	sp, #40	; 0x28
 80047f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80047f6:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80047f8:	1d3c      	adds	r4, r7, #4
 80047fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004800:	4b28      	ldr	r3, [pc, #160]	; (80048a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	61fb      	str	r3, [r7, #28]
 800480a:	2300      	movs	r3, #0
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	2300      	movs	r3, #0
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800481a:	4b23      	ldr	r3, [pc, #140]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f003 030c 	and.w	r3, r3, #12
 8004826:	2b04      	cmp	r3, #4
 8004828:	d002      	beq.n	8004830 <HAL_RCC_GetSysClockFreq+0x40>
 800482a:	2b08      	cmp	r3, #8
 800482c:	d003      	beq.n	8004836 <HAL_RCC_GetSysClockFreq+0x46>
 800482e:	e02d      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004830:	4b1e      	ldr	r3, [pc, #120]	; (80048ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8004832:	623b      	str	r3, [r7, #32]
      break;
 8004834:	e02d      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	0c9b      	lsrs	r3, r3, #18
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004842:	4413      	add	r3, r2
 8004844:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004848:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d013      	beq.n	800487c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004854:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	0c5b      	lsrs	r3, r3, #17
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004862:	4413      	add	r3, r2
 8004864:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004868:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	4a0f      	ldr	r2, [pc, #60]	; (80048ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800486e:	fb02 f203 	mul.w	r2, r2, r3
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	fbb2 f3f3 	udiv	r3, r2, r3
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
 800487a:	e004      	b.n	8004886 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	4a0c      	ldr	r2, [pc, #48]	; (80048b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004880:	fb02 f303 	mul.w	r3, r2, r3
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	623b      	str	r3, [r7, #32]
      break;
 800488a:	e002      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800488c:	4b07      	ldr	r3, [pc, #28]	; (80048ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800488e:	623b      	str	r3, [r7, #32]
      break;
 8004890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004892:	6a3b      	ldr	r3, [r7, #32]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3728      	adds	r7, #40	; 0x28
 8004898:	46bd      	mov	sp, r7
 800489a:	bc90      	pop	{r4, r7}
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	08005ea0 	.word	0x08005ea0
 80048a4:	08005eb0 	.word	0x08005eb0
 80048a8:	40021000 	.word	0x40021000
 80048ac:	007a1200 	.word	0x007a1200
 80048b0:	003d0900 	.word	0x003d0900

080048b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b8:	4b02      	ldr	r3, [pc, #8]	; (80048c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr
 80048c4:	20000014 	.word	0x20000014

080048c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048cc:	f7ff fff2 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 80048d0:	4601      	mov	r1, r0
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	0a1b      	lsrs	r3, r3, #8
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	4a03      	ldr	r2, [pc, #12]	; (80048ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80048de:	5cd3      	ldrb	r3, [r2, r3]
 80048e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80048e4:	4618      	mov	r0, r3
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40021000 	.word	0x40021000
 80048ec:	080086c8 	.word	0x080086c8

080048f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048f4:	f7ff ffde 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 80048f8:	4601      	mov	r1, r0
 80048fa:	4b05      	ldr	r3, [pc, #20]	; (8004910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	0adb      	lsrs	r3, r3, #11
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	4a03      	ldr	r2, [pc, #12]	; (8004914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004906:	5cd3      	ldrb	r3, [r2, r3]
 8004908:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800490c:	4618      	mov	r0, r3
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021000 	.word	0x40021000
 8004914:	080086c8 	.word	0x080086c8

08004918 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004920:	4b0a      	ldr	r3, [pc, #40]	; (800494c <RCC_Delay+0x34>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a0a      	ldr	r2, [pc, #40]	; (8004950 <RCC_Delay+0x38>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	0a5b      	lsrs	r3, r3, #9
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8004934:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	1e5a      	subs	r2, r3, #1
 800493a:	60fa      	str	r2, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f9      	bne.n	8004934 <RCC_Delay+0x1c>
}
 8004940:	bf00      	nop
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	bc80      	pop	{r7}
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	20000014 	.word	0x20000014
 8004950:	10624dd3 	.word	0x10624dd3

08004954 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d07d      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004970:	2300      	movs	r3, #0
 8004972:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004974:	4b4f      	ldr	r3, [pc, #316]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10d      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004980:	4b4c      	ldr	r3, [pc, #304]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	4a4b      	ldr	r2, [pc, #300]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800498a:	61d3      	str	r3, [r2, #28]
 800498c:	4b49      	ldr	r3, [pc, #292]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004998:	2301      	movs	r3, #1
 800499a:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499c:	4b46      	ldr	r3, [pc, #280]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d118      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049a8:	4b43      	ldr	r3, [pc, #268]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a42      	ldr	r2, [pc, #264]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b4:	f7fe fd96 	bl	80034e4 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ba:	e008      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049bc:	f7fe fd92 	bl	80034e4 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b64      	cmp	r3, #100	; 0x64
 80049c8:	d901      	bls.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e06d      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ce:	4b3a      	ldr	r3, [pc, #232]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049da:	4b36      	ldr	r3, [pc, #216]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d02e      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d027      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049f8:	4b2e      	ldr	r3, [pc, #184]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a02:	4b2e      	ldr	r3, [pc, #184]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a08:	4b2c      	ldr	r3, [pc, #176]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a0e:	4a29      	ldr	r2, [pc, #164]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d014      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1e:	f7fe fd61 	bl	80034e4 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a24:	e00a      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a26:	f7fe fd5d 	bl	80034e4 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e036      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3c:	4b1d      	ldr	r3, [pc, #116]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0ee      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004a48:	4b1a      	ldr	r3, [pc, #104]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	4917      	ldr	r1, [pc, #92]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a5a:	7dfb      	ldrb	r3, [r7, #23]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d105      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a60:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	4a13      	ldr	r2, [pc, #76]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a78:	4b0e      	ldr	r3, [pc, #56]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	490b      	ldr	r1, [pc, #44]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a96:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	4904      	ldr	r1, [pc, #16]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40007000 	.word	0x40007000
 8004abc:	42420440 	.word	0x42420440

08004ac0 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e03f      	b.n	8004b52 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f001 f816 	bl	8005b18 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2224      	movs	r2, #36	; 0x24
 8004af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b02:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f90b 	bl	8004d20 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695a      	ldr	r2, [r3, #20]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b28:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b38:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b088      	sub	sp, #32
 8004b5e:	af02      	add	r7, sp, #8
 8004b60:	60f8      	str	r0, [r7, #12]
 8004b62:	60b9      	str	r1, [r7, #8]
 8004b64:	603b      	str	r3, [r7, #0]
 8004b66:	4613      	mov	r3, r2
 8004b68:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b20      	cmp	r3, #32
 8004b78:	f040 8083 	bne.w	8004c82 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <HAL_UART_Transmit+0x2e>
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e07b      	b.n	8004c84 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_UART_Transmit+0x40>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e074      	b.n	8004c84 <HAL_UART_Transmit+0x12a>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2221      	movs	r2, #33	; 0x21
 8004bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004bb0:	f7fe fc98 	bl	80034e4 <HAL_GetTick>
 8004bb4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	88fa      	ldrh	r2, [r7, #6]
 8004bba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	88fa      	ldrh	r2, [r7, #6]
 8004bc0:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8004bc2:	e042      	b.n	8004c4a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bda:	d122      	bne.n	8004c22 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2200      	movs	r2, #0
 8004be4:	2180      	movs	r1, #128	; 0x80
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f850 	bl	8004c8c <UART_WaitOnFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e046      	b.n	8004c84 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c08:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d103      	bne.n	8004c1a <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	3302      	adds	r3, #2
 8004c16:	60bb      	str	r3, [r7, #8]
 8004c18:	e017      	b.n	8004c4a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	60bb      	str	r3, [r7, #8]
 8004c20:	e013      	b.n	8004c4a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2180      	movs	r1, #128	; 0x80
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f82d 	bl	8004c8c <UART_WaitOnFlagUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e023      	b.n	8004c84 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	60ba      	str	r2, [r7, #8]
 8004c42:	781a      	ldrb	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1b7      	bne.n	8004bc4 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2140      	movs	r1, #64	; 0x40
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f814 	bl	8004c8c <UART_WaitOnFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e00a      	b.n	8004c84 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	e000      	b.n	8004c84 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004c82:	2302      	movs	r3, #2
  }
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8004c9c:	e02c      	b.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ca4:	d028      	beq.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x30>
 8004cac:	f7fe fc1a 	bl	80034e4 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d21d      	bcs.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695a      	ldr	r2, [r3, #20]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0201 	bic.w	r2, r2, #1
 8004cda:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e00f      	b.n	8004d18 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4013      	ands	r3, r2
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	bf0c      	ite	eq
 8004d08:	2301      	moveq	r3, #1
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	79fb      	ldrb	r3, [r7, #7]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d0c3      	beq.n	8004c9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d20:	b5b0      	push	{r4, r5, r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d62:	f023 030c 	bic.w	r3, r3, #12
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6812      	ldr	r2, [r2, #0]
 8004d6a:	68f9      	ldr	r1, [r7, #12]
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a6f      	ldr	r2, [pc, #444]	; (8004f48 <UART_SetConfig+0x228>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d16b      	bne.n	8004e68 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004d90:	f7ff fdae 	bl	80048f0 <HAL_RCC_GetPCLK2Freq>
 8004d94:	4602      	mov	r2, r0
 8004d96:	4613      	mov	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	009a      	lsls	r2, r3, #2
 8004d9e:	441a      	add	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004daa:	4a68      	ldr	r2, [pc, #416]	; (8004f4c <UART_SetConfig+0x22c>)
 8004dac:	fba2 2303 	umull	r2, r3, r2, r3
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	011c      	lsls	r4, r3, #4
 8004db4:	f7ff fd9c 	bl	80048f0 <HAL_RCC_GetPCLK2Freq>
 8004db8:	4602      	mov	r2, r0
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009a      	lsls	r2, r3, #2
 8004dc2:	441a      	add	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	fbb2 f5f3 	udiv	r5, r2, r3
 8004dce:	f7ff fd8f 	bl	80048f0 <HAL_RCC_GetPCLK2Freq>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	009a      	lsls	r2, r3, #2
 8004ddc:	441a      	add	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de8:	4a58      	ldr	r2, [pc, #352]	; (8004f4c <UART_SetConfig+0x22c>)
 8004dea:	fba2 2303 	umull	r2, r3, r2, r3
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	2264      	movs	r2, #100	; 0x64
 8004df2:	fb02 f303 	mul.w	r3, r2, r3
 8004df6:	1aeb      	subs	r3, r5, r3
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	3332      	adds	r3, #50	; 0x32
 8004dfc:	4a53      	ldr	r2, [pc, #332]	; (8004f4c <UART_SetConfig+0x22c>)
 8004dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e08:	441c      	add	r4, r3
 8004e0a:	f7ff fd71 	bl	80048f0 <HAL_RCC_GetPCLK2Freq>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	4613      	mov	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	009a      	lsls	r2, r3, #2
 8004e18:	441a      	add	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	fbb2 f5f3 	udiv	r5, r2, r3
 8004e24:	f7ff fd64 	bl	80048f0 <HAL_RCC_GetPCLK2Freq>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	009a      	lsls	r2, r3, #2
 8004e32:	441a      	add	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3e:	4a43      	ldr	r2, [pc, #268]	; (8004f4c <UART_SetConfig+0x22c>)
 8004e40:	fba2 2303 	umull	r2, r3, r2, r3
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	2264      	movs	r2, #100	; 0x64
 8004e48:	fb02 f303 	mul.w	r3, r2, r3
 8004e4c:	1aeb      	subs	r3, r5, r3
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	3332      	adds	r3, #50	; 0x32
 8004e52:	4a3e      	ldr	r2, [pc, #248]	; (8004f4c <UART_SetConfig+0x22c>)
 8004e54:	fba2 2303 	umull	r2, r3, r2, r3
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	f003 020f 	and.w	r2, r3, #15
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4422      	add	r2, r4
 8004e64:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004e66:	e06a      	b.n	8004f3e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004e68:	f7ff fd2e 	bl	80048c8 <HAL_RCC_GetPCLK1Freq>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	009a      	lsls	r2, r3, #2
 8004e76:	441a      	add	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e82:	4a32      	ldr	r2, [pc, #200]	; (8004f4c <UART_SetConfig+0x22c>)
 8004e84:	fba2 2303 	umull	r2, r3, r2, r3
 8004e88:	095b      	lsrs	r3, r3, #5
 8004e8a:	011c      	lsls	r4, r3, #4
 8004e8c:	f7ff fd1c 	bl	80048c8 <HAL_RCC_GetPCLK1Freq>
 8004e90:	4602      	mov	r2, r0
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	009a      	lsls	r2, r3, #2
 8004e9a:	441a      	add	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ea6:	f7ff fd0f 	bl	80048c8 <HAL_RCC_GetPCLK1Freq>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009a      	lsls	r2, r3, #2
 8004eb4:	441a      	add	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec0:	4a22      	ldr	r2, [pc, #136]	; (8004f4c <UART_SetConfig+0x22c>)
 8004ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	2264      	movs	r2, #100	; 0x64
 8004eca:	fb02 f303 	mul.w	r3, r2, r3
 8004ece:	1aeb      	subs	r3, r5, r3
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	3332      	adds	r3, #50	; 0x32
 8004ed4:	4a1d      	ldr	r2, [pc, #116]	; (8004f4c <UART_SetConfig+0x22c>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ee0:	441c      	add	r4, r3
 8004ee2:	f7ff fcf1 	bl	80048c8 <HAL_RCC_GetPCLK1Freq>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	009a      	lsls	r2, r3, #2
 8004ef0:	441a      	add	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	fbb2 f5f3 	udiv	r5, r2, r3
 8004efc:	f7ff fce4 	bl	80048c8 <HAL_RCC_GetPCLK1Freq>
 8004f00:	4602      	mov	r2, r0
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	009a      	lsls	r2, r3, #2
 8004f0a:	441a      	add	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f16:	4a0d      	ldr	r2, [pc, #52]	; (8004f4c <UART_SetConfig+0x22c>)
 8004f18:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1c:	095b      	lsrs	r3, r3, #5
 8004f1e:	2264      	movs	r2, #100	; 0x64
 8004f20:	fb02 f303 	mul.w	r3, r2, r3
 8004f24:	1aeb      	subs	r3, r5, r3
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	3332      	adds	r3, #50	; 0x32
 8004f2a:	4a08      	ldr	r2, [pc, #32]	; (8004f4c <UART_SetConfig+0x22c>)
 8004f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f30:	095b      	lsrs	r3, r3, #5
 8004f32:	f003 020f 	and.w	r2, r3, #15
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4422      	add	r2, r4
 8004f3c:	609a      	str	r2, [r3, #8]
}
 8004f3e:	bf00      	nop
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bdb0      	pop	{r4, r5, r7, pc}
 8004f46:	bf00      	nop
 8004f48:	40013800 	.word	0x40013800
 8004f4c:	51eb851f 	.word	0x51eb851f

08004f50 <LCD_setRST>:
struct LCD_att lcd;
struct LCD_GPIO lcd_gpio;



void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 8004f5c:	4a05      	ldr	r2, [pc, #20]	; (8004f74 <LCD_setRST+0x24>)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 8004f62:	4a04      	ldr	r2, [pc, #16]	; (8004f74 <LCD_setRST+0x24>)
 8004f64:	887b      	ldrh	r3, [r7, #2]
 8004f66:	8093      	strh	r3, [r2, #4]
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bc80      	pop	{r7}
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	200001a8 	.word	0x200001a8

08004f78 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 8004f84:	4a05      	ldr	r2, [pc, #20]	; (8004f9c <LCD_setCE+0x24>)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 8004f8a:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <LCD_setCE+0x24>)
 8004f8c:	887b      	ldrh	r3, [r7, #2]
 8004f8e:	8193      	strh	r3, [r2, #12]
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bc80      	pop	{r7}
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	200001a8 	.word	0x200001a8

08004fa0 <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 8004fac:	4a05      	ldr	r2, [pc, #20]	; (8004fc4 <LCD_setDC+0x24>)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 8004fb2:	4a04      	ldr	r2, [pc, #16]	; (8004fc4 <LCD_setDC+0x24>)
 8004fb4:	887b      	ldrh	r3, [r7, #2]
 8004fb6:	8293      	strh	r3, [r2, #20]
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	200001a8 	.word	0x200001a8

08004fc8 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 8004fd4:	4a05      	ldr	r2, [pc, #20]	; (8004fec <LCD_setDIN+0x24>)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 8004fda:	4a04      	ldr	r2, [pc, #16]	; (8004fec <LCD_setDIN+0x24>)
 8004fdc:	887b      	ldrh	r3, [r7, #2]
 8004fde:	8393      	strh	r3, [r2, #28]
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bc80      	pop	{r7}
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	200001a8 	.word	0x200001a8

08004ff0 <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 8004ffc:	4a05      	ldr	r2, [pc, #20]	; (8005014 <LCD_setCLK+0x24>)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 8005002:	4a04      	ldr	r2, [pc, #16]	; (8005014 <LCD_setCLK+0x24>)
 8005004:	887b      	ldrh	r3, [r7, #2]
 8005006:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	200001a8 	.word	0x200001a8

08005018 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	4603      	mov	r3, r0
 8005020:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++){
 8005022:	2300      	movs	r3, #0
 8005024:	73fb      	strb	r3, [r7, #15]
 8005026:	e026      	b.n	8005076 <LCD_send+0x5e>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8005028:	4b16      	ldr	r3, [pc, #88]	; (8005084 <LCD_send+0x6c>)
 800502a:	6998      	ldr	r0, [r3, #24]
 800502c:	4b15      	ldr	r3, [pc, #84]	; (8005084 <LCD_send+0x6c>)
 800502e:	8b99      	ldrh	r1, [r3, #28]
 8005030:	79fa      	ldrb	r2, [r7, #7]
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	f1c3 0307 	rsb	r3, r3, #7
 8005038:	fa42 f303 	asr.w	r3, r2, r3
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	bf14      	ite	ne
 8005044:	2301      	movne	r3, #1
 8005046:	2300      	moveq	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	f7ff f848 	bl	80040e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 8005050:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <LCD_send+0x6c>)
 8005052:	6a18      	ldr	r0, [r3, #32]
 8005054:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <LCD_send+0x6c>)
 8005056:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005058:	2201      	movs	r2, #1
 800505a:	4619      	mov	r1, r3
 800505c:	f7ff f840 	bl	80040e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 8005060:	4b08      	ldr	r3, [pc, #32]	; (8005084 <LCD_send+0x6c>)
 8005062:	6a18      	ldr	r0, [r3, #32]
 8005064:	4b07      	ldr	r3, [pc, #28]	; (8005084 <LCD_send+0x6c>)
 8005066:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005068:	2200      	movs	r2, #0
 800506a:	4619      	mov	r1, r3
 800506c:	f7ff f838 	bl	80040e0 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	3301      	adds	r3, #1
 8005074:	73fb      	strb	r3, [r7, #15]
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	2b07      	cmp	r3, #7
 800507a:	d9d5      	bls.n	8005028 <LCD_send+0x10>
  }
}
 800507c:	bf00      	nop
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	200001a8 	.word	0x200001a8

08005088 <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	4603      	mov	r3, r0
 8005090:	460a      	mov	r2, r1
 8005092:	71fb      	strb	r3, [r7, #7]
 8005094:	4613      	mov	r3, r2
 8005096:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 8005098:	79bb      	ldrb	r3, [r7, #6]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d11c      	bne.n	80050d8 <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 800509e:	4b1e      	ldr	r3, [pc, #120]	; (8005118 <LCD_write+0x90>)
 80050a0:	6918      	ldr	r0, [r3, #16]
 80050a2:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <LCD_write+0x90>)
 80050a4:	8a9b      	ldrh	r3, [r3, #20]
 80050a6:	2200      	movs	r2, #0
 80050a8:	4619      	mov	r1, r3
 80050aa:	f7ff f819 	bl	80040e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 80050ae:	4b1a      	ldr	r3, [pc, #104]	; (8005118 <LCD_write+0x90>)
 80050b0:	6898      	ldr	r0, [r3, #8]
 80050b2:	4b19      	ldr	r3, [pc, #100]	; (8005118 <LCD_write+0x90>)
 80050b4:	899b      	ldrh	r3, [r3, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	4619      	mov	r1, r3
 80050ba:	f7ff f811 	bl	80040e0 <HAL_GPIO_WritePin>
    LCD_send(data);
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff ffa9 	bl	8005018 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 80050c6:	4b14      	ldr	r3, [pc, #80]	; (8005118 <LCD_write+0x90>)
 80050c8:	6898      	ldr	r0, [r3, #8]
 80050ca:	4b13      	ldr	r3, [pc, #76]	; (8005118 <LCD_write+0x90>)
 80050cc:	899b      	ldrh	r3, [r3, #12]
 80050ce:	2201      	movs	r2, #1
 80050d0:	4619      	mov	r1, r3
 80050d2:	f7ff f805 	bl	80040e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 80050d6:	e01b      	b.n	8005110 <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <LCD_write+0x90>)
 80050da:	6918      	ldr	r0, [r3, #16]
 80050dc:	4b0e      	ldr	r3, [pc, #56]	; (8005118 <LCD_write+0x90>)
 80050de:	8a9b      	ldrh	r3, [r3, #20]
 80050e0:	2201      	movs	r2, #1
 80050e2:	4619      	mov	r1, r3
 80050e4:	f7fe fffc 	bl	80040e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 80050e8:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <LCD_write+0x90>)
 80050ea:	6898      	ldr	r0, [r3, #8]
 80050ec:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <LCD_write+0x90>)
 80050ee:	899b      	ldrh	r3, [r3, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	4619      	mov	r1, r3
 80050f4:	f7fe fff4 	bl	80040e0 <HAL_GPIO_WritePin>
    LCD_send(data);
 80050f8:	79fb      	ldrb	r3, [r7, #7]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff ff8c 	bl	8005018 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8005100:	4b05      	ldr	r3, [pc, #20]	; (8005118 <LCD_write+0x90>)
 8005102:	6898      	ldr	r0, [r3, #8]
 8005104:	4b04      	ldr	r3, [pc, #16]	; (8005118 <LCD_write+0x90>)
 8005106:	899b      	ldrh	r3, [r3, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	4619      	mov	r1, r3
 800510c:	f7fe ffe8 	bl	80040e0 <HAL_GPIO_WritePin>
}
 8005110:	bf00      	nop
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	200001a8 	.word	0x200001a8

0800511c <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8005120:	4b17      	ldr	r3, [pc, #92]	; (8005180 <LCD_init+0x64>)
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	4b16      	ldr	r3, [pc, #88]	; (8005180 <LCD_init+0x64>)
 8005126:	889b      	ldrh	r3, [r3, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	4619      	mov	r1, r3
 800512c:	f7fe ffd8 	bl	80040e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8005130:	4b13      	ldr	r3, [pc, #76]	; (8005180 <LCD_init+0x64>)
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	4b12      	ldr	r3, [pc, #72]	; (8005180 <LCD_init+0x64>)
 8005136:	889b      	ldrh	r3, [r3, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	4619      	mov	r1, r3
 800513c:	f7fe ffd0 	bl	80040e0 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8005140:	2100      	movs	r1, #0
 8005142:	2021      	movs	r0, #33	; 0x21
 8005144:	f7ff ffa0 	bl	8005088 <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 8005148:	2100      	movs	r1, #0
 800514a:	20b8      	movs	r0, #184	; 0xb8
 800514c:	f7ff ff9c 	bl	8005088 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8005150:	2100      	movs	r1, #0
 8005152:	2004      	movs	r0, #4
 8005154:	f7ff ff98 	bl	8005088 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 8005158:	2100      	movs	r1, #0
 800515a:	2014      	movs	r0, #20
 800515c:	f7ff ff94 	bl	8005088 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8005160:	2100      	movs	r1, #0
 8005162:	2020      	movs	r0, #32
 8005164:	f7ff ff90 	bl	8005088 <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8005168:	2100      	movs	r1, #0
 800516a:	200c      	movs	r0, #12
 800516c:	f7ff ff8c 	bl	8005088 <LCD_write>
  LCD_clrScr();
 8005170:	f000 f86a 	bl	8005248 <LCD_clrScr>
  lcd.inverttext = false;
 8005174:	4b03      	ldr	r3, [pc, #12]	; (8005184 <LCD_init+0x68>)
 8005176:	2200      	movs	r2, #0
 8005178:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 800517c:	bf00      	nop
 800517e:	bd80      	pop	{r7, pc}
 8005180:	200001a8 	.word	0x200001a8
 8005184:	200001d0 	.word	0x200001d0

08005188 <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c){
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	71fb      	strb	r3, [r7, #7]
  for(int i = 0; i < 6; i++){
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	e02d      	b.n	80051f4 <LCD_putChar+0x6c>
    if(lcd.inverttext != true)
 8005198:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <LCD_putChar+0x7c>)
 800519a:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 800519e:	f083 0301 	eor.w	r3, r3, #1
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d010      	beq.n	80051ca <LCD_putChar+0x42>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 80051a8:	79fb      	ldrb	r3, [r7, #7]
 80051aa:	f1a3 0220 	sub.w	r2, r3, #32
 80051ae:	4916      	ldr	r1, [pc, #88]	; (8005208 <LCD_putChar+0x80>)
 80051b0:	4613      	mov	r3, r2
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	4413      	add	r3, r2
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	18ca      	adds	r2, r1, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4413      	add	r3, r2
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2101      	movs	r1, #1
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7ff ff60 	bl	8005088 <LCD_write>
 80051c8:	e011      	b.n	80051ee <LCD_putChar+0x66>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	f1a3 0220 	sub.w	r2, r3, #32
 80051d0:	490d      	ldr	r1, [pc, #52]	; (8005208 <LCD_putChar+0x80>)
 80051d2:	4613      	mov	r3, r2
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	4413      	add	r3, r2
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	18ca      	adds	r2, r1, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	43db      	mvns	r3, r3
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2101      	movs	r1, #1
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff ff4d 	bl	8005088 <LCD_write>
  for(int i = 0; i < 6; i++){
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3301      	adds	r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b05      	cmp	r3, #5
 80051f8:	ddce      	ble.n	8005198 <LCD_putChar+0x10>
  }
}
 80051fa:	bf00      	nop
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	200001d0 	.word	0x200001d0
 8005208:	08008478 	.word	0x08008478

0800520c <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	70fb      	strb	r3, [r7, #3]
 8005218:	4613      	mov	r3, r2
 800521a:	70bb      	strb	r3, [r7, #2]
  LCD_goXY(x, y);
 800521c:	78ba      	ldrb	r2, [r7, #2]
 800521e:	78fb      	ldrb	r3, [r7, #3]
 8005220:	4611      	mov	r1, r2
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f82c 	bl	8005280 <LCD_goXY>
  while(*str){
 8005228:	e006      	b.n	8005238 <LCD_print+0x2c>
    LCD_putChar(*str++);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff ffa8 	bl	8005188 <LCD_putChar>
  while(*str){
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1f4      	bne.n	800522a <LCD_print+0x1e>
  }
}
 8005240:	bf00      	nop
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 800524e:	2300      	movs	r3, #0
 8005250:	607b      	str	r3, [r7, #4]
 8005252:	e00b      	b.n	800526c <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 8005254:	2101      	movs	r1, #1
 8005256:	2000      	movs	r0, #0
 8005258:	f7ff ff16 	bl	8005088 <LCD_write>
    lcd.buffer[i] = 0;
 800525c:	4a07      	ldr	r2, [pc, #28]	; (800527c <LCD_clrScr+0x34>)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4413      	add	r3, r2
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3301      	adds	r3, #1
 800526a:	607b      	str	r3, [r7, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8005272:	dbef      	blt.n	8005254 <LCD_clrScr+0xc>
  }
}
 8005274:	bf00      	nop
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	200001d0 	.word	0x200001d0

08005280 <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	4603      	mov	r3, r0
 8005288:	460a      	mov	r2, r1
 800528a:	71fb      	strb	r3, [r7, #7]
 800528c:	4613      	mov	r3, r2
 800528e:	71bb      	strb	r3, [r7, #6]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2100      	movs	r1, #0
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff fef4 	bl	8005088 <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 80052a0:	79bb      	ldrb	r3, [r7, #6]
 80052a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2100      	movs	r1, #0
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff feec 	bl	8005088 <LCD_write>
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <long_int_size>:
  LCD_drawLine(x1, y1, x1, y2);
  LCD_drawLine(x2, y1, x2, y2);
  LCD_drawLine(x1, y2, x2, y2);
}

uint8_t long_int_size(uint32_t number) {
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint8_t decimal = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	73fb      	strb	r3, [r7, #15]
  if (number == 0) {
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10a      	bne.n	80052e0 <long_int_size+0x28>
    return 1;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e00c      	b.n	80052e8 <long_int_size+0x30>
  }
  while (number > 0) {
    number = number / 10;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a08      	ldr	r2, [pc, #32]	; (80052f4 <long_int_size+0x3c>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	08db      	lsrs	r3, r3, #3
 80052d8:	607b      	str	r3, [r7, #4]
    decimal++;
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	3301      	adds	r3, #1
 80052de:	73fb      	strb	r3, [r7, #15]
  while (number > 0) {
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f3      	bne.n	80052ce <long_int_size+0x16>
  }
  return decimal;
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bc80      	pop	{r7}
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	cccccccd 	.word	0xcccccccd

080052f8 <lcd_out_number>:

void lcd_out_number(uint32_t number, uint8_t x, uint8_t y) {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	70fb      	strb	r3, [r7, #3]
 8005304:	4613      	mov	r3, r2
 8005306:	70bb      	strb	r3, [r7, #2]
  char lcd_massiv_out[16];
  uint32_t div_remainder = 1;
 8005308:	2301      	movs	r3, #1
 800530a:	61bb      	str	r3, [r7, #24]
  uint8_t flag = 0;
 800530c:	2300      	movs	r3, #0
 800530e:	77fb      	strb	r3, [r7, #31]
  uint8_t index_mass_lcd;
  index_mass_lcd = long_int_size(number) - 1;
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff ffd1 	bl	80052b8 <long_int_size>
 8005316:	4603      	mov	r3, r0
 8005318:	3b01      	subs	r3, #1
 800531a:	77bb      	strb	r3, [r7, #30]
  lcd_massiv_out[index_mass_lcd + 1] = '\0';
 800531c:	7fbb      	ldrb	r3, [r7, #30]
 800531e:	3301      	adds	r3, #1
 8005320:	f107 0220 	add.w	r2, r7, #32
 8005324:	4413      	add	r3, r2
 8005326:	2200      	movs	r2, #0
 8005328:	f803 2c18 	strb.w	r2, [r3, #-24]

  while (number > 0 && index_mass_lcd >= 0) {
 800532c:	e01e      	b.n	800536c <lcd_out_number+0x74>
    div_remainder = number % 10;
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	4b20      	ldr	r3, [pc, #128]	; (80053b4 <lcd_out_number+0xbc>)
 8005332:	fba3 1302 	umull	r1, r3, r3, r2
 8005336:	08d9      	lsrs	r1, r3, #3
 8005338:	460b      	mov	r3, r1
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	61bb      	str	r3, [r7, #24]
    lcd_massiv_out[index_mass_lcd--] = div_remainder + 48;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	7fbb      	ldrb	r3, [r7, #30]
 800534a:	1e59      	subs	r1, r3, #1
 800534c:	77b9      	strb	r1, [r7, #30]
 800534e:	3230      	adds	r2, #48	; 0x30
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	f107 0120 	add.w	r1, r7, #32
 8005356:	440b      	add	r3, r1
 8005358:	f803 2c18 	strb.w	r2, [r3, #-24]
    number = number / 10;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a15      	ldr	r2, [pc, #84]	; (80053b4 <lcd_out_number+0xbc>)
 8005360:	fba2 2303 	umull	r2, r3, r2, r3
 8005364:	08db      	lsrs	r3, r3, #3
 8005366:	607b      	str	r3, [r7, #4]
    flag = 1;
 8005368:	2301      	movs	r3, #1
 800536a:	77fb      	strb	r3, [r7, #31]
  while (number > 0 && index_mass_lcd >= 0) {
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1dd      	bne.n	800532e <lcd_out_number+0x36>
  }

  if (number == 0 && flag == 0) {
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d111      	bne.n	800539c <lcd_out_number+0xa4>
 8005378:	7ffb      	ldrb	r3, [r7, #31]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10e      	bne.n	800539c <lcd_out_number+0xa4>
    lcd_massiv_out[index_mass_lcd] = 48;
 800537e:	7fbb      	ldrb	r3, [r7, #30]
 8005380:	f107 0220 	add.w	r2, r7, #32
 8005384:	4413      	add	r3, r2
 8005386:	2230      	movs	r2, #48	; 0x30
 8005388:	f803 2c18 	strb.w	r2, [r3, #-24]
    LCD_print(lcd_massiv_out, x, y);
 800538c:	78ba      	ldrb	r2, [r7, #2]
 800538e:	78f9      	ldrb	r1, [r7, #3]
 8005390:	f107 0308 	add.w	r3, r7, #8
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff ff39 	bl	800520c <LCD_print>
 800539a:	e006      	b.n	80053aa <lcd_out_number+0xb2>
  } else
    LCD_print(lcd_massiv_out, x, y);
 800539c:	78ba      	ldrb	r2, [r7, #2]
 800539e:	78f9      	ldrb	r1, [r7, #3]
 80053a0:	f107 0308 	add.w	r3, r7, #8
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff ff31 	bl	800520c <LCD_print>
  return;
 80053aa:	bf00      	nop
}
 80053ac:	3720      	adds	r7, #32
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	cccccccd 	.word	0xcccccccd

080053b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80053b8:	b5b0      	push	{r4, r5, r7, lr}
 80053ba:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	float32_t testInput_f32_10khz[2048] = { -0.865129623056441,
 80053c2:	f107 0318 	add.w	r3, r7, #24
 80053c6:	3b14      	subs	r3, #20
 80053c8:	4a89      	ldr	r2, [pc, #548]	; (80055f0 <main+0x238>)
 80053ca:	4618      	mov	r0, r3
 80053cc:	4611      	mov	r1, r2
 80053ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053d2:	461a      	mov	r2, r3
 80053d4:	f000 fd44 	bl	8005e60 <memcpy>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80053d8:	f7fe f82c 	bl	8003434 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80053dc:	f000 f92c 	bl	8005638 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80053e0:	f000 fa48 	bl	8005874 <MX_GPIO_Init>
	MX_DMA_Init();
 80053e4:	f000 fa28 	bl	8005838 <MX_DMA_Init>
	MX_ADC1_Init();
 80053e8:	f000 f980 	bl	80056ec <MX_ADC1_Init>
	MX_USART1_UART_Init();
 80053ec:	f000 f9fa 	bl	80057e4 <MX_USART1_UART_Init>
	MX_ADC2_Init();
 80053f0:	f000 f9ba 	bl	8005768 <MX_ADC2_Init>
	/* USER CODE BEGIN 2 */
	LCD_setRST(GPIOB, GPIO_PIN_4);
 80053f4:	2110      	movs	r1, #16
 80053f6:	487f      	ldr	r0, [pc, #508]	; (80055f4 <main+0x23c>)
 80053f8:	f7ff fdaa 	bl	8004f50 <LCD_setRST>
	LCD_setCE(GPIOB, GPIO_PIN_5);
 80053fc:	2120      	movs	r1, #32
 80053fe:	487d      	ldr	r0, [pc, #500]	; (80055f4 <main+0x23c>)
 8005400:	f7ff fdba 	bl	8004f78 <LCD_setCE>
	LCD_setDC(GPIOB, GPIO_PIN_6);
 8005404:	2140      	movs	r1, #64	; 0x40
 8005406:	487b      	ldr	r0, [pc, #492]	; (80055f4 <main+0x23c>)
 8005408:	f7ff fdca 	bl	8004fa0 <LCD_setDC>
	LCD_setDIN(GPIOB, GPIO_PIN_7);
 800540c:	2180      	movs	r1, #128	; 0x80
 800540e:	4879      	ldr	r0, [pc, #484]	; (80055f4 <main+0x23c>)
 8005410:	f7ff fdda 	bl	8004fc8 <LCD_setDIN>
	LCD_setCLK(GPIOB, GPIO_PIN_8);
 8005414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005418:	4876      	ldr	r0, [pc, #472]	; (80055f4 <main+0x23c>)
 800541a:	f7ff fde9 	bl	8004ff0 <LCD_setCLK>

	LCD_init();
 800541e:	f7ff fe7d 	bl	800511c <LCD_init>
	HAL_Delay(1000);
 8005422:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005426:	f7fe f867 	bl	80034f8 <HAL_Delay>
	LCD_print("Start", 0, 0);
 800542a:	2200      	movs	r2, #0
 800542c:	2100      	movs	r1, #0
 800542e:	4872      	ldr	r0, [pc, #456]	; (80055f8 <main+0x240>)
 8005430:	f7ff feec 	bl	800520c <LCD_print>
		/* USER CODE END WHILE */
#define    DWT_CYCCNT    *(volatile unsigned long *)0xE0001004
#define    DWT_CONTROL   *(volatile unsigned long *)0xE0001000
#define    SCB_DEMCR     *(volatile unsigned long *)0xE000EDFC

		SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать DWT
 8005434:	4b71      	ldr	r3, [pc, #452]	; (80055fc <main+0x244>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a70      	ldr	r2, [pc, #448]	; (80055fc <main+0x244>)
 800543a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800543e:	6013      	str	r3, [r2, #0]
		DWT_CYCCNT = 0; // обнуляем значение
 8005440:	4b6f      	ldr	r3, [pc, #444]	; (8005600 <main+0x248>)
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
		DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk; // включаем счётчик
 8005446:	4b6f      	ldr	r3, [pc, #444]	; (8005604 <main+0x24c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a6e      	ldr	r2, [pc, #440]	; (8005604 <main+0x24c>)
 800544c:	f043 0301 	orr.w	r3, r3, #1
 8005450:	6013      	str	r3, [r2, #0]

		for (int i = 0; i < 12; i++) {
 8005452:	2300      	movs	r3, #0
 8005454:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8005458:	f102 0210 	add.w	r2, r2, #16
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e029      	b.n	80054b4 <main+0xfc>
			status = ARM_MATH_SUCCESS;
 8005460:	4b69      	ldr	r3, [pc, #420]	; (8005608 <main+0x250>)
 8005462:	2200      	movs	r2, #0
 8005464:	701a      	strb	r2, [r3, #0]
			arm_cfft_f32(&arm_cfft_sR_f32_len128, testInput_f32_10khz, ifftFlag,
 8005466:	4b69      	ldr	r3, [pc, #420]	; (800560c <main+0x254>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	b2da      	uxtb	r2, r3
 800546c:	4b68      	ldr	r3, [pc, #416]	; (8005610 <main+0x258>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f107 0118 	add.w	r1, r7, #24
 8005476:	3914      	subs	r1, #20
 8005478:	4866      	ldr	r0, [pc, #408]	; (8005614 <main+0x25c>)
 800547a:	f7fc ff45 	bl	8002308 <arm_cfft_f32>
					doBitReverse);
			arm_cmplx_mag_f32(testInput_f32_10khz, testOutput, fftSize);
 800547e:	4b66      	ldr	r3, [pc, #408]	; (8005618 <main+0x260>)
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	f107 0318 	add.w	r3, r7, #24
 8005486:	3b14      	subs	r3, #20
 8005488:	4964      	ldr	r1, [pc, #400]	; (800561c <main+0x264>)
 800548a:	4618      	mov	r0, r3
 800548c:	f7fb fe05 	bl	800109a <arm_cmplx_mag_f32>
			arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
 8005490:	4b61      	ldr	r3, [pc, #388]	; (8005618 <main+0x260>)
 8005492:	6819      	ldr	r1, [r3, #0]
 8005494:	4b62      	ldr	r3, [pc, #392]	; (8005620 <main+0x268>)
 8005496:	4a63      	ldr	r2, [pc, #396]	; (8005624 <main+0x26c>)
 8005498:	4860      	ldr	r0, [pc, #384]	; (800561c <main+0x264>)
 800549a:	f7fb fec3 	bl	8001224 <arm_max_f32>
		for (int i = 0; i < 12; i++) {
 800549e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80054a2:	f103 0310 	add.w	r3, r3, #16
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3301      	adds	r3, #1
 80054aa:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80054ae:	f102 0210 	add.w	r2, r2, #16
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80054b8:	f103 0310 	add.w	r3, r3, #16
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b0b      	cmp	r3, #11
 80054c0:	ddce      	ble.n	8005460 <main+0xa8>
		}

		int count_tic = DWT_CYCCNT; //смотрим сколько времени  выполнялось
 80054c2:	4b4f      	ldr	r3, [pc, #316]	; (8005600 <main+0x248>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80054ca:	f102 020c 	add.w	r2, r2, #12
 80054ce:	6013      	str	r3, [r2, #0]
		LCD_print("tic=", 0, 3);
 80054d0:	2203      	movs	r2, #3
 80054d2:	2100      	movs	r1, #0
 80054d4:	4854      	ldr	r0, [pc, #336]	; (8005628 <main+0x270>)
 80054d6:	f7ff fe99 	bl	800520c <LCD_print>
		lcd_out_number(count_tic, 35, 3);
 80054da:	2203      	movs	r2, #3
 80054dc:	2123      	movs	r1, #35	; 0x23
 80054de:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80054e2:	f103 030c 	add.w	r3, r3, #12
 80054e6:	6818      	ldr	r0, [r3, #0]
 80054e8:	f7ff ff06 	bl	80052f8 <lcd_out_number>
//		LCD_print("T12=", 0, 4);
//		lcd_out_number((count_tic*1000.0)/72000000.0, 35, 4);

		if (testIndex != refIndex) {
 80054ec:	4b4c      	ldr	r3, [pc, #304]	; (8005620 <main+0x268>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4b4e      	ldr	r3, [pc, #312]	; (800562c <main+0x274>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d002      	beq.n	80054fe <main+0x146>
			status = ARM_MATH_TEST_FAILURE;
 80054f8:	4b43      	ldr	r3, [pc, #268]	; (8005608 <main+0x250>)
 80054fa:	22fa      	movs	r2, #250	; 0xfa
 80054fc:	701a      	strb	r2, [r3, #0]
		}

		uint8_t data[fftSize];
 80054fe:	4b46      	ldr	r3, [pc, #280]	; (8005618 <main+0x260>)
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	466b      	mov	r3, sp
 8005504:	461d      	mov	r5, r3
 8005506:	4603      	mov	r3, r0
 8005508:	3b01      	subs	r3, #1
 800550a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800550e:	f102 0208 	add.w	r2, r2, #8
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	4601      	mov	r1, r0
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	f04f 0400 	mov.w	r4, #0
 8005522:	00d4      	lsls	r4, r2, #3
 8005524:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8005528:	00cb      	lsls	r3, r1, #3
 800552a:	4601      	mov	r1, r0
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	f04f 0400 	mov.w	r4, #0
 8005538:	00d4      	lsls	r4, r2, #3
 800553a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800553e:	00cb      	lsls	r3, r1, #3
 8005540:	1dc3      	adds	r3, r0, #7
 8005542:	08db      	lsrs	r3, r3, #3
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	ebad 0d03 	sub.w	sp, sp, r3
 800554a:	466b      	mov	r3, sp
 800554c:	3300      	adds	r3, #0
 800554e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8005552:	f102 0204 	add.w	r2, r2, #4
 8005556:	6013      	str	r3, [r2, #0]

		for (int unit = 0; unit < fftSize; unit++) {
 8005558:	2300      	movs	r3, #0
 800555a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800555e:	f102 0214 	add.w	r2, r2, #20
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	e024      	b.n	80055b0 <main+0x1f8>
			data[unit] = (uint8_t) testOutput[unit];
 8005566:	4a2d      	ldr	r2, [pc, #180]	; (800561c <main+0x264>)
 8005568:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800556c:	f103 0314 	add.w	r3, r3, #20
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005576:	4618      	mov	r0, r3
 8005578:	f7fb fd50 	bl	800101c <__aeabi_f2uiz>
 800557c:	4603      	mov	r3, r0
 800557e:	b2d9      	uxtb	r1, r3
 8005580:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8005584:	f103 0304 	add.w	r3, r3, #4
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800558e:	f103 0314 	add.w	r3, r3, #20
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4413      	add	r3, r2
 8005596:	460a      	mov	r2, r1
 8005598:	701a      	strb	r2, [r3, #0]
		for (int unit = 0; unit < fftSize; unit++) {
 800559a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800559e:	f103 0314 	add.w	r3, r3, #20
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3301      	adds	r3, #1
 80055a6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80055aa:	f102 0214 	add.w	r2, r2, #20
 80055ae:	6013      	str	r3, [r2, #0]
 80055b0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80055b4:	f103 0314 	add.w	r3, r3, #20
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4b17      	ldr	r3, [pc, #92]	; (8005618 <main+0x260>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d3d1      	bcc.n	8005566 <main+0x1ae>
		}

		HAL_UART_Transmit(&huart1, data, fftSize, HAL_MAX_DELAY);
 80055c2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80055c6:	f103 0304 	add.w	r3, r3, #4
 80055ca:	6819      	ldr	r1, [r3, #0]
 80055cc:	4b12      	ldr	r3, [pc, #72]	; (8005618 <main+0x260>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055d6:	4816      	ldr	r0, [pc, #88]	; (8005630 <main+0x278>)
 80055d8:	f7ff fabf 	bl	8004b5a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, "\n", 1, HAL_MAX_DELAY);
 80055dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055e0:	2201      	movs	r2, #1
 80055e2:	4914      	ldr	r1, [pc, #80]	; (8005634 <main+0x27c>)
 80055e4:	4812      	ldr	r0, [pc, #72]	; (8005630 <main+0x278>)
 80055e6:	f7ff fab8 	bl	8004b5a <HAL_UART_Transmit>
 80055ea:	46ad      	mov	sp, r5
	while (1) {
 80055ec:	e722      	b.n	8005434 <main+0x7c>
 80055ee:	bf00      	nop
 80055f0:	08005ec8 	.word	0x08005ec8
 80055f4:	40010c00 	.word	0x40010c00
 80055f8:	08005eb4 	.word	0x08005eb4
 80055fc:	e000edfc 	.word	0xe000edfc
 8005600:	e0001004 	.word	0xe0001004
 8005604:	e0001000 	.word	0xe0001000
 8005608:	200004cc 	.word	0x200004cc
 800560c:	2000009c 	.word	0x2000009c
 8005610:	2000000c 	.word	0x2000000c
 8005614:	08008468 	.word	0x08008468
 8005618:	20000008 	.word	0x20000008
 800561c:	200000a4 	.word	0x200000a4
 8005620:	200000a0 	.word	0x200000a0
 8005624:	200003fc 	.word	0x200003fc
 8005628:	08005ebc 	.word	0x08005ebc
 800562c:	20000010 	.word	0x20000010
 8005630:	20000448 	.word	0x20000448
 8005634:	08005ec4 	.word	0x08005ec4

08005638 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005638:	b580      	push	{r7, lr}
 800563a:	b094      	sub	sp, #80	; 0x50
 800563c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800563e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005642:	2228      	movs	r2, #40	; 0x28
 8005644:	2100      	movs	r1, #0
 8005646:	4618      	mov	r0, r3
 8005648:	f000 fc15 	bl	8005e76 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800564c:	f107 0314 	add.w	r3, r7, #20
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	605a      	str	r2, [r3, #4]
 8005656:	609a      	str	r2, [r3, #8]
 8005658:	60da      	str	r2, [r3, #12]
 800565a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800565c:	1d3b      	adds	r3, r7, #4
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	605a      	str	r2, [r3, #4]
 8005664:	609a      	str	r2, [r3, #8]
 8005666:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005668:	2301      	movs	r3, #1
 800566a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800566c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005670:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005672:	2300      	movs	r3, #0
 8005674:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005676:	2301      	movs	r3, #1
 8005678:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800567a:	2302      	movs	r3, #2
 800567c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800567e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005682:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005684:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005688:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800568a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800568e:	4618      	mov	r0, r3
 8005690:	f7fe fd3e 	bl	8004110 <HAL_RCC_OscConfig>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <SystemClock_Config+0x66>
		Error_Handler();
 800569a:	f000 f943 	bl	8005924 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800569e:	230f      	movs	r3, #15
 80056a0:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80056a2:	2302      	movs	r3, #2
 80056a4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80056a6:	23a0      	movs	r3, #160	; 0xa0
 80056a8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80056aa:	2300      	movs	r3, #0
 80056ac:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80056ae:	2300      	movs	r3, #0
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80056b2:	f107 0314 	add.w	r3, r7, #20
 80056b6:	2102      	movs	r1, #2
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fe ff8d 	bl	80045d8 <HAL_RCC_ClockConfig>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <SystemClock_Config+0x90>
		Error_Handler();
 80056c4:	f000 f92e 	bl	8005924 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80056c8:	2302      	movs	r3, #2
 80056ca:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80056d0:	1d3b      	adds	r3, r7, #4
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff f93e 	bl	8004954 <HAL_RCCEx_PeriphCLKConfig>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <SystemClock_Config+0xaa>
		Error_Handler();
 80056de:	f000 f921 	bl	8005924 <Error_Handler>
	}
}
 80056e2:	bf00      	nop
 80056e4:	3750      	adds	r7, #80	; 0x50
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80056f2:	1d3b      	adds	r3, r7, #4
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	605a      	str	r2, [r3, #4]
 80056fa:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 80056fc:	4b18      	ldr	r3, [pc, #96]	; (8005760 <MX_ADC1_Init+0x74>)
 80056fe:	4a19      	ldr	r2, [pc, #100]	; (8005764 <MX_ADC1_Init+0x78>)
 8005700:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005702:	4b17      	ldr	r3, [pc, #92]	; (8005760 <MX_ADC1_Init+0x74>)
 8005704:	2200      	movs	r2, #0
 8005706:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8005708:	4b15      	ldr	r3, [pc, #84]	; (8005760 <MX_ADC1_Init+0x74>)
 800570a:	2200      	movs	r2, #0
 800570c:	60da      	str	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800570e:	4b14      	ldr	r3, [pc, #80]	; (8005760 <MX_ADC1_Init+0x74>)
 8005710:	2200      	movs	r2, #0
 8005712:	615a      	str	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005714:	4b12      	ldr	r3, [pc, #72]	; (8005760 <MX_ADC1_Init+0x74>)
 8005716:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800571a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800571c:	4b10      	ldr	r3, [pc, #64]	; (8005760 <MX_ADC1_Init+0x74>)
 800571e:	2200      	movs	r2, #0
 8005720:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8005722:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <MX_ADC1_Init+0x74>)
 8005724:	2201      	movs	r2, #1
 8005726:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8005728:	480d      	ldr	r0, [pc, #52]	; (8005760 <MX_ADC1_Init+0x74>)
 800572a:	f7fd ff07 	bl	800353c <HAL_ADC_Init>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8005734:	f000 f8f6 	bl	8005924 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8005738:	2300      	movs	r3, #0
 800573a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800573c:	2301      	movs	r3, #1
 800573e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005740:	2300      	movs	r3, #0
 8005742:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8005744:	1d3b      	adds	r3, r7, #4
 8005746:	4619      	mov	r1, r3
 8005748:	4805      	ldr	r0, [pc, #20]	; (8005760 <MX_ADC1_Init+0x74>)
 800574a:	f7fd ffcf 	bl	80036ec <HAL_ADC_ConfigChannel>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8005754:	f000 f8e6 	bl	8005924 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8005758:	bf00      	nop
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	20000418 	.word	0x20000418
 8005764:	40012400 	.word	0x40012400

08005768 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800576e:	1d3b      	adds	r3, r7, #4
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	605a      	str	r2, [r3, #4]
 8005776:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Common config
	 */
	hadc2.Instance = ADC2;
 8005778:	4b18      	ldr	r3, [pc, #96]	; (80057dc <MX_ADC2_Init+0x74>)
 800577a:	4a19      	ldr	r2, [pc, #100]	; (80057e0 <MX_ADC2_Init+0x78>)
 800577c:	601a      	str	r2, [r3, #0]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800577e:	4b17      	ldr	r3, [pc, #92]	; (80057dc <MX_ADC2_Init+0x74>)
 8005780:	2200      	movs	r2, #0
 8005782:	609a      	str	r2, [r3, #8]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8005784:	4b15      	ldr	r3, [pc, #84]	; (80057dc <MX_ADC2_Init+0x74>)
 8005786:	2200      	movs	r2, #0
 8005788:	60da      	str	r2, [r3, #12]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800578a:	4b14      	ldr	r3, [pc, #80]	; (80057dc <MX_ADC2_Init+0x74>)
 800578c:	2200      	movs	r2, #0
 800578e:	615a      	str	r2, [r3, #20]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005790:	4b12      	ldr	r3, [pc, #72]	; (80057dc <MX_ADC2_Init+0x74>)
 8005792:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005796:	61da      	str	r2, [r3, #28]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005798:	4b10      	ldr	r3, [pc, #64]	; (80057dc <MX_ADC2_Init+0x74>)
 800579a:	2200      	movs	r2, #0
 800579c:	605a      	str	r2, [r3, #4]
	hadc2.Init.NbrOfConversion = 1;
 800579e:	4b0f      	ldr	r3, [pc, #60]	; (80057dc <MX_ADC2_Init+0x74>)
 80057a0:	2201      	movs	r2, #1
 80057a2:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80057a4:	480d      	ldr	r0, [pc, #52]	; (80057dc <MX_ADC2_Init+0x74>)
 80057a6:	f7fd fec9 	bl	800353c <HAL_ADC_Init>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <MX_ADC2_Init+0x4c>
		Error_Handler();
 80057b0:	f000 f8b8 	bl	8005924 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 80057b4:	2308      	movs	r3, #8
 80057b6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80057b8:	2301      	movs	r3, #1
 80057ba:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 80057c0:	1d3b      	adds	r3, r7, #4
 80057c2:	4619      	mov	r1, r3
 80057c4:	4805      	ldr	r0, [pc, #20]	; (80057dc <MX_ADC2_Init+0x74>)
 80057c6:	f7fd ff91 	bl	80036ec <HAL_ADC_ConfigChannel>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <MX_ADC2_Init+0x6c>
		Error_Handler();
 80057d0:	f000 f8a8 	bl	8005924 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 80057d4:	bf00      	nop
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	200003cc 	.word	0x200003cc
 80057e0:	40012800 	.word	0x40012800

080057e4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80057e8:	4b11      	ldr	r3, [pc, #68]	; (8005830 <MX_USART1_UART_Init+0x4c>)
 80057ea:	4a12      	ldr	r2, [pc, #72]	; (8005834 <MX_USART1_UART_Init+0x50>)
 80057ec:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80057ee:	4b10      	ldr	r3, [pc, #64]	; (8005830 <MX_USART1_UART_Init+0x4c>)
 80057f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80057f4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80057f6:	4b0e      	ldr	r3, [pc, #56]	; (8005830 <MX_USART1_UART_Init+0x4c>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80057fc:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <MX_USART1_UART_Init+0x4c>)
 80057fe:	2200      	movs	r2, #0
 8005800:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8005802:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <MX_USART1_UART_Init+0x4c>)
 8005804:	2200      	movs	r2, #0
 8005806:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8005808:	4b09      	ldr	r3, [pc, #36]	; (8005830 <MX_USART1_UART_Init+0x4c>)
 800580a:	220c      	movs	r2, #12
 800580c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800580e:	4b08      	ldr	r3, [pc, #32]	; (8005830 <MX_USART1_UART_Init+0x4c>)
 8005810:	2200      	movs	r2, #0
 8005812:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005814:	4b06      	ldr	r3, [pc, #24]	; (8005830 <MX_USART1_UART_Init+0x4c>)
 8005816:	2200      	movs	r2, #0
 8005818:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800581a:	4805      	ldr	r0, [pc, #20]	; (8005830 <MX_USART1_UART_Init+0x4c>)
 800581c:	f7ff f950 	bl	8004ac0 <HAL_UART_Init>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8005826:	f000 f87d 	bl	8005924 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800582a:	bf00      	nop
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000448 	.word	0x20000448
 8005834:	40013800 	.word	0x40013800

08005838 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE()
 800583e:	4b0c      	ldr	r3, [pc, #48]	; (8005870 <MX_DMA_Init+0x38>)
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	4a0b      	ldr	r2, [pc, #44]	; (8005870 <MX_DMA_Init+0x38>)
 8005844:	f043 0301 	orr.w	r3, r3, #1
 8005848:	6153      	str	r3, [r2, #20]
 800584a:	4b09      	ldr	r3, [pc, #36]	; (8005870 <MX_DMA_Init+0x38>)
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	607b      	str	r3, [r7, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
	;

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005856:	2200      	movs	r2, #0
 8005858:	2100      	movs	r1, #0
 800585a:	200b      	movs	r0, #11
 800585c:	f7fe f94b 	bl	8003af6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005860:	200b      	movs	r0, #11
 8005862:	f7fe f964 	bl	8003b2e <HAL_NVIC_EnableIRQ>

}
 8005866:	bf00      	nop
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	40021000 	.word	0x40021000

08005874 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800587a:	f107 0310 	add.w	r3, r7, #16
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	605a      	str	r2, [r3, #4]
 8005884:	609a      	str	r2, [r3, #8]
 8005886:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8005888:	4b24      	ldr	r3, [pc, #144]	; (800591c <MX_GPIO_Init+0xa8>)
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	4a23      	ldr	r2, [pc, #140]	; (800591c <MX_GPIO_Init+0xa8>)
 800588e:	f043 0320 	orr.w	r3, r3, #32
 8005892:	6193      	str	r3, [r2, #24]
 8005894:	4b21      	ldr	r3, [pc, #132]	; (800591c <MX_GPIO_Init+0xa8>)
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f003 0320 	and.w	r3, r3, #32
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80058a0:	4b1e      	ldr	r3, [pc, #120]	; (800591c <MX_GPIO_Init+0xa8>)
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	4a1d      	ldr	r2, [pc, #116]	; (800591c <MX_GPIO_Init+0xa8>)
 80058a6:	f043 0310 	orr.w	r3, r3, #16
 80058aa:	6193      	str	r3, [r2, #24]
 80058ac:	4b1b      	ldr	r3, [pc, #108]	; (800591c <MX_GPIO_Init+0xa8>)
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f003 0310 	and.w	r3, r3, #16
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80058b8:	4b18      	ldr	r3, [pc, #96]	; (800591c <MX_GPIO_Init+0xa8>)
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	4a17      	ldr	r2, [pc, #92]	; (800591c <MX_GPIO_Init+0xa8>)
 80058be:	f043 0304 	orr.w	r3, r3, #4
 80058c2:	6193      	str	r3, [r2, #24]
 80058c4:	4b15      	ldr	r3, [pc, #84]	; (800591c <MX_GPIO_Init+0xa8>)
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	607b      	str	r3, [r7, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80058d0:	4b12      	ldr	r3, [pc, #72]	; (800591c <MX_GPIO_Init+0xa8>)
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	4a11      	ldr	r2, [pc, #68]	; (800591c <MX_GPIO_Init+0xa8>)
 80058d6:	f043 0308 	orr.w	r3, r3, #8
 80058da:	6193      	str	r3, [r2, #24]
 80058dc:	4b0f      	ldr	r3, [pc, #60]	; (800591c <MX_GPIO_Init+0xa8>)
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	f003 0308 	and.w	r3, r3, #8
 80058e4:	603b      	str	r3, [r7, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80058e8:	2200      	movs	r2, #0
 80058ea:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80058ee:	480c      	ldr	r0, [pc, #48]	; (8005920 <MX_GPIO_Init+0xac>)
 80058f0:	f7fe fbf6 	bl	80040e0 <HAL_GPIO_WritePin>
			GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PB4 PB5 PB6 PB7
	 PB8 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
 80058f4:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 80058f8:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058fa:	2301      	movs	r3, #1
 80058fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005902:	2302      	movs	r3, #2
 8005904:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005906:	f107 0310 	add.w	r3, r7, #16
 800590a:	4619      	mov	r1, r3
 800590c:	4804      	ldr	r0, [pc, #16]	; (8005920 <MX_GPIO_Init+0xac>)
 800590e:	f7fe fa89 	bl	8003e24 <HAL_GPIO_Init>

}
 8005912:	bf00      	nop
 8005914:	3720      	adds	r7, #32
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	40021000 	.word	0x40021000
 8005920:	40010c00 	.word	0x40010c00

08005924 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8005928:	bf00      	nop
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr

08005930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005936:	4b15      	ldr	r3, [pc, #84]	; (800598c <HAL_MspInit+0x5c>)
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	4a14      	ldr	r2, [pc, #80]	; (800598c <HAL_MspInit+0x5c>)
 800593c:	f043 0301 	orr.w	r3, r3, #1
 8005940:	6193      	str	r3, [r2, #24]
 8005942:	4b12      	ldr	r3, [pc, #72]	; (800598c <HAL_MspInit+0x5c>)
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	60bb      	str	r3, [r7, #8]
 800594c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800594e:	4b0f      	ldr	r3, [pc, #60]	; (800598c <HAL_MspInit+0x5c>)
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	4a0e      	ldr	r2, [pc, #56]	; (800598c <HAL_MspInit+0x5c>)
 8005954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005958:	61d3      	str	r3, [r2, #28]
 800595a:	4b0c      	ldr	r3, [pc, #48]	; (800598c <HAL_MspInit+0x5c>)
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005962:	607b      	str	r3, [r7, #4]
 8005964:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005966:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <HAL_MspInit+0x60>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	4a04      	ldr	r2, [pc, #16]	; (8005990 <HAL_MspInit+0x60>)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005982:	bf00      	nop
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr
 800598c:	40021000 	.word	0x40021000
 8005990:	40010000 	.word	0x40010000

08005994 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08c      	sub	sp, #48	; 0x30
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800599c:	f107 0320 	add.w	r3, r7, #32
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	605a      	str	r2, [r3, #4]
 80059a6:	609a      	str	r2, [r3, #8]
 80059a8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a52      	ldr	r2, [pc, #328]	; (8005af8 <HAL_ADC_MspInit+0x164>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d176      	bne.n	8005aa2 <HAL_ADC_MspInit+0x10e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80059b4:	4b51      	ldr	r3, [pc, #324]	; (8005afc <HAL_ADC_MspInit+0x168>)
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	4a50      	ldr	r2, [pc, #320]	; (8005afc <HAL_ADC_MspInit+0x168>)
 80059ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059be:	6193      	str	r3, [r2, #24]
 80059c0:	4b4e      	ldr	r3, [pc, #312]	; (8005afc <HAL_ADC_MspInit+0x168>)
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059c8:	61fb      	str	r3, [r7, #28]
 80059ca:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059cc:	4b4b      	ldr	r3, [pc, #300]	; (8005afc <HAL_ADC_MspInit+0x168>)
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	4a4a      	ldr	r2, [pc, #296]	; (8005afc <HAL_ADC_MspInit+0x168>)
 80059d2:	f043 0310 	orr.w	r3, r3, #16
 80059d6:	6193      	str	r3, [r2, #24]
 80059d8:	4b48      	ldr	r3, [pc, #288]	; (8005afc <HAL_ADC_MspInit+0x168>)
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	61bb      	str	r3, [r7, #24]
 80059e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059e4:	4b45      	ldr	r3, [pc, #276]	; (8005afc <HAL_ADC_MspInit+0x168>)
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	4a44      	ldr	r2, [pc, #272]	; (8005afc <HAL_ADC_MspInit+0x168>)
 80059ea:	f043 0304 	orr.w	r3, r3, #4
 80059ee:	6193      	str	r3, [r2, #24]
 80059f0:	4b42      	ldr	r3, [pc, #264]	; (8005afc <HAL_ADC_MspInit+0x168>)
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	617b      	str	r3, [r7, #20]
 80059fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059fc:	4b3f      	ldr	r3, [pc, #252]	; (8005afc <HAL_ADC_MspInit+0x168>)
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	4a3e      	ldr	r2, [pc, #248]	; (8005afc <HAL_ADC_MspInit+0x168>)
 8005a02:	f043 0308 	orr.w	r3, r3, #8
 8005a06:	6193      	str	r3, [r2, #24]
 8005a08:	4b3c      	ldr	r3, [pc, #240]	; (8005afc <HAL_ADC_MspInit+0x168>)
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	693b      	ldr	r3, [r7, #16]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8005a14:	2307      	movs	r3, #7
 8005a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a1c:	f107 0320 	add.w	r3, r7, #32
 8005a20:	4619      	mov	r1, r3
 8005a22:	4837      	ldr	r0, [pc, #220]	; (8005b00 <HAL_ADC_MspInit+0x16c>)
 8005a24:	f7fe f9fe 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8005a28:	23ff      	movs	r3, #255	; 0xff
 8005a2a:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a30:	f107 0320 	add.w	r3, r7, #32
 8005a34:	4619      	mov	r1, r3
 8005a36:	4833      	ldr	r0, [pc, #204]	; (8005b04 <HAL_ADC_MspInit+0x170>)
 8005a38:	f7fe f9f4 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a40:	2303      	movs	r3, #3
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a44:	f107 0320 	add.w	r3, r7, #32
 8005a48:	4619      	mov	r1, r3
 8005a4a:	482f      	ldr	r0, [pc, #188]	; (8005b08 <HAL_ADC_MspInit+0x174>)
 8005a4c:	f7fe f9ea 	bl	8003e24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005a50:	4b2e      	ldr	r3, [pc, #184]	; (8005b0c <HAL_ADC_MspInit+0x178>)
 8005a52:	4a2f      	ldr	r2, [pc, #188]	; (8005b10 <HAL_ADC_MspInit+0x17c>)
 8005a54:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a56:	4b2d      	ldr	r3, [pc, #180]	; (8005b0c <HAL_ADC_MspInit+0x178>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a5c:	4b2b      	ldr	r3, [pc, #172]	; (8005b0c <HAL_ADC_MspInit+0x178>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005a62:	4b2a      	ldr	r3, [pc, #168]	; (8005b0c <HAL_ADC_MspInit+0x178>)
 8005a64:	2280      	movs	r2, #128	; 0x80
 8005a66:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005a68:	4b28      	ldr	r3, [pc, #160]	; (8005b0c <HAL_ADC_MspInit+0x178>)
 8005a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a6e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005a70:	4b26      	ldr	r3, [pc, #152]	; (8005b0c <HAL_ADC_MspInit+0x178>)
 8005a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a76:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005a78:	4b24      	ldr	r3, [pc, #144]	; (8005b0c <HAL_ADC_MspInit+0x178>)
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005a7e:	4b23      	ldr	r3, [pc, #140]	; (8005b0c <HAL_ADC_MspInit+0x178>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005a84:	4821      	ldr	r0, [pc, #132]	; (8005b0c <HAL_ADC_MspInit+0x178>)
 8005a86:	f7fe f86d 	bl	8003b64 <HAL_DMA_Init>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8005a90:	f7ff ff48 	bl	8005924 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a1d      	ldr	r2, [pc, #116]	; (8005b0c <HAL_ADC_MspInit+0x178>)
 8005a98:	621a      	str	r2, [r3, #32]
 8005a9a:	4a1c      	ldr	r2, [pc, #112]	; (8005b0c <HAL_ADC_MspInit+0x178>)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005aa0:	e026      	b.n	8005af0 <HAL_ADC_MspInit+0x15c>
  else if(hadc->Instance==ADC2)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a1b      	ldr	r2, [pc, #108]	; (8005b14 <HAL_ADC_MspInit+0x180>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d121      	bne.n	8005af0 <HAL_ADC_MspInit+0x15c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005aac:	4b13      	ldr	r3, [pc, #76]	; (8005afc <HAL_ADC_MspInit+0x168>)
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	4a12      	ldr	r2, [pc, #72]	; (8005afc <HAL_ADC_MspInit+0x168>)
 8005ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ab6:	6193      	str	r3, [r2, #24]
 8005ab8:	4b10      	ldr	r3, [pc, #64]	; (8005afc <HAL_ADC_MspInit+0x168>)
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ac4:	4b0d      	ldr	r3, [pc, #52]	; (8005afc <HAL_ADC_MspInit+0x168>)
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	4a0c      	ldr	r2, [pc, #48]	; (8005afc <HAL_ADC_MspInit+0x168>)
 8005aca:	f043 0308 	orr.w	r3, r3, #8
 8005ace:	6193      	str	r3, [r2, #24]
 8005ad0:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <HAL_ADC_MspInit+0x168>)
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	60bb      	str	r3, [r7, #8]
 8005ada:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005adc:	2301      	movs	r3, #1
 8005ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ae4:	f107 0320 	add.w	r3, r7, #32
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4807      	ldr	r0, [pc, #28]	; (8005b08 <HAL_ADC_MspInit+0x174>)
 8005aec:	f7fe f99a 	bl	8003e24 <HAL_GPIO_Init>
}
 8005af0:	bf00      	nop
 8005af2:	3730      	adds	r7, #48	; 0x30
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40012400 	.word	0x40012400
 8005afc:	40021000 	.word	0x40021000
 8005b00:	40011000 	.word	0x40011000
 8005b04:	40010800 	.word	0x40010800
 8005b08:	40010c00 	.word	0x40010c00
 8005b0c:	20000488 	.word	0x20000488
 8005b10:	40020008 	.word	0x40020008
 8005b14:	40012800 	.word	0x40012800

08005b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b20:	f107 0310 	add.w	r3, r7, #16
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	605a      	str	r2, [r3, #4]
 8005b2a:	609a      	str	r2, [r3, #8]
 8005b2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a1c      	ldr	r2, [pc, #112]	; (8005ba4 <HAL_UART_MspInit+0x8c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d131      	bne.n	8005b9c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b38:	4b1b      	ldr	r3, [pc, #108]	; (8005ba8 <HAL_UART_MspInit+0x90>)
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	4a1a      	ldr	r2, [pc, #104]	; (8005ba8 <HAL_UART_MspInit+0x90>)
 8005b3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b42:	6193      	str	r3, [r2, #24]
 8005b44:	4b18      	ldr	r3, [pc, #96]	; (8005ba8 <HAL_UART_MspInit+0x90>)
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b50:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <HAL_UART_MspInit+0x90>)
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	4a14      	ldr	r2, [pc, #80]	; (8005ba8 <HAL_UART_MspInit+0x90>)
 8005b56:	f043 0304 	orr.w	r3, r3, #4
 8005b5a:	6193      	str	r3, [r2, #24]
 8005b5c:	4b12      	ldr	r3, [pc, #72]	; (8005ba8 <HAL_UART_MspInit+0x90>)
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b6e:	2302      	movs	r3, #2
 8005b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b72:	2303      	movs	r3, #3
 8005b74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b76:	f107 0310 	add.w	r3, r7, #16
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	480b      	ldr	r0, [pc, #44]	; (8005bac <HAL_UART_MspInit+0x94>)
 8005b7e:	f7fe f951 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b90:	f107 0310 	add.w	r3, r7, #16
 8005b94:	4619      	mov	r1, r3
 8005b96:	4805      	ldr	r0, [pc, #20]	; (8005bac <HAL_UART_MspInit+0x94>)
 8005b98:	f7fe f944 	bl	8003e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005b9c:	bf00      	nop
 8005b9e:	3720      	adds	r7, #32
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	40013800 	.word	0x40013800
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	40010800 	.word	0x40010800

08005bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005bb4:	bf00      	nop
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bc80      	pop	{r7}
 8005bba:	4770      	bx	lr

08005bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005bc0:	e7fe      	b.n	8005bc0 <HardFault_Handler+0x4>

08005bc2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005bc6:	e7fe      	b.n	8005bc6 <MemManage_Handler+0x4>

08005bc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005bcc:	e7fe      	b.n	8005bcc <BusFault_Handler+0x4>

08005bce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005bd2:	e7fe      	b.n	8005bd2 <UsageFault_Handler+0x4>

08005bd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005bd8:	bf00      	nop
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bc80      	pop	{r7}
 8005bde:	4770      	bx	lr

08005be0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005be4:	bf00      	nop
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr

08005bec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005bf0:	bf00      	nop
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr

08005bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005bfc:	f7fd fc60 	bl	80034c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c00:	bf00      	nop
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005c08:	4802      	ldr	r0, [pc, #8]	; (8005c14 <DMA1_Channel1_IRQHandler+0x10>)
 8005c0a:	f7fe f805 	bl	8003c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005c0e:	bf00      	nop
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20000488 	.word	0x20000488

08005c18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005c1c:	4b15      	ldr	r3, [pc, #84]	; (8005c74 <SystemInit+0x5c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a14      	ldr	r2, [pc, #80]	; (8005c74 <SystemInit+0x5c>)
 8005c22:	f043 0301 	orr.w	r3, r3, #1
 8005c26:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005c28:	4b12      	ldr	r3, [pc, #72]	; (8005c74 <SystemInit+0x5c>)
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	4911      	ldr	r1, [pc, #68]	; (8005c74 <SystemInit+0x5c>)
 8005c2e:	4b12      	ldr	r3, [pc, #72]	; (8005c78 <SystemInit+0x60>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005c34:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <SystemInit+0x5c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a0e      	ldr	r2, [pc, #56]	; (8005c74 <SystemInit+0x5c>)
 8005c3a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c42:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <SystemInit+0x5c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a0a      	ldr	r2, [pc, #40]	; (8005c74 <SystemInit+0x5c>)
 8005c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c4e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005c50:	4b08      	ldr	r3, [pc, #32]	; (8005c74 <SystemInit+0x5c>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	4a07      	ldr	r2, [pc, #28]	; (8005c74 <SystemInit+0x5c>)
 8005c56:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005c5a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <SystemInit+0x5c>)
 8005c5e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005c62:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <SystemInit+0x64>)
 8005c66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c6a:	609a      	str	r2, [r3, #8]
#endif 
}
 8005c6c:	bf00      	nop
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr
 8005c74:	40021000 	.word	0x40021000
 8005c78:	f8ff0000 	.word	0xf8ff0000
 8005c7c:	e000ed00 	.word	0xe000ed00

08005c80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005c80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005c82:	e003      	b.n	8005c8c <LoopCopyDataInit>

08005c84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005c84:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005c86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005c88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005c8a:	3104      	adds	r1, #4

08005c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005c8c:	480a      	ldr	r0, [pc, #40]	; (8005cb8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005c8e:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005c90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005c92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005c94:	d3f6      	bcc.n	8005c84 <CopyDataInit>
  ldr r2, =_sbss
 8005c96:	4a0a      	ldr	r2, [pc, #40]	; (8005cc0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005c98:	e002      	b.n	8005ca0 <LoopFillZerobss>

08005c9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005c9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005c9c:	f842 3b04 	str.w	r3, [r2], #4

08005ca0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005ca0:	4b08      	ldr	r3, [pc, #32]	; (8005cc4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005ca2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005ca4:	d3f9      	bcc.n	8005c9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005ca6:	f7ff ffb7 	bl	8005c18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005caa:	f000 f8b5 	bl	8005e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005cae:	f7ff fb83 	bl	80053b8 <main>
  bx lr
 8005cb2:	4770      	bx	lr
  ldr r3, =_sidata
 8005cb4:	080086e0 	.word	0x080086e0
  ldr r0, =_sdata
 8005cb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005cbc:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8005cc0:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8005cc4:	200004d0 	.word	0x200004d0

08005cc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005cc8:	e7fe      	b.n	8005cc8 <ADC1_2_IRQHandler>
	...

08005ccc <sqrtf>:
 8005ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cce:	b08b      	sub	sp, #44	; 0x2c
 8005cd0:	4604      	mov	r4, r0
 8005cd2:	f000 f845 	bl	8005d60 <__ieee754_sqrtf>
 8005cd6:	4b20      	ldr	r3, [pc, #128]	; (8005d58 <sqrtf+0x8c>)
 8005cd8:	4606      	mov	r6, r0
 8005cda:	f993 5000 	ldrsb.w	r5, [r3]
 8005cde:	1c6b      	adds	r3, r5, #1
 8005ce0:	d02a      	beq.n	8005d38 <sqrtf+0x6c>
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f7fb f983 	bl	8000ff0 <__aeabi_fcmpun>
 8005cea:	4607      	mov	r7, r0
 8005cec:	bb20      	cbnz	r0, 8005d38 <sqrtf+0x6c>
 8005cee:	2100      	movs	r1, #0
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f7fb f955 	bl	8000fa0 <__aeabi_fcmplt>
 8005cf6:	b1f8      	cbz	r0, 8005d38 <sqrtf+0x6c>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	4b17      	ldr	r3, [pc, #92]	; (8005d5c <sqrtf+0x90>)
 8005cfe:	4620      	mov	r0, r4
 8005d00:	9301      	str	r3, [sp, #4]
 8005d02:	9708      	str	r7, [sp, #32]
 8005d04:	f7fa fbe6 	bl	80004d4 <__aeabi_f2d>
 8005d08:	2200      	movs	r2, #0
 8005d0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d12:	2300      	movs	r3, #0
 8005d14:	b99d      	cbnz	r5, 8005d3e <sqrtf+0x72>
 8005d16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005d1a:	4668      	mov	r0, sp
 8005d1c:	f000 f873 	bl	8005e06 <matherr>
 8005d20:	b1a8      	cbz	r0, 8005d4e <sqrtf+0x82>
 8005d22:	9b08      	ldr	r3, [sp, #32]
 8005d24:	b11b      	cbz	r3, 8005d2e <sqrtf+0x62>
 8005d26:	f000 f871 	bl	8005e0c <__errno>
 8005d2a:	9b08      	ldr	r3, [sp, #32]
 8005d2c:	6003      	str	r3, [r0, #0]
 8005d2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d32:	f7fa fe39 	bl	80009a8 <__aeabi_d2f>
 8005d36:	4606      	mov	r6, r0
 8005d38:	4630      	mov	r0, r6
 8005d3a:	b00b      	add	sp, #44	; 0x2c
 8005d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d3e:	4610      	mov	r0, r2
 8005d40:	4619      	mov	r1, r3
 8005d42:	f7fa fd49 	bl	80007d8 <__aeabi_ddiv>
 8005d46:	2d02      	cmp	r5, #2
 8005d48:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d4c:	d1e5      	bne.n	8005d1a <sqrtf+0x4e>
 8005d4e:	f000 f85d 	bl	8005e0c <__errno>
 8005d52:	2321      	movs	r3, #33	; 0x21
 8005d54:	6003      	str	r3, [r0, #0]
 8005d56:	e7e4      	b.n	8005d22 <sqrtf+0x56>
 8005d58:	20000018 	.word	0x20000018
 8005d5c:	080086d0 	.word	0x080086d0

08005d60 <__ieee754_sqrtf>:
 8005d60:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8005d64:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005d68:	b570      	push	{r4, r5, r6, lr}
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	d309      	bcc.n	8005d84 <__ieee754_sqrtf+0x24>
 8005d70:	4601      	mov	r1, r0
 8005d72:	f7fa ff77 	bl	8000c64 <__aeabi_fmul>
 8005d76:	4601      	mov	r1, r0
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f7fa fe6b 	bl	8000a54 <__addsf3>
 8005d7e:	4604      	mov	r4, r0
 8005d80:	4620      	mov	r0, r4
 8005d82:	bd70      	pop	{r4, r5, r6, pc}
 8005d84:	2a00      	cmp	r2, #0
 8005d86:	d0fb      	beq.n	8005d80 <__ieee754_sqrtf+0x20>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	da06      	bge.n	8005d9a <__ieee754_sqrtf+0x3a>
 8005d8c:	4601      	mov	r1, r0
 8005d8e:	f7fa fe5f 	bl	8000a50 <__aeabi_fsub>
 8005d92:	4601      	mov	r1, r0
 8005d94:	f7fb f81a 	bl	8000dcc <__aeabi_fdiv>
 8005d98:	e7f1      	b.n	8005d7e <__ieee754_sqrtf+0x1e>
 8005d9a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8005d9e:	ea4f 54e0 	mov.w	r4, r0, asr #23
 8005da2:	d32e      	bcc.n	8005e02 <__ieee754_sqrtf+0xa2>
 8005da4:	3c7f      	subs	r4, #127	; 0x7f
 8005da6:	07e2      	lsls	r2, r4, #31
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	ea4f 0164 	mov.w	r1, r4, asr #1
 8005db0:	4616      	mov	r6, r2
 8005db2:	f04f 0419 	mov.w	r4, #25
 8005db6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8005dba:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005dbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005dc2:	bf48      	it	mi
 8005dc4:	005b      	lslmi	r3, r3, #1
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	1835      	adds	r5, r6, r0
 8005dca:	429d      	cmp	r5, r3
 8005dcc:	bfde      	ittt	le
 8005dce:	182e      	addle	r6, r5, r0
 8005dd0:	1b5b      	suble	r3, r3, r5
 8005dd2:	1812      	addle	r2, r2, r0
 8005dd4:	3c01      	subs	r4, #1
 8005dd6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005dda:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005dde:	d1f3      	bne.n	8005dc8 <__ieee754_sqrtf+0x68>
 8005de0:	b113      	cbz	r3, 8005de8 <__ieee754_sqrtf+0x88>
 8005de2:	3201      	adds	r2, #1
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	1054      	asrs	r4, r2, #1
 8005dea:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8005dee:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 8005df2:	e7c5      	b.n	8005d80 <__ieee754_sqrtf+0x20>
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	3201      	adds	r2, #1
 8005df8:	0219      	lsls	r1, r3, #8
 8005dfa:	d5fb      	bpl.n	8005df4 <__ieee754_sqrtf+0x94>
 8005dfc:	3a01      	subs	r2, #1
 8005dfe:	1aa4      	subs	r4, r4, r2
 8005e00:	e7d0      	b.n	8005da4 <__ieee754_sqrtf+0x44>
 8005e02:	2200      	movs	r2, #0
 8005e04:	e7f8      	b.n	8005df8 <__ieee754_sqrtf+0x98>

08005e06 <matherr>:
 8005e06:	2000      	movs	r0, #0
 8005e08:	4770      	bx	lr
	...

08005e0c <__errno>:
 8005e0c:	4b01      	ldr	r3, [pc, #4]	; (8005e14 <__errno+0x8>)
 8005e0e:	6818      	ldr	r0, [r3, #0]
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	2000001c 	.word	0x2000001c

08005e18 <__libc_init_array>:
 8005e18:	b570      	push	{r4, r5, r6, lr}
 8005e1a:	2500      	movs	r5, #0
 8005e1c:	4e0c      	ldr	r6, [pc, #48]	; (8005e50 <__libc_init_array+0x38>)
 8005e1e:	4c0d      	ldr	r4, [pc, #52]	; (8005e54 <__libc_init_array+0x3c>)
 8005e20:	1ba4      	subs	r4, r4, r6
 8005e22:	10a4      	asrs	r4, r4, #2
 8005e24:	42a5      	cmp	r5, r4
 8005e26:	d109      	bne.n	8005e3c <__libc_init_array+0x24>
 8005e28:	f000 f82e 	bl	8005e88 <_init>
 8005e2c:	2500      	movs	r5, #0
 8005e2e:	4e0a      	ldr	r6, [pc, #40]	; (8005e58 <__libc_init_array+0x40>)
 8005e30:	4c0a      	ldr	r4, [pc, #40]	; (8005e5c <__libc_init_array+0x44>)
 8005e32:	1ba4      	subs	r4, r4, r6
 8005e34:	10a4      	asrs	r4, r4, #2
 8005e36:	42a5      	cmp	r5, r4
 8005e38:	d105      	bne.n	8005e46 <__libc_init_array+0x2e>
 8005e3a:	bd70      	pop	{r4, r5, r6, pc}
 8005e3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e40:	4798      	blx	r3
 8005e42:	3501      	adds	r5, #1
 8005e44:	e7ee      	b.n	8005e24 <__libc_init_array+0xc>
 8005e46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e4a:	4798      	blx	r3
 8005e4c:	3501      	adds	r5, #1
 8005e4e:	e7f2      	b.n	8005e36 <__libc_init_array+0x1e>
 8005e50:	080086d8 	.word	0x080086d8
 8005e54:	080086d8 	.word	0x080086d8
 8005e58:	080086d8 	.word	0x080086d8
 8005e5c:	080086dc 	.word	0x080086dc

08005e60 <memcpy>:
 8005e60:	b510      	push	{r4, lr}
 8005e62:	1e43      	subs	r3, r0, #1
 8005e64:	440a      	add	r2, r1
 8005e66:	4291      	cmp	r1, r2
 8005e68:	d100      	bne.n	8005e6c <memcpy+0xc>
 8005e6a:	bd10      	pop	{r4, pc}
 8005e6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e74:	e7f7      	b.n	8005e66 <memcpy+0x6>

08005e76 <memset>:
 8005e76:	4603      	mov	r3, r0
 8005e78:	4402      	add	r2, r0
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d100      	bne.n	8005e80 <memset+0xa>
 8005e7e:	4770      	bx	lr
 8005e80:	f803 1b01 	strb.w	r1, [r3], #1
 8005e84:	e7f9      	b.n	8005e7a <memset+0x4>
	...

08005e88 <_init>:
 8005e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8a:	bf00      	nop
 8005e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8e:	bc08      	pop	{r3}
 8005e90:	469e      	mov	lr, r3
 8005e92:	4770      	bx	lr

08005e94 <_fini>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	bf00      	nop
 8005e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9a:	bc08      	pop	{r3}
 8005e9c:	469e      	mov	lr, r3
 8005e9e:	4770      	bx	lr
